# This workflow is used to build and publish a github release
# to all platforms. This workflow cannot be manually ran to
# prevent the same release from being published more than once.

name: Publish Release

on:
  release:
    types: [published]

jobs:
  # Build and publish the github release to S3
  publish-prod-to-s3:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - name: Install project dependencies
        run: npm ci
      - name: Build prod
        run: npm run cdn:build:prod
      - name: Upload prod
        id: prod-s3-upload
        uses: ./.github/actions/s3-upload
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_role: ${{ secrets.AWS_ROLE_ARN }}
          aws_bucket_name: ${{ secrets.AWS_BUCKET }}
          local_dir: $GITHUB_WORKSPACE/build
      - name: Gather prod purge paths
        id: prod-purge-paths
        run: echo "results=$(echo '${{ steps.prod-s3-upload.outputs.results }}' | jq -j '.[].Key | select(. | test("nr-loader-.*?\\.js$") or test(".*stats\\.json$")) + " "')" >> $GITHUB_OUTPUT
      - name: Purge prod fastly cache
        uses: ./.github/actions/fastly-purge
        with:
          fastly_key: ${{ secrets.FASTLY_PURGE_KEY }}
          fastly_service: js-agent.newrelic.com
          purge_path: ${{ steps.prod-purge-paths.outputs.results }}
      - name: Verify prod assets
        uses: ./.github/actions/fastly-verify
        with:
          fastly_key: ${{ secrets.FASTLY_PURGE_KEY }}
          fastly_service: js-agent.newrelic.com
          asset_path: ${{ join(fromJson(steps.prod-s3-upload.outputs.results).*.Key, ' ') }}

  # Publish the new "current" version to s3 before the prod a/b scripts have been built
  publish-current-to-s3:
    needs: [publish-prod-to-s3]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - name: Get version number
        id: agent-loader-version
        run: echo "results=$(cat package.json | jq -r '.version')" >> $GITHUB_OUTPUT
      - name: Copy loaders to current
        id: current-s3-update
        uses: ./.github/actions/update-current
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_role: ${{ secrets.AWS_ROLE_ARN }}
          aws_bucket_name: ${{ secrets.AWS_BUCKET }}
          loader_version: ${{ steps.agent-loader-version.outputs.results }}
      - name: Gather current purge paths
        id: current-purge-paths
        run: echo "results=$(echo '${{ steps.current-s3-update.outputs.results }}' | jq -j '.[].Key + " "')" >> $GITHUB_OUTPUT
      - name: Purge current fastly cache
        uses: ./.github/actions/fastly-purge
        with:
          fastly_key: ${{ secrets.FASTLY_PURGE_KEY }}
          fastly_service: js-agent.newrelic.com
          purge_path: ${{ steps.current-purge-paths.outputs.results }}
      - name: Verify current assets
        uses: ./.github/actions/fastly-verify
        with:
          fastly_key: ${{ secrets.FASTLY_PURGE_KEY }}
          fastly_service: js-agent.newrelic.com
          asset_path: ${{ join(fromJson(steps.current-s3-update.outputs.results).*.Key, ' ') }}

  # Rebuild and publish the prod environment A/B script
  publish-prod-ab:
    needs: [publish-current-to-s3]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - name: Deploy prod a/b script
        uses: ./.github/actions/internal-ab
        with:
          nr_environment: prod
          nrba_app_id: ${{ secrets.INTERNAL_PRODUCTION_APPLICATION_ID }}
          nrba_license_key: ${{ secrets.INTERNAL_LICENSE_KEY }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_role: ${{ secrets.AWS_ROLE_ARN }}
          aws_bucket_name: ${{ secrets.AWS_BUCKET }}
          fastly_key: ${{ secrets.FASTLY_PURGE_KEY }}

  # Rebuild and publish the eu-prod environment A/B script
  publish-eu-prod-ab:
    needs: [publish-current-to-s3]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - name: Deploy eu-prod a/b script
        uses: ./.github/actions/internal-ab
        with:
          nr_environment: eu-prod
          nrba_app_id: ${{ secrets.INTERNAL_EU_PRODUCTION_APPLICATION_ID }}
          nrba_license_key: ${{ secrets.INTERNAL_LICENSE_KEY }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_role: ${{ secrets.AWS_ROLE_ARN }}
          aws_bucket_name: ${{ secrets.AWS_BUCKET }}
          fastly_key: ${{ secrets.FASTLY_PURGE_KEY }}

  # Publish the loaders to nr prod
  publish-to-nr-prod:
    needs: [publish-prod-to-s3]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - name: Get version number
        id: agent-loader-version
        run: echo "results=$(cat package.json | jq -r '.version')" >> $GITHUB_OUTPUT
      - name: Publish loader to nr
        uses: ./.github/actions/nr-upload
        with:
          nr_prod_api_key: ${{ secrets.NR_API_KEY_PRODUCTION }}
          loader_version: ${{ steps.agent-loader-version.outputs.results }}
          environment: prod
      - name: Verify loaders in nr
        uses: ./.github/actions/nr-verify
        with:
          loader_version: ${{ steps.agent-loader-version.outputs.results }}
          environment: prod

  # Publish the loaders to nr stage
  # publish-to-nr-stage:
  #   needs: [ publish-prod-to-s3 ]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: lts/*
  #     - name: Get version number
  #       id: agent-loader-version
  #       run: echo "results=$(cat package.json | jq -r '.version')" >> $GITHUB_OUTPUT
  #     - name: Publish loader to nr
  #       uses: ./.github/actions/nr-upload
  #       with:
  #         nr_stage_api_key: ${{ secrets.NR_API_KEY_STAGING }}
  #         loader_version: ${{ steps.agent-loader-version.outputs.results }}
  #         environment: stage
  #     - name: Verify loaders in nr
  #       uses: ./.github/actions/nr-verify
  #       with:
  #         loader_version: ${{ steps.agent-loader-version.outputs.results }}
  #         environment: stage

  # Publish the agent to npmjs.org
  publish-npm:
    needs: [publish-prod-to-s3]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        shell: bash
    env:
      NPM_TOKEN: ${{ secrets.BROWSER_NPM_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - name: Authenticate npm
        run: |
          npm config set '//registry.npmjs.org/:_authToken' "${NPM_TOKEN}"
      - name: Install project dependencies
        run: npm ci
      - name: Build npm package
        run: npm run build:npm
      - name: Publish npm package
        run: npm publish

  # Raise the release notes pr on the docs website repo
  raise-release-notes-pr:
    needs: [publish-prod-to-s3]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - name: Get version number
        id: agent-loader-version
        run: echo "results=$(cat package.json | jq -r '.version')" >> $GITHUB_OUTPUT
      - name: Raise release notes pr
        uses: ./.github/actions/docs-pr
        with:
          tag: v${{ steps.agent-loader-version.outputs.results }}
          github_login: ${{ secrets.BROWSER_GITHUB_BOT_NAME }}
          github_email: ${{ secrets.BROWSER_GITHUB_BOT_EMAIL }}
          nr_docs_github_token: ${{ secrets.BROWSER_GITHUB_BOT_DOCS_PAT }}

  # Notify the release repo of the new release
  notify-release-repo:
    needs: [publish-to-nr-prod, publish-npm]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - name: Notify Release Repo
        uses: ./.github/actions/notify-repository
        with:
          token: ${{ secrets.BROWSER_GITHUB_BOT_INTERNAL_PAT }}
          repo_owner: newrelic
          repo_name: newrelic-browser-agent-release
          event_type: new_release
