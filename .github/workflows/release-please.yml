# Release Please automates releases using Conventional Commit messages. After each release it maintains an open PR
# called `chore(main): release <semver>`, which keeps the CHANGELOG.md up to date along with a changelog.json file.
# When the release PR is merged, this action will create a Github release. Our docs-site PR workflow will use the
# contents of the changelog.json file and PR headers to generate release notes for the public docs website.
# See https://github.com/google-github-actions/release-please-action

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

name: Release Please

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: google-github-actions/release-please-action@v3
        with:
          release-type: node
          token: ${{ secrets.BROWSER_GITHUB_BOT_INTERNAL_PAT }}
          pull-request-header: "When this PR is merged, a new tagged release will be created with the notes below."
          changelog-types: |
            [
              {"type":"feat","section":"Features"},
              {"type":"fix","section":"Bug Fixes"},
              {"type":"security","section":"Security Fixes"}
            ]
    # Bump a new prerelease version and publish to NPM.
  prerelease-npm-version:
    needs: release-please
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: ${{ secrets.BROWSER_NPM_TOKEN }}
      GITHUB_LOGIN: ${{ secrets.BROWSER_GITHUB_BOT_NAME }}
      GITHUB_EMAIL: ${{ secrets.BROWSER_GITHUB_BOT_EMAIL }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.11.0 # See package.json for the stable node version that works with our testing.  Do not change this unless you know what you are doing as some node versions do not play nicely with our testing server.
      - name: Authenticate npm
        shell: bash
        run: |
          npm config set '//registry.npmjs.org/:_authToken' "${NPM_TOKEN}"
      - name: Set up git
        id: git-setup
        run: |
          git config --global user.name "${GITHUB_LOGIN}"
          git config --global user.email "${GITHUB_EMAIL}"
      - uses: ./.github/actions/prerelease-npm-version
        id: prerelease-npm-version
        with:
          dry_run: false
