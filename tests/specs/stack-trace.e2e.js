const { getErrorsFromResponse } = require('../functional/err/assertion-helpers')

describe('stack trace', () => {
  let testHandle
  const init = {
    ajax: { deny_list: [], harvestTimeSeconds: 5 },
    jserrors: { harvestTimeSeconds: 5 },
    metrics: { harvestTimeSeconds: 5 },
    page_action: { harvestTimeSeconds: 5 },
    page_view_timing: { harvestTimeSeconds: 5 },
    session_trace: { harvestTimeSeconds: 5 },
    spa: { harvestTimeSeconds: 5 }
  }

  beforeEach(async () => {
    testHandle = await browser.getTestHandle()
  })

  afterEach(async () => {
    await testHandle.destroy()
  })

  it('identifies <inline> for same-page scripts (but only same-page scripts)', async () => {
    const url = await testHandle.assetURL('sub-path-script-error/', {
      loader: 'spa',
      init
    })

    const errorsPromise = testHandle.expectErrors()

    await Promise.all([
      testHandle.expectRum(),
      errorsPromise,
      browser.url(url)
    ])

    const { request } = await errorsPromise
    const errorData = getErrorsFromResponse(request)

    // TypeError: Failed to fetch
    //     at e.<computed> (<inline>:12:24399)
    //     at run (http://bam-test-1.nr-local.net:54119/tests/assets/sub-path-script-error/js/script.js:2:3)
    //     at http://bam-test-1.nr-local.net:54119/tests/assets/sub-path-script-error/js/script.js:9:1
    const stackTrace = errorData[0] && errorData[0].params && errorData[0].params.stack_trace
    const stackTraceLines = stackTrace.split('\n')
    expect(stackTraceLines[1]).toContain('<inline>')
    expect(stackTraceLines[2]).not.toContain('<inline>')
    expect(stackTraceLines[3]).not.toContain('<inline>')
  })

  it('still identifies <inline> for same-page scripts after SPA route changes', async () => {
    const url = await testHandle.assetURL('sub-path-script-error/', {
      loader: 'spa',
      init
    })

    await Promise.all([
      testHandle.expectRum(),
      browser.url(url)
    ])

    await browser.execute(() => {
      window.history.replaceState(null, 'New Page Title', './new-route/')
      fetch('http://test/json/foo')
        .catch(e => {
          console.error(e)
          newrelic.noticeError(e)
        })
    })

    const errorsPromise = testHandle.expectErrors()

    const { request } = await errorsPromise
    const errorData = getErrorsFromResponse(request)

    console.log(errorData)

    // errorData[0] is generated by the asset file and ignored for this test
    const params = errorData[1] && errorData[1].params

    // Route has changed
    const requestUri = params?.request_uri
    expect(requestUri).toContain('/new-route/')

    // Parser still captures stack lines referencing original page URI
    // TypeError: Failed to fetch
    //     at e.<computed> (http://bam-test-1.nr-local.net:53516/tests/assets/sub-path-script-error/:12:24399)
    const stackTrace = params?.stack_trace
    const stackTraceLines = stackTrace.split('\n')
    expect(stackTraceLines[1]).toContain('<inline>')
  })
})
