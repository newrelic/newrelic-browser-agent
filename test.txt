TAP version 13

# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# starting chrome@112 (windows 10)
# chrome@112 (windows 10) -> browser/add-event-listener-options.browser.js
# chrome@112 (windows 10) -> browser/aggregator.browser.js
# chrome@112 (windows 10) -> browser/api.browser.js
# chrome@112 (windows 10) -> browser/config.browser.js
# chrome@112 (windows 10) -> browser/drain.browser.js
# chrome@112 (windows 10) -> browser/err/zz-error.browser.js
# chrome@112 (windows 10) -> browser/event-listener-after-abort.browser.js
# chrome@112 (windows 10) -> browser/features.browser.js
# chrome@112 (windows 10) -> browser/harvest-scheduler.browser.js
# chrome@112 (windows 10) -> browser/harvest.browser.js
# chrome@112 (windows 10) -> browser/ins/add-page-action.browser.js
# chrome@112 (windows 10) -> browser/metrics.browser.js
# chrome@112 (windows 10) -> browser/obfuscate.browser.js
# chrome@112 (windows 10) -> browser/spa/api.browser.js
# chrome@112 (windows 10) -> browser/spa/buffered-events.browser.js
# chrome@112 (windows 10) -> browser/spa/callback-timing.browser.js
# chrome@112 (windows 10) -> browser/spa/cancelled-timer-in-callback.browser.js
# chrome@112 (windows 10) -> browser/spa/cancelled-timer-twice.browser.js
# chrome@112 (windows 10) -> browser/spa/cancelled-timer.browser.js
# chrome@112 (windows 10) -> browser/spa/change.browser.js
# chrome@112 (windows 10) -> browser/spa/ended-interaction.browser.js
# chrome@112 (windows 10) -> browser/spa/fetch-body-propagation-ext.browser.js
# chrome@112 (windows 10) -> browser/spa/fetch-body-propagation.browser.js
# chrome@112 (windows 10) -> browser/spa/fetch-rejections.browser.js
# chrome@112 (windows 10) -> browser/spa/hashchange-after-finish.browser.js
# chrome@112 (windows 10) -> browser/spa/hashchange-multiple-event-callbacks.browser.js
# chrome@112 (windows 10) -> browser/spa/hashchange-popstate.browser.js
# chrome@112 (windows 10) -> browser/spa/initial-page-load.browser.js
# chrome@112 (windows 10) -> browser/spa/interaction.browser.js
# chrome@112 (windows 10) -> browser/spa/keypress.browser.js
# chrome@112 (windows 10) -> browser/spa/load-event-during-interaction.browser.js
# chrome@112 (windows 10) -> browser/spa/multiple-event-handlers.browser.js
# chrome@112 (windows 10) -> browser/spa/mutation-observer-events.browser.js
# chrome@112 (windows 10) -> browser/spa/mutation-observer-instrumentation.browser.js
# chrome@112 (windows 10) -> browser/spa/mutation-observer.browser.js
# chrome@112 (windows 10) -> browser/spa/nested-timer.browser.js
# chrome@112 (windows 10) -> browser/spa/nested-xhr.browser.js
# chrome@112 (windows 10) -> browser/spa/parallel-xhr-and-timers.browser.js
# chrome@112 (windows 10) -> addEventListener options work when wrapped
ok chrome@112 (windows 10) -> addEventListener options work when wrapped -> should have seen handler calls both phases
ok chrome@112 (windows 10) -> addEventListener options work when wrapped -> should have seen handler call for capture
ok chrome@112 (windows 10) -> addEventListener options work when wrapped -> should not have seen additional handler calss
# chrome@112 (windows 10) -> tests 3
# chrome@112 (windows 10) -> pass  3
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> browser/spa/promise-basic.browser.js
# chrome@112 (windows 10) -> browser/spa/promise-catch.browser.js
# chrome@112 (windows 10) -> aggregator
ok chrome@112 (windows 10) -> aggregator -> params set first time
ok chrome@112 (windows 10) -> aggregator -> condensed undefined min
ok chrome@112 (windows 10) -> aggregator -> condensed undefined max
ok chrome@112 (windows 10) -> aggregator -> condensed undefined sos
ok chrome@112 (windows 10) -> aggregator -> condensed undefined c
ok chrome@112 (windows 10) -> aggregator -> condensed total value set
ok chrome@112 (windows 10) -> aggregator -> condensed count set
ok chrome@112 (windows 10) -> aggregator -> min value
ok chrome@112 (windows 10) -> aggregator -> max value
ok chrome@112 (windows 10) -> aggregator -> total value
ok chrome@112 (windows 10) -> aggregator -> sos value
ok chrome@112 (windows 10) -> aggregator -> c value
ok chrome@112 (windows 10) -> aggregator -> total count
ok chrome@112 (windows 10) -> aggregator -> get type
ok chrome@112 (windows 10) -> aggregator -> get type, name
ok chrome@112 (windows 10) -> aggregator -> undefined type
ok chrome@112 (windows 10) -> aggregator -> undefined type, name
ok chrome@112 (windows 10) -> aggregator -> real type, undefined name
ok chrome@112 (windows 10) -> aggregator -> Array foo
ok chrome@112 (windows 10) -> aggregator -> Array nonextant
ok chrome@112 (windows 10) -> aggregator -> Cleared after take
# chrome@112 (windows 10) -> params set when metric merged
ok chrome@112 (windows 10) -> params set when metric merged -> params set on merge
# chrome@112 (windows 10) -> get and take return the same data
ok chrome@112 (windows 10) -> get and take return the same data -> params match for metric with type: foo name: bar
ok chrome@112 (windows 10) -> get and take return the same data -> metrics match for metric with type: foo name: bar
ok chrome@112 (windows 10) -> get and take return the same data -> params match for metric with type: foo name: foo
ok chrome@112 (windows 10) -> get and take return the same data -> metrics match for metric with type: foo name: foo
ok chrome@112 (windows 10) -> get and take return the same data -> params match for metric with type: bar name: foo
ok chrome@112 (windows 10) -> get and take return the same data -> metrics match for metric with type: bar name: foo
ok chrome@112 (windows 10) -> get and take return the same data -> params match for metric with type: bar name: bar
ok chrome@112 (windows 10) -> get and take return the same data -> metrics match for metric with type: bar name: bar
# chrome@112 (windows 10) -> merge single-value metric when there is no data in aggregator
ok chrome@112 (windows 10) -> merge single-value metric when there is no data in aggregator -> count value set
ok chrome@112 (windows 10) -> merge single-value metric when there is no data in aggregator -> single-value t value set
# chrome@112 (windows 10) -> merge metric when there is no data in aggregator
ok chrome@112 (windows 10) -> merge metric when there is no data in aggregator -> count value set
ok chrome@112 (windows 10) -> merge metric when there is no data in aggregator -> metric t value set
ok chrome@112 (windows 10) -> merge metric when there is no data in aggregator -> metric min value set
ok chrome@112 (windows 10) -> merge metric when there is no data in aggregator -> metric max value set
ok chrome@112 (windows 10) -> merge metric when there is no data in aggregator -> metric sos value set
ok chrome@112 (windows 10) -> merge metric when there is no data in aggregator -> metric c value set
# chrome@112 (windows 10) -> merge single-value metric into single-value metric
ok chrome@112 (windows 10) -> merge single-value metric into single-value metric -> count value set
ok chrome@112 (windows 10) -> merge single-value metric into single-value metric -> t value set
ok chrome@112 (windows 10) -> merge single-value metric into single-value metric -> min value set
ok chrome@112 (windows 10) -> merge single-value metric into single-value metric -> max value set
ok chrome@112 (windows 10) -> merge single-value metric into single-value metric -> sos value set
ok chrome@112 (windows 10) -> merge single-value metric into single-value metric -> c value set
# chrome@112 (windows 10) -> merge metric into single-value metric
ok chrome@112 (windows 10) -> merge metric into single-value metric -> count value set
ok chrome@112 (windows 10) -> merge metric into single-value metric -> t value set
ok chrome@112 (windows 10) -> merge metric into single-value metric -> min value set
ok chrome@112 (windows 10) -> merge metric into single-value metric -> max value set
ok chrome@112 (windows 10) -> merge metric into single-value metric -> sos value set
ok chrome@112 (windows 10) -> merge metric into single-value metric -> c value set
# chrome@112 (windows 10) -> merge single-value metric into metric
ok chrome@112 (windows 10) -> merge single-value metric into metric -> count value set
ok chrome@112 (windows 10) -> merge single-value metric into metric -> t value set
ok chrome@112 (windows 10) -> merge single-value metric into metric -> min value set
ok chrome@112 (windows 10) -> merge single-value metric into metric -> max value set
ok chrome@112 (windows 10) -> merge single-value metric into metric -> sos value set
ok chrome@112 (windows 10) -> merge single-value metric into metric -> c value set
# chrome@112 (windows 10) -> merge metric into metric
ok chrome@112 (windows 10) -> merge metric into metric -> count value set
ok chrome@112 (windows 10) -> merge metric into metric -> t value set
ok chrome@112 (windows 10) -> merge metric into metric -> min value set
ok chrome@112 (windows 10) -> merge metric into metric -> max value set
ok chrome@112 (windows 10) -> merge metric into metric -> sos value set
ok chrome@112 (windows 10) -> merge metric into metric -> c value set
# chrome@112 (windows 10) -> tests 62
# chrome@112 (windows 10) -> pass  62
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> api
ok chrome@112 (windows 10) -> api -> should be equal
ok chrome@112 (windows 10) -> api -> should be equal
ok chrome@112 (windows 10) -> api -> Set custom metric for finished time: 47750 > 0
ok chrome@112 (windows 10) -> api -> only finish once
ok chrome@112 (windows 10) -> api -> really only finish once
# chrome@112 (windows 10) -> tests 5
# chrome@112 (windows 10) -> pass  5
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> getConfiguration
# chrome@112 (windows 10) -> returns value from NREUM.init using provided path
ok chrome@112 (windows 10) -> returns value from NREUM.init using provided path -> should be equal
ok chrome@112 (windows 10) -> returns value from NREUM.init using provided path -> should be equal
ok chrome@112 (windows 10) -> returns value from NREUM.init using provided path -> should be equal
# chrome@112 (windows 10) -> returns undefined when path does not match
ok chrome@112 (windows 10) -> returns undefined when path does not match -> should be equal
ok chrome@112 (windows 10) -> returns undefined when path does not match -> should be equal
# chrome@112 (windows 10) -> returns undefined when configuration is missing
ok chrome@112 (windows 10) -> returns undefined when configuration is missing -> should be equal
# chrome@112 (windows 10) -> tests 6
# chrome@112 (windows 10) -> pass  6
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> activate features
ok chrome@112 (windows 10) -> activate features -> foo should never be activated
ok chrome@112 (windows 10) -> activate features -> bar should only be activated once
# chrome@112 (windows 10) -> tests 2
# chrome@112 (windows 10) -> pass  2
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> recordSupportability with no value creates a metric with just a count
ok chrome@112 (windows 10) -> recordSupportability with no value creates a metric with just a count -> An aggregated record exists
ok chrome@112 (windows 10) -> recordSupportability with no value creates a metric with just a count -> Props has singular c metric
# chrome@112 (windows 10) -> recordSupportability with no value increments multiple times correctly
ok chrome@112 (windows 10) -> recordSupportability with no value increments multiple times correctly -> An aggregated record exists
ok chrome@112 (windows 10) -> recordSupportability with no value increments multiple times correctly -> Name is correct
ok chrome@112 (windows 10) -> recordSupportability with no value increments multiple times correctly -> Props has c metric and it should have incremented thrice
# chrome@112 (windows 10) -> recordSupportability with a value aggregates stats section
ok chrome@112 (windows 10) -> recordSupportability with a value aggregates stats section -> An aggregated record exists
ok chrome@112 (windows 10) -> recordSupportability with a value aggregates stats section -> Name is correct
ok chrome@112 (windows 10) -> recordSupportability with a value aggregates stats section -> Props has t metric -- 500
# chrome@112 (windows 10) -> recordSupportability with a value aggregates stats section and increments correctly
ok chrome@112 (windows 10) -> recordSupportability with a value aggregates stats section and increments correctly -> An aggregated record exists
ok chrome@112 (windows 10) -> recordSupportability with a value aggregates stats section and increments correctly -> Name is correct
ok chrome@112 (windows 10) -> recordSupportability with a value aggregates stats section and increments correctly -> aggregated totals sum correctly
ok chrome@112 (windows 10) -> recordSupportability with a value aggregates stats section and increments correctly -> min value is as expected
ok chrome@112 (windows 10) -> recordSupportability with a value aggregates stats section and increments correctly -> max value is as expected
ok chrome@112 (windows 10) -> recordSupportability with a value aggregates stats section and increments correctly -> sos value is as expected
ok chrome@112 (windows 10) -> recordSupportability with a value aggregates stats section and increments correctly -> c value is as expected
# chrome@112 (windows 10) -> recordSupportability does not create a customMetric (cm) item
# chrome@112 (windows 10) -> recordCustom with no value creates a metric with just a count
ok chrome@112 (windows 10) -> recordCustom with no value creates a metric with just a count -> An aggregated record exists
ok chrome@112 (windows 10) -> recordCustom with no value creates a metric with just a count -> Name is correct
ok chrome@112 (windows 10) -> recordCustom with no value creates a metric with just a count -> {"params":{"name":"test"},"metrics":{"count":1}}
ok chrome@112 (windows 10) -> recordCustom with no value creates a metric with just a count -> Props only has count metric and it should have incremented once
# chrome@112 (windows 10) -> recordCustom with no value increments multiple times correctly
ok chrome@112 (windows 10) -> recordCustom with no value increments multiple times correctly -> An aggregated record exists
ok chrome@112 (windows 10) -> recordCustom with no value increments multiple times correctly -> Name is correct
ok chrome@112 (windows 10) -> recordCustom with no value increments multiple times correctly -> Props only has count metric and it should have incremented thrice
# chrome@112 (windows 10) -> recordCustom with a value creates a named metric object in metrics section
ok chrome@112 (windows 10) -> recordCustom with a value creates a named metric object in metrics section -> An aggregated record exists
ok chrome@112 (windows 10) -> recordCustom with a value creates a named metric object in metrics section -> Name is correct
ok chrome@112 (windows 10) -> recordCustom with a value creates a named metric object in metrics section -> it should have incremented once
ok chrome@112 (windows 10) -> recordCustom with a value creates a named metric object in metrics section -> should be truthy
# chrome@112 (windows 10) -> recordCustom with a value creates a named metric object in metrics section and increments correctly
ok chrome@112 (windows 10) -> recordCustom with a value creates a named metric object in metrics section and increments correctly -> An aggregated record exists
ok chrome@112 (windows 10) -> recordCustom with a value creates a named metric object in metrics section and increments correctly -> Name is correct
ok chrome@112 (windows 10) -> recordCustom with a value creates a named metric object in metrics section and increments correctly -> it should have incremented once
ok chrome@112 (windows 10) -> recordCustom with a value creates a named metric object in metrics section and increments correctly -> named metric exists
ok chrome@112 (windows 10) -> recordCustom with a value creates a named metric object in metrics section and increments correctly -> aggregated totals sum correctly
ok chrome@112 (windows 10) -> recordCustom with a value creates a named metric object in metrics section and increments correctly -> min value is as expected
ok chrome@112 (windows 10) -> recordCustom with a value creates a named metric object in metrics section and increments correctly -> max value is as expected
ok chrome@112 (windows 10) -> recordCustom with a value creates a named metric object in metrics section and increments correctly -> sos value is as expected
ok chrome@112 (windows 10) -> recordCustom with a value creates a named metric object in metrics section and increments correctly -> c value is as expected
# chrome@112 (windows 10) -> recordCustom with an invalid value type does not create a named metric object in metrics section
ok chrome@112 (windows 10) -> recordCustom with an invalid value type does not create a named metric object in metrics section -> An aggregated record exists
ok chrome@112 (windows 10) -> recordCustom with an invalid value type does not create a named metric object in metrics section -> Name is correct
ok chrome@112 (windows 10) -> recordCustom with an invalid value type does not create a named metric object in metrics section -> Props only has count metric and it should have incremented once
# chrome@112 (windows 10) -> recordCustom does not create a supportabilityMetric (sm) item
# chrome@112 (windows 10) -> tests 38
# chrome@112 (windows 10) -> pass  38
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> returns false if nothing is sent
ok chrome@112 (windows 10) -> returns false if nothing is sent -> sendX returns a falsy value when nothing was sent
# chrome@112 (windows 10) -> encodes only the origin of the referrer url, not the fragment
ok chrome@112 (windows 10) -> encodes only the origin of the referrer url, not the fragment -> correct URL given to sendBeacon
# chrome@112 (windows 10) -> encodes referrer urls that include spaces
ok chrome@112 (windows 10) -> encodes referrer urls that include spaces -> correct URL given to sendBeacon
# chrome@112 (windows 10) -> encodes referrer urls that include ampersands
ok chrome@112 (windows 10) -> encodes referrer urls that include ampersands -> correct URL given to sendBeacon
# chrome@112 (windows 10) -> uses correct submission mechanism for ins
ok chrome@112 (windows 10) -> uses correct submission mechanism for ins -> result truthy when ins submitted via XHR
ok chrome@112 (windows 10) -> uses correct submission mechanism for ins -> correct URL given to sendBeacon
ok chrome@112 (windows 10) -> uses correct submission mechanism for ins -> correct body given to XHR
ok chrome@112 (windows 10) -> uses correct submission mechanism for ins -> harvest finished callback has been called
# chrome@112 (windows 10) -> does not send ins call when there is no body
ok chrome@112 (windows 10) -> does not send ins call when there is no body -> result should be falsy
ok chrome@112 (windows 10) -> does not send ins call when there is no body -> no xhr call should have been made
ok chrome@112 (windows 10) -> does not send ins call when there is no body -> no call via img tag should have been made
ok chrome@112 (windows 10) -> does not send ins call when there is no body -> no beacon call should have been made
# chrome@112 (windows 10) -> uses correct submission mechanism for resources
ok chrome@112 (windows 10) -> uses correct submission mechanism for resources -> result truthy when resources submitted via XHR
ok chrome@112 (windows 10) -> uses correct submission mechanism for resources -> correct URL given to XHR
ok chrome@112 (windows 10) -> uses correct submission mechanism for resources -> correct body given to XHR
ok chrome@112 (windows 10) -> uses correct submission mechanism for resources -> harvest finished callback has been called
# chrome@112 (windows 10) -> does not send resources when there is no body
ok chrome@112 (windows 10) -> does not send resources when there is no body -> result should be falsy
ok chrome@112 (windows 10) -> does not send resources when there is no body -> no xhr call should have been made
ok chrome@112 (windows 10) -> does not send resources when there is no body -> no call via img tag should have been made
ok chrome@112 (windows 10) -> does not send resources when there is no body -> no beacon call should have been made
# chrome@112 (windows 10) -> uses an XHR and returns it for first resources POST
ok chrome@112 (windows 10) -> uses an XHR and returns it for first resources POST -> result truthy when resources submitted via XHR with needResponse
ok chrome@112 (windows 10) -> uses an XHR and returns it for first resources POST -> correct URL given to XHR
ok chrome@112 (windows 10) -> uses an XHR and returns it for first resources POST -> correct body given to XHR
ok chrome@112 (windows 10) -> uses an XHR and returns it for first resources POST -> did not use img to submit first resources POST
ok chrome@112 (windows 10) -> uses an XHR and returns it for first resources POST -> did not use beacon to submit first resources POST
# chrome@112 (windows 10) -> uses correct submission mechanism for jserrors
ok chrome@112 (windows 10) -> uses correct submission mechanism for jserrors -> result truthy when jserrors submitted via xhr
ok chrome@112 (windows 10) -> uses correct submission mechanism for jserrors -> correct URL given to xhr
ok chrome@112 (windows 10) -> uses correct submission mechanism for jserrors -> body arg given to xhr is correct
ok chrome@112 (windows 10) -> uses correct submission mechanism for jserrors -> harvest finished callback has been called
# chrome@112 (windows 10) -> adds ptid to harvest when ptid is present
ok chrome@112 (windows 10) -> adds ptid to harvest when ptid is present -> result truthy when jserrors submitted via xhr
ok chrome@112 (windows 10) -> adds ptid to harvest when ptid is present -> correct URL given to xhr
# chrome@112 (windows 10) -> does not add ptid to harvest when ptid is not present
ok chrome@112 (windows 10) -> does not add ptid to harvest when ptid is not present -> result truthy when jserrors submitted via xhr
ok chrome@112 (windows 10) -> does not add ptid to harvest when ptid is not present -> ptid not included in querystring
# chrome@112 (windows 10) -> does not send jserrors when there is nothing to send
ok chrome@112 (windows 10) -> does not send jserrors when there is nothing to send -> result should be falsy
ok chrome@112 (windows 10) -> does not send jserrors when there is nothing to send -> no xhr call should have been made
ok chrome@112 (windows 10) -> does not send jserrors when there is nothing to send -> no call via img tag should have been made
ok chrome@112 (windows 10) -> does not send jserrors when there is nothing to send -> no beacon call should have been made
# chrome@112 (windows 10) -> uses correct submission mechanism for events
ok chrome@112 (windows 10) -> uses correct submission mechanism for events -> result truthy when events submitted via xhr
ok chrome@112 (windows 10) -> uses correct submission mechanism for events -> correct URL given to xhr
ok chrome@112 (windows 10) -> uses correct submission mechanism for events -> body arg given to xhr is correct
ok chrome@112 (windows 10) -> uses correct submission mechanism for events -> harvest finished callback has been called
# chrome@112 (windows 10) -> does not send eents when there is nothing to send
ok chrome@112 (windows 10) -> does not send eents when there is nothing to send -> result should be falsy
ok chrome@112 (windows 10) -> does not send eents when there is nothing to send -> no xhr call should have been made
ok chrome@112 (windows 10) -> does not send eents when there is nothing to send -> no call via img tag should have been made
ok chrome@112 (windows 10) -> does not send eents when there is nothing to send -> no beacon call should have been made
# chrome@112 (windows 10) -> uses correct submission mechanisms on unload
ok chrome@112 (windows 10) -> uses correct submission mechanisms on unload -> did not send any final submissions via XHR
ok chrome@112 (windows 10) -> uses correct submission mechanisms on unload -> sent all final submissions via sendBeacon
ok chrome@112 (windows 10) -> uses correct submission mechanisms on unload -> got unload submission for ins
ok chrome@112 (windows 10) -> uses correct submission mechanisms on unload -> got unload submission for resources
ok chrome@112 (windows 10) -> uses correct submission mechanisms on unload -> got unload submission for jserrors
ok chrome@112 (windows 10) -> uses correct submission mechanisms on unload -> got unload submission for events
ok chrome@112 (windows 10) -> uses correct submission mechanisms on unload -> correct URL for ins unload submission
ok chrome@112 (windows 10) -> uses correct submission mechanisms on unload -> correct body for ins unload submission
ok chrome@112 (windows 10) -> uses correct submission mechanisms on unload -> correct URL for resources unload submission
ok chrome@112 (windows 10) -> uses correct submission mechanisms on unload -> correct body for resources unload submission
ok chrome@112 (windows 10) -> uses correct submission mechanisms on unload -> correct URL for events unload submission
ok chrome@112 (windows 10) -> uses correct submission mechanisms on unload -> send correct body on final events submission
ok chrome@112 (windows 10) -> uses correct submission mechanisms on unload -> correct URL for jserrors unload submission
ok chrome@112 (windows 10) -> uses correct submission mechanisms on unload -> correct body for jserrors unload submission
# chrome@112 (windows 10) -> when sendBeacon returns false
# chrome@112 (windows 10) -> uses img for jserrors
ok chrome@112 (windows 10) -> uses img for jserrors -> sent one final submissions via IMG (jserrors)
ok chrome@112 (windows 10) -> uses img for jserrors -> correct URL given to img
ok chrome@112 (windows 10) -> uses img for jserrors -> no body arg given to img
# chrome@112 (windows 10) -> uses img for ins
ok chrome@112 (windows 10) -> uses img for ins -> sent one final submissions via IMG (ins)
ok chrome@112 (windows 10) -> uses img for ins -> correct URL given to img
ok chrome@112 (windows 10) -> uses img for ins -> no body arg given to img
# chrome@112 (windows 10) -> uses img for resources
ok chrome@112 (windows 10) -> uses img for resources -> sent one final submissions via IMG (resources)
ok chrome@112 (windows 10) -> uses img for resources -> correct URL given to img
ok chrome@112 (windows 10) -> uses img for resources -> no body arg given to img
# chrome@112 (windows 10) -> uses img for events
ok chrome@112 (windows 10) -> uses img for events -> sent one final submissions via IMG (events)
ok chrome@112 (windows 10) -> uses img for events -> correct URL given to img
ok chrome@112 (windows 10) -> uses img for events -> no body arg given to img
# chrome@112 (windows 10) -> response codes
# chrome@112 (windows 10) -> returns correct result with 200
ok chrome@112 (windows 10) -> returns correct result with 200 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 202
ok chrome@112 (windows 10) -> returns correct result with 202 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 400
ok chrome@112 (windows 10) -> returns correct result with 400 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 404
ok chrome@112 (windows 10) -> returns correct result with 404 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 408
ok chrome@112 (windows 10) -> returns correct result with 408 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 413
ok chrome@112 (windows 10) -> returns correct result with 413 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 414
ok chrome@112 (windows 10) -> returns correct result with 414 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 429
ok chrome@112 (windows 10) -> returns correct result with 429 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 431
ok chrome@112 (windows 10) -> returns correct result with 431 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 500
ok chrome@112 (windows 10) -> returns correct result with 500 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 503
ok chrome@112 (windows 10) -> returns correct result with 503 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 200
ok chrome@112 (windows 10) -> returns correct result with 200 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 202
ok chrome@112 (windows 10) -> returns correct result with 202 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 400
ok chrome@112 (windows 10) -> returns correct result with 400 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 404
ok chrome@112 (windows 10) -> returns correct result with 404 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 408
ok chrome@112 (windows 10) -> returns correct result with 408 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 413
ok chrome@112 (windows 10) -> returns correct result with 413 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 414
ok chrome@112 (windows 10) -> returns correct result with 414 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 429
ok chrome@112 (windows 10) -> returns correct result with 429 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 431
ok chrome@112 (windows 10) -> returns correct result with 431 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 500
ok chrome@112 (windows 10) -> returns correct result with 500 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 503
ok chrome@112 (windows 10) -> returns correct result with 503 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 200
ok chrome@112 (windows 10) -> returns correct result with 200 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 202
ok chrome@112 (windows 10) -> returns correct result with 202 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 400
ok chrome@112 (windows 10) -> returns correct result with 400 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 404
ok chrome@112 (windows 10) -> returns correct result with 404 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 408
ok chrome@112 (windows 10) -> returns correct result with 408 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 413
ok chrome@112 (windows 10) -> returns correct result with 413 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 414
ok chrome@112 (windows 10) -> returns correct result with 414 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 429
ok chrome@112 (windows 10) -> returns correct result with 429 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 431
ok chrome@112 (windows 10) -> returns correct result with 431 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 500
ok chrome@112 (windows 10) -> returns correct result with 500 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 503
ok chrome@112 (windows 10) -> returns correct result with 503 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 200
ok chrome@112 (windows 10) -> returns correct result with 200 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 202
ok chrome@112 (windows 10) -> returns correct result with 202 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 400
ok chrome@112 (windows 10) -> returns correct result with 400 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 404
ok chrome@112 (windows 10) -> returns correct result with 404 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 408
ok chrome@112 (windows 10) -> returns correct result with 408 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 413
ok chrome@112 (windows 10) -> returns correct result with 413 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 414
ok chrome@112 (windows 10) -> returns correct result with 414 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 429
ok chrome@112 (windows 10) -> returns correct result with 429 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 431
ok chrome@112 (windows 10) -> returns correct result with 431 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 500
ok chrome@112 (windows 10) -> returns correct result with 500 -> should be equal
# chrome@112 (windows 10) -> returns correct result with 503
ok chrome@112 (windows 10) -> returns correct result with 503 -> should be equal
# chrome@112 (windows 10) -> tests 115
# chrome@112 (windows 10) -> pass  115
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> error
ok chrome@112 (windows 10) -> error -> requires addEventListener
# chrome@112 (windows 10) -> tests 1
# chrome@112 (windows 10) -> pass  1
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> eventListener methods work as expected after abort
ok chrome@112 (windows 10) -> eventListener methods work as expected after abort -> should have seen handler1 called twice
ok chrome@112 (windows 10) -> eventListener methods work as expected after abort -> should have seen handler2 called twice
ok chrome@112 (windows 10) -> eventListener methods work as expected after abort -> should have seen handler1 called 3 times
ok chrome@112 (windows 10) -> eventListener methods work as expected after abort -> should have seen handler2 called twice
ok chrome@112 (windows 10) -> eventListener methods work as expected after abort -> should have seen handler1 called 4 times
ok chrome@112 (windows 10) -> eventListener methods work as expected after abort -> should have seen handler2 called 3 times
ok chrome@112 (windows 10) -> eventListener methods work as expected after abort -> should have seen handler1 called 4 times
ok chrome@112 (windows 10) -> eventListener methods work as expected after abort -> should have seen handler2 called 3 times
# chrome@112 (windows 10) -> tests 8
# chrome@112 (windows 10) -> pass  8
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> drain
# chrome@112 (windows 10) -> unbuffered handlers
ok chrome@112 (windows 10) -> unbuffered handlers -> should be in right order
ok chrome@112 (windows 10) -> unbuffered handlers -> should have right context
ok chrome@112 (windows 10) -> unbuffered handlers -> should have right args
ok chrome@112 (windows 10) -> unbuffered handlers -> should be in right order
ok chrome@112 (windows 10) -> unbuffered handlers -> should have right context
ok chrome@112 (windows 10) -> unbuffered handlers -> should have right args
ok chrome@112 (windows 10) -> unbuffered handlers -> should be in right order
ok chrome@112 (windows 10) -> unbuffered handlers -> should be in right order
ok chrome@112 (windows 10) -> unbuffered handlers -> should have right context
ok chrome@112 (windows 10) -> unbuffered handlers -> should have right args
ok chrome@112 (windows 10) -> unbuffered handlers -> should be in right order
# chrome@112 (windows 10) -> unbuffered handlers, early register
ok chrome@112 (windows 10) -> unbuffered handlers, early register -> should be in right order
ok chrome@112 (windows 10) -> unbuffered handlers, early register -> should have right context
ok chrome@112 (windows 10) -> unbuffered handlers, early register -> should have right args
ok chrome@112 (windows 10) -> unbuffered handlers, early register -> should be in right order
ok chrome@112 (windows 10) -> unbuffered handlers, early register -> should have right context
ok chrome@112 (windows 10) -> unbuffered handlers, early register -> should have right args
ok chrome@112 (windows 10) -> unbuffered handlers, early register -> should be in right order
ok chrome@112 (windows 10) -> unbuffered handlers, early register -> should be in right order
ok chrome@112 (windows 10) -> unbuffered handlers, early register -> should have right context
ok chrome@112 (windows 10) -> unbuffered handlers, early register -> should have right args
ok chrome@112 (windows 10) -> unbuffered handlers, early register -> should be in right order
# chrome@112 (windows 10) -> unbuffered handlers, emit after drain
ok chrome@112 (windows 10) -> unbuffered handlers, emit after drain -> should be in right order
ok chrome@112 (windows 10) -> unbuffered handlers, emit after drain -> should have right context
ok chrome@112 (windows 10) -> unbuffered handlers, emit after drain -> should have right args
ok chrome@112 (windows 10) -> unbuffered handlers, emit after drain -> should be in right order
ok chrome@112 (windows 10) -> unbuffered handlers, emit after drain -> should have right context
ok chrome@112 (windows 10) -> unbuffered handlers, emit after drain -> should have right args
ok chrome@112 (windows 10) -> unbuffered handlers, emit after drain -> should be in right order
ok chrome@112 (windows 10) -> unbuffered handlers, emit after drain -> should have right context
ok chrome@112 (windows 10) -> unbuffered handlers, emit after drain -> should have right args
ok chrome@112 (windows 10) -> unbuffered handlers, emit after drain -> should be in right order
ok chrome@112 (windows 10) -> unbuffered handlers, emit after drain -> should have right context
ok chrome@112 (windows 10) -> unbuffered handlers, emit after drain -> should have right args
ok chrome@112 (windows 10) -> unbuffered handlers, emit after drain -> should be in right order
# chrome@112 (windows 10) -> emit buffered event in buffered handler
ok chrome@112 (windows 10) -> emit buffered event in buffered handler -> should be in right order
ok chrome@112 (windows 10) -> emit buffered event in buffered handler -> should be in right order
ok chrome@112 (windows 10) -> emit buffered event in buffered handler -> should have right context
ok chrome@112 (windows 10) -> emit buffered event in buffered handler -> should have right args
ok chrome@112 (windows 10) -> emit buffered event in buffered handler -> should be in right order
ok chrome@112 (windows 10) -> emit buffered event in buffered handler -> should have right context
ok chrome@112 (windows 10) -> emit buffered event in buffered handler -> should have right args
ok chrome@112 (windows 10) -> emit buffered event in buffered handler -> should be in right order
ok chrome@112 (windows 10) -> emit buffered event in buffered handler -> should have right context
ok chrome@112 (windows 10) -> emit buffered event in buffered handler -> should have right args
ok chrome@112 (windows 10) -> emit buffered event in buffered handler -> should be in right order
# chrome@112 (windows 10) -> emit buffered event in unbuffered handler
ok chrome@112 (windows 10) -> emit buffered event in unbuffered handler -> should be in right order
ok chrome@112 (windows 10) -> emit buffered event in unbuffered handler -> should be in right order
ok chrome@112 (windows 10) -> emit buffered event in unbuffered handler -> should have right context
ok chrome@112 (windows 10) -> emit buffered event in unbuffered handler -> should have right args
ok chrome@112 (windows 10) -> emit buffered event in unbuffered handler -> should be in right order
ok chrome@112 (windows 10) -> emit buffered event in unbuffered handler -> should have right context
ok chrome@112 (windows 10) -> emit buffered event in unbuffered handler -> should have right args
ok chrome@112 (windows 10) -> emit buffered event in unbuffered handler -> should be in right order
# chrome@112 (windows 10) -> does not resume buffering after drain
ok chrome@112 (windows 10) -> does not resume buffering after drain -> should buffer events before drain
ok chrome@112 (windows 10) -> does not resume buffering after drain -> should not buffer after drain
# chrome@112 (windows 10) -> tests 56
# chrome@112 (windows 10) -> pass  56
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> after calling startTimer, periodically invokes harvest
ok chrome@112 (windows 10) -> after calling startTimer, periodically invokes harvest -> harvest was initiated more than once
# chrome@112 (windows 10) -> scheduleHarvest invokes harvest once
ok chrome@112 (windows 10) -> scheduleHarvest invokes harvest once -> harvest was initiated once
# chrome@112 (windows 10) -> when getPayload is provided, calls harvest.send
ok chrome@112 (windows 10) -> when getPayload is provided, calls harvest.send -> harvest.send was called
ok chrome@112 (windows 10) -> when getPayload is provided, calls harvest.send -> harvest.sendX was not called
# chrome@112 (windows 10) -> when getPayload is not provided, calls harvest.sendX
ok chrome@112 (windows 10) -> when getPayload is not provided, calls harvest.sendX -> harvest.send was not called
ok chrome@112 (windows 10) -> when getPayload is not provided, calls harvest.sendX -> harvest.sendX was called
# chrome@112 (windows 10) -> does not call harvest.send when payload is null
ok chrome@112 (windows 10) -> does not call harvest.send when payload is null -> harvest.send was not called
ok chrome@112 (windows 10) -> does not call harvest.send when payload is null -> harvest.sendX was not called
# chrome@112 (windows 10) -> provides retry to getPayload when submit method is xhr
ok chrome@112 (windows 10) -> provides retry to getPayload when submit method is xhr -> method was xhr
ok chrome@112 (windows 10) -> provides retry to getPayload when submit method is xhr -> retry was set to true
# chrome@112 (windows 10) -> when retrying, uses delay provided by harvest response
ok chrome@112 (windows 10) -> when retrying, uses delay provided by harvest response -> should be equal
ok chrome@112 (windows 10) -> when retrying, uses delay provided by harvest response -> should be equal
ok chrome@112 (windows 10) -> when retrying, uses delay provided by harvest response -> should be equal
# chrome@112 (windows 10) -> tests 13
# chrome@112 (windows 10) -> pass  13
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> parameters not modified
ok chrome@112 (windows 10) -> parameters not modified -> should be equivalent
# chrome@112 (windows 10) -> tests 1
# chrome@112 (windows 10) -> pass  1
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> Obfuscation validateRules input
# chrome@112 (windows 10) -> Invalid: missing regex
ok chrome@112 (windows 10) -> Invalid: missing regex -> expecting false
# chrome@112 (windows 10) -> Valid: missing replacement
ok chrome@112 (windows 10) -> Valid: missing replacement -> expecting true
# chrome@112 (windows 10) -> Invalid regex type (must be string or RegExp)
ok chrome@112 (windows 10) -> Invalid regex type (must be string or RegExp) -> expecting false
# chrome@112 (windows 10) -> Invalid replacement type (must be string)
ok chrome@112 (windows 10) -> Invalid replacement type (must be string) -> expecting false
# chrome@112 (windows 10) -> Valid string regex
ok chrome@112 (windows 10) -> Valid string regex -> expecting true
# chrome@112 (windows 10) -> Valid RegExp regex
ok chrome@112 (windows 10) -> Valid RegExp regex -> expecting true
# chrome@112 (windows 10) -> Should Obfuscate
ok chrome@112 (windows 10) -> Should Obfuscate -> When init.obfuscate is defined, shouldObfuscate is true
ok chrome@112 (windows 10) -> Should Obfuscate -> When init.obfuscate is NOT defined, shouldObfuscate is false
# chrome@112 (windows 10) -> Get Rules
ok chrome@112 (windows 10) -> Get Rules -> getRules should generate a list of rules from init.obfuscate
ok chrome@112 (windows 10) -> Get Rules -> getRules should generate an empty list if init.obfuscate is undefined
ok chrome@112 (windows 10) -> Get Rules -> getRules should generate a rule for file obfuscation if file protocol is detected
# chrome@112 (windows 10) -> Obfuscate String Method
ok chrome@112 (windows 10) -> Obfuscate String Method -> Successfully obfuscates missing replacement field
ok chrome@112 (windows 10) -> Obfuscate String Method -> Successfully obfuscates string
ok chrome@112 (windows 10) -> Obfuscate String Method -> Successfully obfuscates regex
ok chrome@112 (windows 10) -> Obfuscate String Method -> Successfully obfuscates file protocol
# chrome@112 (windows 10) -> tests 15
# chrome@112 (windows 10) -> pass  15
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> spa buffers all expected events
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
ok chrome@112 (windows 10) -> spa buffers all expected events -> should be equal
# chrome@112 (windows 10) -> tests 63
# chrome@112 (windows 10) -> pass  63
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> simple sync api test
ok chrome@112 (windows 10) -> simple sync api test -> should be equal
ok chrome@112 (windows 10) -> simple sync api test -> should be equal
ok chrome@112 (windows 10) -> simple sync api test -> should be equal
ok chrome@112 (windows 10) -> simple sync api test -> should be equal
ok chrome@112 (windows 10) -> simple sync api test -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> simple sync api test -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> simple sync api test -> custom in attrs should match
ok chrome@112 (windows 10) -> simple sync api test -> node should have children
ok chrome@112 (windows 10) -> simple sync api test -> type should match
ok chrome@112 (windows 10) -> simple sync api test -> node should have expected number of children
ok chrome@112 (windows 10) -> simple sync api test -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> simple sync api test -> interaction node has end time >= start
ok chrome@112 (windows 10) -> simple sync api test -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> simple sync api test -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> simple sync api test -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> simple sync api test -> name in attrs should match
ok chrome@112 (windows 10) -> simple sync api test -> node should have children
ok chrome@112 (windows 10) -> simple sync api test -> type should match
ok chrome@112 (windows 10) -> simple sync api test -> node should have expected number of children
ok chrome@112 (windows 10) -> simple sync api test -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> simple sync api test -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> simple sync api test -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> simple sync api test -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> simple sync api test -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> simple sync api test -> name in attrs should match
ok chrome@112 (windows 10) -> simple sync api test -> node should have children
ok chrome@112 (windows 10) -> simple sync api test -> type should match
ok chrome@112 (windows 10) -> simple sync api test -> node should have expected number of children
ok chrome@112 (windows 10) -> simple sync api test -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> simple sync api test -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> simple sync api test -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> simple sync api test -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> simple sync api test -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> simple sync api test -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> simple sync api test -> should have correct end Time
# chrome@112 (windows 10) -> simple async api test
ok chrome@112 (windows 10) -> simple async api test -> should be equal
ok chrome@112 (windows 10) -> simple async api test -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> simple async api test -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> simple async api test -> custom in attrs should match
ok chrome@112 (windows 10) -> simple async api test -> node should have children
ok chrome@112 (windows 10) -> simple async api test -> type should match
ok chrome@112 (windows 10) -> simple async api test -> node should have expected number of children
ok chrome@112 (windows 10) -> simple async api test -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> simple async api test -> interaction node has end time >= start
ok chrome@112 (windows 10) -> simple async api test -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> simple async api test -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> simple async api test -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> simple async api test -> name in attrs should match
ok chrome@112 (windows 10) -> simple async api test -> node should have children
ok chrome@112 (windows 10) -> simple async api test -> type should match
ok chrome@112 (windows 10) -> simple async api test -> node should have expected number of children
ok chrome@112 (windows 10) -> simple async api test -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> simple async api test -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> simple async api test -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> simple async api test -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> simple async api test -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> simple async api test -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> simple async api test -> should have correct end Time
# chrome@112 (windows 10) -> async api no callback
ok chrome@112 (windows 10) -> async api no callback -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> async api no callback -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> async api no callback -> custom in attrs should match
ok chrome@112 (windows 10) -> async api no callback -> node should have children
ok chrome@112 (windows 10) -> async api no callback -> type should match
ok chrome@112 (windows 10) -> async api no callback -> node should have expected number of children
ok chrome@112 (windows 10) -> async api no callback -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> async api no callback -> interaction node has end time >= start
ok chrome@112 (windows 10) -> async api no callback -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> async api no callback -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> async api no callback -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> async api no callback -> name in attrs should match
ok chrome@112 (windows 10) -> async api no callback -> node should have children
ok chrome@112 (windows 10) -> async api no callback -> type should match
ok chrome@112 (windows 10) -> async api no callback -> node should have expected number of children
ok chrome@112 (windows 10) -> async api no callback -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> async api no callback -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> async api no callback -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> async api no callback -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> async api no callback -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> async api no callback -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> async api no callback -> should have correct end Time
# chrome@112 (windows 10) -> async api outside interaction
ok chrome@112 (windows 10) -> async api outside interaction -> should be equal
ok chrome@112 (windows 10) -> async api outside interaction -> should be equal
ok chrome@112 (windows 10) -> async api outside interaction -> should be equal
ok chrome@112 (windows 10) -> async api outside interaction -> should be equal
# chrome@112 (windows 10) -> sync api outside interaction
ok chrome@112 (windows 10) -> sync api outside interaction -> should be equal
ok chrome@112 (windows 10) -> sync api outside interaction -> should be equal
ok chrome@112 (windows 10) -> sync api outside interaction -> should be equal
ok chrome@112 (windows 10) -> sync api outside interaction -> should be equal
# chrome@112 (windows 10) -> async api outside interaction with throw
ok chrome@112 (windows 10) -> async api outside interaction with throw -> should be equal
ok chrome@112 (windows 10) -> async api outside interaction with throw -> should be equal
ok chrome@112 (windows 10) -> async api outside interaction with throw -> should be equal
ok chrome@112 (windows 10) -> async api outside interaction with throw -> should be equal
# chrome@112 (windows 10) -> sync api outside interaction with throw
ok chrome@112 (windows 10) -> sync api outside interaction with throw -> should be equal
ok chrome@112 (windows 10) -> sync api outside interaction with throw -> should be equal
ok chrome@112 (windows 10) -> sync api outside interaction with throw -> should be equal
ok chrome@112 (windows 10) -> sync api outside interaction with throw -> should be equal
# chrome@112 (windows 10) -> simple sync api test with throw
ok chrome@112 (windows 10) -> simple sync api test with throw -> should be equal
ok chrome@112 (windows 10) -> simple sync api test with throw -> should be equal
ok chrome@112 (windows 10) -> simple sync api test with throw -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> simple sync api test with throw -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> simple sync api test with throw -> custom in attrs should match
ok chrome@112 (windows 10) -> simple sync api test with throw -> node should have children
ok chrome@112 (windows 10) -> simple sync api test with throw -> type should match
ok chrome@112 (windows 10) -> simple sync api test with throw -> node should have expected number of children
ok chrome@112 (windows 10) -> simple sync api test with throw -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> simple sync api test with throw -> interaction node has end time >= start
ok chrome@112 (windows 10) -> simple sync api test with throw -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> simple sync api test with throw -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> simple sync api test with throw -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> simple sync api test with throw -> name in attrs should match
ok chrome@112 (windows 10) -> simple sync api test with throw -> node should have children
ok chrome@112 (windows 10) -> simple sync api test with throw -> type should match
ok chrome@112 (windows 10) -> simple sync api test with throw -> node should have expected number of children
ok chrome@112 (windows 10) -> simple sync api test with throw -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> simple sync api test with throw -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> simple sync api test with throw -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> simple sync api test with throw -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> simple sync api test with throw -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> simple sync api test with throw -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> simple sync api test with throw -> should have correct end Time
# chrome@112 (windows 10) -> simple async api test with throw
ok chrome@112 (windows 10) -> simple async api test with throw -> should be equal
ok chrome@112 (windows 10) -> simple async api test with throw -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> simple async api test with throw -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> simple async api test with throw -> custom in attrs should match
ok chrome@112 (windows 10) -> simple async api test with throw -> node should have children
ok chrome@112 (windows 10) -> simple async api test with throw -> type should match
ok chrome@112 (windows 10) -> simple async api test with throw -> node should have expected number of children
ok chrome@112 (windows 10) -> simple async api test with throw -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> simple async api test with throw -> interaction node has end time >= start
ok chrome@112 (windows 10) -> simple async api test with throw -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> simple async api test with throw -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> simple async api test with throw -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> simple async api test with throw -> name in attrs should match
ok chrome@112 (windows 10) -> simple async api test with throw -> node should have children
ok chrome@112 (windows 10) -> simple async api test with throw -> type should match
ok chrome@112 (windows 10) -> simple async api test with throw -> node should have expected number of children
ok chrome@112 (windows 10) -> simple async api test with throw -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> simple async api test with throw -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> simple async api test with throw -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> simple async api test with throw -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> simple async api test with throw -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> simple async api test with throw -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> simple async api test with throw -> should have correct end Time
# chrome@112 (windows 10) -> async api test with throw does not leave context
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> should be equal
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> custom in attrs should match
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> node should have children
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> type should match
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> node should have expected number of children
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> interaction node has end time >= start
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> name in attrs should match
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> node should have children
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> type should match
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> node should have expected number of children
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> async api test with throw does not leave context -> should have correct end Time
# chrome@112 (windows 10) -> simple sync api test with throw and sibling
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> should get expected error
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> should get right value
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> custom in attrs should match
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> node should have children
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> type should match
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> node should have expected number of children
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> interaction node has end time >= start
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> name in attrs should match
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> node should have children
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> type should match
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> node should have expected number of children
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> name in attrs should match
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> node should have children
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> type should match
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> node should have expected number of children
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> name in attrs should match
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> node should have children
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> type should match
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> node should have expected number of children
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> simple sync api test with throw and sibling -> should have correct end Time
# chrome@112 (windows 10) -> end interaction
ok chrome@112 (windows 10) -> end interaction -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> end interaction -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> end interaction -> node should have children
ok chrome@112 (windows 10) -> end interaction -> type should match
ok chrome@112 (windows 10) -> end interaction -> node should have expected number of children
ok chrome@112 (windows 10) -> end interaction -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> end interaction -> interaction node has end time >= start
ok chrome@112 (windows 10) -> end interaction -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> end interaction -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> end interaction -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> end interaction -> node should have children
ok chrome@112 (windows 10) -> end interaction -> type should match
ok chrome@112 (windows 10) -> end interaction -> node should have expected number of children
ok chrome@112 (windows 10) -> end interaction -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> end interaction -> should have correct end Time
# chrome@112 (windows 10) -> custom interaction name
ok chrome@112 (windows 10) -> custom interaction name -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> custom interaction name -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> custom interaction name -> customName in attrs should match
ok chrome@112 (windows 10) -> custom interaction name -> node should have children
ok chrome@112 (windows 10) -> custom interaction name -> type should match
ok chrome@112 (windows 10) -> custom interaction name -> node should have expected number of children
ok chrome@112 (windows 10) -> custom interaction name -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> custom interaction name -> interaction node has end time >= start
ok chrome@112 (windows 10) -> custom interaction name -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> custom interaction name -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> custom interaction name -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> custom interaction name -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> custom interaction name -> should have correct end Time
# chrome@112 (windows 10) -> custom actionText
ok chrome@112 (windows 10) -> custom actionText -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> custom actionText -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> custom actionText -> custom in attrs should match
ok chrome@112 (windows 10) -> custom actionText -> node should have children
ok chrome@112 (windows 10) -> custom actionText -> type should match
ok chrome@112 (windows 10) -> custom actionText -> node should have expected number of children
ok chrome@112 (windows 10) -> custom actionText -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> custom actionText -> interaction node has end time >= start
ok chrome@112 (windows 10) -> custom actionText -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> custom actionText -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> custom actionText -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> custom actionText -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> custom actionText -> should have correct end Time
# chrome@112 (windows 10) -> ignore interaction
ok chrome@112 (windows 10) -> ignore interaction -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> ignore interaction -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> ignore interaction -> interaction should be ignored
ok chrome@112 (windows 10) -> ignore interaction -> node should have children
ok chrome@112 (windows 10) -> ignore interaction -> type should match
ok chrome@112 (windows 10) -> ignore interaction -> node should have expected number of children
ok chrome@112 (windows 10) -> ignore interaction -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> ignore interaction -> interaction node has end time >= start
ok chrome@112 (windows 10) -> ignore interaction -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> ignore interaction -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> ignore interaction -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> ignore interaction -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> ignore interaction -> should have correct end Time
# chrome@112 (windows 10) -> custom attributes
ok chrome@112 (windows 10) -> custom attributes -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> custom attributes -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> custom attributes -> interaction should not be ignored
ok chrome@112 (windows 10) -> custom attributes -> custom in attrs should match
ok chrome@112 (windows 10) -> custom attributes -> node should have children
ok chrome@112 (windows 10) -> custom attributes -> type should match
ok chrome@112 (windows 10) -> custom attributes -> node should have expected number of children
ok chrome@112 (windows 10) -> custom attributes -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> custom attributes -> interaction node has end time >= start
ok chrome@112 (windows 10) -> custom attributes -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> custom attributes -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> custom attributes -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> custom attributes -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> custom attributes -> should have correct end Time
# chrome@112 (windows 10) -> custom attributes and interaction attributes
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> interaction should not be ignored
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> custom in attrs should match
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> node should have children
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> type should match
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> node should have expected number of children
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> interaction node has end time >= start
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> should have correct end Time
# chrome@112 (windows 10) -> custom attributes and interaction attributes
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> interaction should not be ignored
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> custom in attrs should match
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> node should have children
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> type should match
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> node should have expected number of children
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> interaction node has end time >= start
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> custom attributes and interaction attributes -> should have correct end Time
# chrome@112 (windows 10) -> context store and onEnd
ok chrome@112 (windows 10) -> context store and onEnd -> should get right context in timeout
ok chrome@112 (windows 10) -> context store and onEnd -> should get right context on end
ok chrome@112 (windows 10) -> context store and onEnd -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> context store and onEnd -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> context store and onEnd -> interaction should not be ignored
ok chrome@112 (windows 10) -> context store and onEnd -> custom in attrs should match
ok chrome@112 (windows 10) -> context store and onEnd -> node should have children
ok chrome@112 (windows 10) -> context store and onEnd -> type should match
ok chrome@112 (windows 10) -> context store and onEnd -> node should have expected number of children
ok chrome@112 (windows 10) -> context store and onEnd -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> context store and onEnd -> interaction node has end time >= start
ok chrome@112 (windows 10) -> context store and onEnd -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> context store and onEnd -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> context store and onEnd -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> context store and onEnd -> name in attrs should match
ok chrome@112 (windows 10) -> context store and onEnd -> node should have children
ok chrome@112 (windows 10) -> context store and onEnd -> type should match
ok chrome@112 (windows 10) -> context store and onEnd -> node should have expected number of children
ok chrome@112 (windows 10) -> context store and onEnd -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> context store and onEnd -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> context store and onEnd -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> context store and onEnd -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> context store and onEnd -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> context store and onEnd -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> context store and onEnd -> should have correct end Time
# chrome@112 (windows 10) -> save
ok chrome@112 (windows 10) -> save -> should be set to save
ok chrome@112 (windows 10) -> save -> node should have children
ok chrome@112 (windows 10) -> save -> type should match
ok chrome@112 (windows 10) -> save -> node should have expected number of children
ok chrome@112 (windows 10) -> save -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> save -> interaction node has end time >= start
ok chrome@112 (windows 10) -> save -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> save -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> save -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> save -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> save -> should have correct end Time
# chrome@112 (windows 10) -> save with ignore
ok chrome@112 (windows 10) -> save with ignore -> should be set to save
ok chrome@112 (windows 10) -> save with ignore -> should be set to ignore
ok chrome@112 (windows 10) -> save with ignore -> node should have children
ok chrome@112 (windows 10) -> save with ignore -> type should match
ok chrome@112 (windows 10) -> save with ignore -> node should have expected number of children
ok chrome@112 (windows 10) -> save with ignore -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> save with ignore -> interaction node has end time >= start
ok chrome@112 (windows 10) -> save with ignore -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> save with ignore -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> save with ignore -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> save with ignore -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> save with ignore -> should have correct end Time
# chrome@112 (windows 10) -> save with ignore after
ok chrome@112 (windows 10) -> save with ignore after -> should be set to save
ok chrome@112 (windows 10) -> save with ignore after -> should be set to ignore
ok chrome@112 (windows 10) -> save with ignore after -> node should have children
ok chrome@112 (windows 10) -> save with ignore after -> type should match
ok chrome@112 (windows 10) -> save with ignore after -> node should have expected number of children
ok chrome@112 (windows 10) -> save with ignore after -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> save with ignore after -> interaction node has end time >= start
ok chrome@112 (windows 10) -> save with ignore after -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> save with ignore after -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> save with ignore after -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> save with ignore after -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> save with ignore after -> should have correct end Time
# chrome@112 (windows 10) -> interaction outside interaction
ok chrome@112 (windows 10) -> interaction outside interaction -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> interaction outside interaction -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> interaction outside interaction -> interaction should not be ignored
ok chrome@112 (windows 10) -> interaction outside interaction -> trigger in attrs should match
ok chrome@112 (windows 10) -> interaction outside interaction -> custom in attrs should match
ok chrome@112 (windows 10) -> interaction outside interaction -> node should have children
ok chrome@112 (windows 10) -> interaction outside interaction -> type should match
ok chrome@112 (windows 10) -> interaction outside interaction -> node should have expected number of children
ok chrome@112 (windows 10) -> interaction outside interaction -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> interaction outside interaction -> interaction node has end time >= start
ok chrome@112 (windows 10) -> interaction outside interaction -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> interaction outside interaction -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> interaction outside interaction -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> interaction outside interaction -> name in attrs should match
ok chrome@112 (windows 10) -> interaction outside interaction -> node should have children
ok chrome@112 (windows 10) -> interaction outside interaction -> type should match
ok chrome@112 (windows 10) -> interaction outside interaction -> node should have expected number of children
ok chrome@112 (windows 10) -> interaction outside interaction -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> interaction outside interaction -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> interaction outside interaction -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> interaction outside interaction -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> interaction outside interaction -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> interaction outside interaction -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> interaction outside interaction -> should have correct end Time
# chrome@112 (windows 10) -> interaction outside wrapped function
ok chrome@112 (windows 10) -> interaction outside wrapped function -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> interaction outside wrapped function -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> interaction outside wrapped function -> interaction should not be ignored
ok chrome@112 (windows 10) -> interaction outside wrapped function -> trigger in attrs should match
ok chrome@112 (windows 10) -> interaction outside wrapped function -> custom in attrs should match
ok chrome@112 (windows 10) -> interaction outside wrapped function -> node should have children
ok chrome@112 (windows 10) -> interaction outside wrapped function -> type should match
ok chrome@112 (windows 10) -> interaction outside wrapped function -> node should have expected number of children
ok chrome@112 (windows 10) -> interaction outside wrapped function -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> interaction outside wrapped function -> interaction node has end time >= start
ok chrome@112 (windows 10) -> interaction outside wrapped function -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> interaction outside wrapped function -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> interaction outside wrapped function -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> interaction outside wrapped function -> name in attrs should match
ok chrome@112 (windows 10) -> interaction outside wrapped function -> node should have children
ok chrome@112 (windows 10) -> interaction outside wrapped function -> type should match
ok chrome@112 (windows 10) -> interaction outside wrapped function -> node should have expected number of children
ok chrome@112 (windows 10) -> interaction outside wrapped function -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> interaction outside wrapped function -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> interaction outside wrapped function -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> interaction outside wrapped function -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> interaction outside wrapped function -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> interaction outside wrapped function -> name in attrs should match
ok chrome@112 (windows 10) -> interaction outside wrapped function -> node should have children
ok chrome@112 (windows 10) -> interaction outside wrapped function -> type should match
ok chrome@112 (windows 10) -> interaction outside wrapped function -> node should have expected number of children
ok chrome@112 (windows 10) -> interaction outside wrapped function -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> interaction outside wrapped function -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> interaction outside wrapped function -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> interaction outside wrapped function -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> interaction outside wrapped function -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> interaction outside wrapped function -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> interaction outside wrapped function -> should have correct end Time
# chrome@112 (windows 10) -> set trigger
ok chrome@112 (windows 10) -> set trigger -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> set trigger -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> set trigger -> interaction should not be ignored
ok chrome@112 (windows 10) -> set trigger -> trigger in attrs should match
ok chrome@112 (windows 10) -> set trigger -> customName in attrs should match
ok chrome@112 (windows 10) -> set trigger -> node should have children
ok chrome@112 (windows 10) -> set trigger -> type should match
ok chrome@112 (windows 10) -> set trigger -> node should have expected number of children
ok chrome@112 (windows 10) -> set trigger -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> set trigger -> interaction node has end time >= start
ok chrome@112 (windows 10) -> set trigger -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> set trigger -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> set trigger -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> set trigger -> name in attrs should match
ok chrome@112 (windows 10) -> set trigger -> node should have children
ok chrome@112 (windows 10) -> set trigger -> type should match
ok chrome@112 (windows 10) -> set trigger -> node should have expected number of children
ok chrome@112 (windows 10) -> set trigger -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> set trigger -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> set trigger -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> set trigger -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> set trigger -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> set trigger -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> set trigger -> should have correct end Time
# chrome@112 (windows 10) -> createTracer no name
ok chrome@112 (windows 10) -> createTracer no name -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> createTracer no name -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> createTracer no name -> interaction should not be ignored
ok chrome@112 (windows 10) -> createTracer no name -> custom in attrs should match
ok chrome@112 (windows 10) -> createTracer no name -> node should have children
ok chrome@112 (windows 10) -> createTracer no name -> type should match
ok chrome@112 (windows 10) -> createTracer no name -> node should have expected number of children
ok chrome@112 (windows 10) -> createTracer no name -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> createTracer no name -> interaction node has end time >= start
ok chrome@112 (windows 10) -> createTracer no name -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> createTracer no name -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> createTracer no name -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> createTracer no name -> name in attrs should match
ok chrome@112 (windows 10) -> createTracer no name -> node should have children
ok chrome@112 (windows 10) -> createTracer no name -> type should match
ok chrome@112 (windows 10) -> createTracer no name -> node should have expected number of children
ok chrome@112 (windows 10) -> createTracer no name -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> createTracer no name -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> createTracer no name -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> createTracer no name -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> createTracer no name -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> createTracer no name -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> createTracer no name -> should have correct end Time
# chrome@112 (windows 10) -> createTracer no name, no callback
ok chrome@112 (windows 10) -> createTracer no name, no callback -> should be truthy
ok chrome@112 (windows 10) -> createTracer no name, no callback -> should not include duration of no name, no callback tracer
ok chrome@112 (windows 10) -> createTracer no name, no callback -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> createTracer no name, no callback -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> createTracer no name, no callback -> interaction should not be ignored
ok chrome@112 (windows 10) -> createTracer no name, no callback -> node should have children
ok chrome@112 (windows 10) -> createTracer no name, no callback -> type should match
ok chrome@112 (windows 10) -> createTracer no name, no callback -> node should have expected number of children
ok chrome@112 (windows 10) -> createTracer no name, no callback -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> createTracer no name, no callback -> interaction node has end time >= start
ok chrome@112 (windows 10) -> createTracer no name, no callback -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> createTracer no name, no callback -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> createTracer no name, no callback -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> createTracer no name, no callback -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> createTracer no name, no callback -> should have correct end Time
# chrome@112 (windows 10) -> reuse handle from outside interaction
ok chrome@112 (windows 10) -> reuse handle from outside interaction -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> reuse handle from outside interaction -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> reuse handle from outside interaction -> interaction should not be ignored
ok chrome@112 (windows 10) -> reuse handle from outside interaction -> custom in attrs should match
ok chrome@112 (windows 10) -> reuse handle from outside interaction -> node should have children
ok chrome@112 (windows 10) -> reuse handle from outside interaction -> type should match
ok chrome@112 (windows 10) -> reuse handle from outside interaction -> node should have expected number of children
ok chrome@112 (windows 10) -> reuse handle from outside interaction -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> reuse handle from outside interaction -> interaction node has end time >= start
ok chrome@112 (windows 10) -> reuse handle from outside interaction -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> reuse handle from outside interaction -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> reuse handle from outside interaction -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> reuse handle from outside interaction -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> reuse handle from outside interaction -> should have correct end Time
# chrome@112 (windows 10) -> tests 497
# chrome@112 (windows 10) -> pass  497
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> checkFinish
# chrome@112 (windows 10) -> checkFinish sets timers
ok chrome@112 (windows 10) -> checkFinish sets timers -> setTimeout has been called twice
# chrome@112 (windows 10) -> checkFinish does not set timers when there is work in progress
ok chrome@112 (windows 10) -> checkFinish does not set timers when there is work in progress -> should be equal
# chrome@112 (windows 10) -> assigns url and routename to attributes
ok chrome@112 (windows 10) -> assigns url and routename to attributes -> url is undefined initially
ok chrome@112 (windows 10) -> assigns url and routename to attributes -> route name is undefined initially
ok chrome@112 (windows 10) -> assigns url and routename to attributes -> url has been set
ok chrome@112 (windows 10) -> assigns url and routename to attributes -> route name has been set
# chrome@112 (windows 10) -> does not reset finishTimer if it has already been set
ok chrome@112 (windows 10) -> does not reset finishTimer if it has already been set -> setTimeout has been called once
ok chrome@112 (windows 10) -> does not reset finishTimer if it has already been set -> setTimeout has not been called again
# chrome@112 (windows 10) -> if timer is in progress and there is work remaining, timer should be cancelled
ok chrome@112 (windows 10) -> if timer is in progress and there is work remaining, timer should be cancelled -> clearTimeout has been called once
# chrome@112 (windows 10) -> tests 9
# chrome@112 (windows 10) -> pass  9
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> spa single fetch with formData
# chrome@112 (windows 10) -> Request.formData errored, skipping test. The error was: TypeError: Failed to fetch
ok chrome@112 (windows 10) -> Request.formData errored, skipping test. The error was: TypeError: Failed to fetch -> since there must be at least one assertion
# chrome@112 (windows 10) -> tests 1
# chrome@112 (windows 10) -> pass  1
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> initial page load timing
ok chrome@112 (windows 10) -> initial page load timing -> interaction should be null at first
ok chrome@112 (windows 10) -> initial page load timing -> event should be initial page load
ok chrome@112 (windows 10) -> initial page load timing -> interaction should have an end time
ok chrome@112 (windows 10) -> initial page load timing -> interaction should have assigned uid
ok chrome@112 (windows 10) -> initial page load timing -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> initial page load timing -> custom in attrs should match
ok chrome@112 (windows 10) -> initial page load timing -> node should have children
ok chrome@112 (windows 10) -> initial page load timing -> type should match
ok chrome@112 (windows 10) -> initial page load timing -> node should have expected number of children
ok chrome@112 (windows 10) -> initial page load timing -> interaction node has a zero start time for initial page loads
ok chrome@112 (windows 10) -> initial page load timing -> interaction node has end time >= start
ok chrome@112 (windows 10) -> initial page load timing -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> initial page load timing -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> initial page load timing -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> initial page load timing -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> initial page load timing -> should have correct end Time
# chrome@112 (windows 10) -> tests 16
# chrome@112 (windows 10) -> pass  16
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> node is not restored for ended interaction
ok chrome@112 (windows 10) -> node is not restored for ended interaction -> interaction should be null at first
ok chrome@112 (windows 10) -> node is not restored for ended interaction -> should be inside an interaction at the beginning
ok chrome@112 (windows 10) -> node is not restored for ended interaction -> should be inside an interaction in timeout 1
ok chrome@112 (windows 10) -> node is not restored for ended interaction -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> node is not restored for ended interaction -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> node is not restored for ended interaction -> should not be inside an interaction in timeout 2
# chrome@112 (windows 10) -> tests 6
# chrome@112 (windows 10) -> pass  6
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> spa cancelled timer
ok chrome@112 (windows 10) -> spa cancelled timer -> interaction should be null at first
ok chrome@112 (windows 10) -> spa cancelled timer -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa cancelled timer -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa cancelled timer -> node should have children
ok chrome@112 (windows 10) -> spa cancelled timer -> type should match
ok chrome@112 (windows 10) -> spa cancelled timer -> node should have expected number of children
ok chrome@112 (windows 10) -> spa cancelled timer -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa cancelled timer -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa cancelled timer -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa cancelled timer -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa cancelled timer -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa cancelled timer -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa cancelled timer -> should have correct end Time
# chrome@112 (windows 10) -> tests 13
# chrome@112 (windows 10) -> pass  13
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> basic MutationObserver instrumentation
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> interaction should be finished
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> trigger in attrs should match
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> node should have children
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> type should match
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> node should have expected number of children
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> interaction node has end time >= start
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> name in attrs should match
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> node should have children
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> type should match
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> node should have expected number of children
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> name in attrs should match
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> node should have children
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> type should match
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> node should have expected number of children
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> basic MutationObserver instrumentation -> should have correct end Time
# chrome@112 (windows 10) -> tests 31
# chrome@112 (windows 10) -> pass  31
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> spa multiple event handlers
ok chrome@112 (windows 10) -> spa multiple event handlers -> interaction should be null at first
ok chrome@112 (windows 10) -> spa multiple event handlers -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa multiple event handlers -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa multiple event handlers -> node should have children
ok chrome@112 (windows 10) -> spa multiple event handlers -> type should match
ok chrome@112 (windows 10) -> spa multiple event handlers -> node should have expected number of children
ok chrome@112 (windows 10) -> spa multiple event handlers -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa multiple event handlers -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa multiple event handlers -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa multiple event handlers -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa multiple event handlers -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa multiple event handlers -> name in attrs should match
ok chrome@112 (windows 10) -> spa multiple event handlers -> node should have children
ok chrome@112 (windows 10) -> spa multiple event handlers -> type should match
ok chrome@112 (windows 10) -> spa multiple event handlers -> node should have expected number of children
ok chrome@112 (windows 10) -> spa multiple event handlers -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa multiple event handlers -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa multiple event handlers -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa multiple event handlers -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa multiple event handlers -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa multiple event handlers -> name in attrs should match
ok chrome@112 (windows 10) -> spa multiple event handlers -> node should have children
ok chrome@112 (windows 10) -> spa multiple event handlers -> type should match
ok chrome@112 (windows 10) -> spa multiple event handlers -> node should have expected number of children
ok chrome@112 (windows 10) -> spa multiple event handlers -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa multiple event handlers -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa multiple event handlers -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa multiple event handlers -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa multiple event handlers -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa multiple event handlers -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa multiple event handlers -> should have correct end Time
# chrome@112 (windows 10) -> tests 31
# chrome@112 (windows 10) -> pass  31
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> load event during interaction
ok chrome@112 (windows 10) -> load event during interaction -> interaction should be null at first
ok chrome@112 (windows 10) -> load event during interaction -> interaction should have an end time
ok chrome@112 (windows 10) -> load event during interaction -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> load event during interaction -> node should have children
ok chrome@112 (windows 10) -> load event during interaction -> type should match
ok chrome@112 (windows 10) -> load event during interaction -> node should have expected number of children
ok chrome@112 (windows 10) -> load event during interaction -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> load event during interaction -> interaction node has end time >= start
ok chrome@112 (windows 10) -> load event during interaction -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> load event during interaction -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> load event during interaction -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> load event during interaction -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> load event during interaction -> should have correct end Time
# chrome@112 (windows 10) -> tests 13
# chrome@112 (windows 10) -> pass  13
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> MutationObserver instanceof check
ok chrome@112 (windows 10) -> MutationObserver instanceof check -> observer should be an instanceof MutationObserver
ok chrome@112 (windows 10) -> MutationObserver instanceof check -> observer should be an instanceof original MutationObserver
# chrome@112 (windows 10) -> MutationObserver double-instrumentation
ok chrome@112 (windows 10) -> MutationObserver double-instrumentation -> successfully created new double-wrapped MutationObserver instance
# chrome@112 (windows 10) -> MutationObserver functionality check
ok chrome@112 (windows 10) -> MutationObserver functionality check -> expected callback to have been invoked exactly once
ok chrome@112 (windows 10) -> MutationObserver functionality check -> expected callback to not be invoked after disconnect
# chrome@112 (windows 10) -> tests 5
# chrome@112 (windows 10) -> pass  5
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> spa cancelled timer in callback
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> interaction should be null at first
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> node should have children
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> type should match
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> node should have expected number of children
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> node should have children
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> type should match
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> node should have expected number of children
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> ajax node has end time >= start
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> should have correct end Time
# chrome@112 (windows 10) -> tests 21
# chrome@112 (windows 10) -> pass  21
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> spa nested timers
ok chrome@112 (windows 10) -> spa nested timers -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa nested timers -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa nested timers -> custom in attrs should match
ok chrome@112 (windows 10) -> spa nested timers -> node should have children
ok chrome@112 (windows 10) -> spa nested timers -> type should match
ok chrome@112 (windows 10) -> spa nested timers -> node should have expected number of children
ok chrome@112 (windows 10) -> spa nested timers -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa nested timers -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa nested timers -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa nested timers -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa nested timers -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa nested timers -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa nested timers -> should have correct end Time
# chrome@112 (windows 10) -> tests 13
# chrome@112 (windows 10) -> pass  13
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> fn-start events for MutationObserver callbacks should have args
ok chrome@112 (windows 10) -> fn-start events for MutationObserver callbacks should have args -> fn-start event gets MutationObserver callback args
ok chrome@112 (windows 10) -> fn-start events for MutationObserver callbacks should have args -> callback gets one mutation record
ok chrome@112 (windows 10) -> fn-start events for MutationObserver callbacks should have args -> observer received in callback matches original observer
# chrome@112 (windows 10) -> tests 3
# chrome@112 (windows 10) -> pass  3
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> fetch.reject
ok chrome@112 (windows 10) -> fetch.reject -> interaction should be null at first
ok chrome@112 (windows 10) -> fetch.reject -> should get error
ok chrome@112 (windows 10) -> fetch.reject -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> fetch.reject -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> fetch.reject -> node should have children
ok chrome@112 (windows 10) -> fetch.reject -> type should match
ok chrome@112 (windows 10) -> fetch.reject -> node should have expected number of children
ok chrome@112 (windows 10) -> fetch.reject -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> fetch.reject -> interaction node has end time >= start
ok chrome@112 (windows 10) -> fetch.reject -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> fetch.reject -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> fetch.reject -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> fetch.reject -> name in attrs should match
ok chrome@112 (windows 10) -> fetch.reject -> node should have children
ok chrome@112 (windows 10) -> fetch.reject -> type should match
ok chrome@112 (windows 10) -> fetch.reject -> node should have expected number of children
ok chrome@112 (windows 10) -> fetch.reject -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> fetch.reject -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> fetch.reject -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> fetch.reject -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> fetch.reject -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> fetch.reject -> name in attrs should match
ok chrome@112 (windows 10) -> fetch.reject -> node should have children
ok chrome@112 (windows 10) -> fetch.reject -> type should match
ok chrome@112 (windows 10) -> fetch.reject -> node should have expected number of children
ok chrome@112 (windows 10) -> fetch.reject -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> fetch.reject -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> fetch.reject -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> fetch.reject -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> fetch.reject -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> fetch.reject -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> fetch.reject -> should have correct end Time
# chrome@112 (windows 10) -> fetch body.reject
ok chrome@112 (windows 10) -> fetch body.reject -> interaction should be null at first
ok chrome@112 (windows 10) -> fetch body.reject -> should get error
ok chrome@112 (windows 10) -> fetch body.reject -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> fetch body.reject -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> fetch body.reject -> node should have children
ok chrome@112 (windows 10) -> fetch body.reject -> type should match
ok chrome@112 (windows 10) -> fetch body.reject -> node should have expected number of children
ok chrome@112 (windows 10) -> fetch body.reject -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> fetch body.reject -> interaction node has end time >= start
ok chrome@112 (windows 10) -> fetch body.reject -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> fetch body.reject -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> fetch body.reject -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> fetch body.reject -> isFetch in attrs should match
ok chrome@112 (windows 10) -> fetch body.reject -> node should have children
ok chrome@112 (windows 10) -> fetch body.reject -> type should match
ok chrome@112 (windows 10) -> fetch body.reject -> node should have expected number of children
ok chrome@112 (windows 10) -> fetch body.reject -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> fetch body.reject -> ajax node has end time >= start
ok chrome@112 (windows 10) -> fetch body.reject -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> fetch body.reject -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> fetch body.reject -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> fetch body.reject -> name in attrs should match
ok chrome@112 (windows 10) -> fetch body.reject -> node should have children
ok chrome@112 (windows 10) -> fetch body.reject -> type should match
ok chrome@112 (windows 10) -> fetch body.reject -> node should have expected number of children
ok chrome@112 (windows 10) -> fetch body.reject -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> fetch body.reject -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> fetch body.reject -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> fetch body.reject -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> fetch body.reject -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> fetch body.reject -> name in attrs should match
ok chrome@112 (windows 10) -> fetch body.reject -> node should have children
ok chrome@112 (windows 10) -> fetch body.reject -> type should match
ok chrome@112 (windows 10) -> fetch body.reject -> node should have expected number of children
ok chrome@112 (windows 10) -> fetch body.reject -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> fetch body.reject -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> fetch body.reject -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> fetch body.reject -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> fetch body.reject -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> fetch body.reject -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> fetch body.reject -> should have correct end Time
# chrome@112 (windows 10) -> tests 73
# chrome@112 (windows 10) -> pass  73
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> callback timing
ok chrome@112 (windows 10) -> callback timing -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> callback timing -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> callback timing -> jsTime should be long enough
ok chrome@112 (windows 10) -> callback timing -> node should have children
ok chrome@112 (windows 10) -> callback timing -> type should match
ok chrome@112 (windows 10) -> callback timing -> node should have expected number of children
ok chrome@112 (windows 10) -> callback timing -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> callback timing -> interaction node has end time >= start
ok chrome@112 (windows 10) -> callback timing -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> callback timing -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> callback timing -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> callback timing -> jsTime should be long enough
ok chrome@112 (windows 10) -> callback timing -> name in attrs should match
ok chrome@112 (windows 10) -> callback timing -> node should have children
ok chrome@112 (windows 10) -> callback timing -> type should match
ok chrome@112 (windows 10) -> callback timing -> node should have expected number of children
ok chrome@112 (windows 10) -> callback timing -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> callback timing -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> callback timing -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> callback timing -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> callback timing -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> callback timing -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> callback timing -> should have correct end Time
# chrome@112 (windows 10) -> callback timing multiple callbacks
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> jsTime should be long enough
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> node should have children
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> type should match
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> node should have expected number of children
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> interaction node has end time >= start
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> jsTime should be long enough
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> node should have children
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> type should match
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> node should have expected number of children
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> ajax node has end time >= start
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> callback timing multiple callbacks -> should have correct end Time
# chrome@112 (windows 10) -> callback timing microtasks
ok chrome@112 (windows 10) -> callback timing microtasks -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> callback timing microtasks -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> callback timing microtasks -> jsTime should be long enough
ok chrome@112 (windows 10) -> callback timing microtasks -> node should have children
ok chrome@112 (windows 10) -> callback timing microtasks -> type should match
ok chrome@112 (windows 10) -> callback timing microtasks -> node should have expected number of children
ok chrome@112 (windows 10) -> callback timing microtasks -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> callback timing microtasks -> interaction node has end time >= start
ok chrome@112 (windows 10) -> callback timing microtasks -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> callback timing microtasks -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> callback timing microtasks -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> callback timing microtasks -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> callback timing microtasks -> should have correct end Time
# chrome@112 (windows 10) -> tests 58
# chrome@112 (windows 10) -> pass  58
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> spa cancelled timer in callback
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> interaction should be null at first
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> first timer fired
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> node should have children
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> type should match
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> node should have expected number of children
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> node should have children
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> type should match
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> node should have expected number of children
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> ajax node has end time >= start
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> node should have children
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> type should match
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> node should have expected number of children
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa cancelled timer in callback -> should have correct end Time
# chrome@112 (windows 10) -> tests 30
# chrome@112 (windows 10) -> pass  30
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> spa hashchange in second event callback
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> 2nd click handler
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> first click handler
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> in hashchange handler
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> old and new URLs should be different
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> trigger in attrs should match
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> initialPageURL in attrs should match
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> oldURL in attrs should match
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> newURL in attrs should match
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> node should have children
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> type should match
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> node should have expected number of children
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> name in attrs should match
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> node should have children
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> type should match
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> node should have expected number of children
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> name in attrs should match
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> node should have children
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> type should match
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> node should have expected number of children
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa hashchange in second event callback -> should have correct end Time
# chrome@112 (windows 10) -> tests 38
# chrome@112 (windows 10) -> pass  38
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> spa change trigger
ok chrome@112 (windows 10) -> spa change trigger -> interaction should be null at first
ok chrome@112 (windows 10) -> spa change trigger -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa change trigger -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa change trigger -> trigger in attrs should match
ok chrome@112 (windows 10) -> spa change trigger -> node should have children
ok chrome@112 (windows 10) -> spa change trigger -> type should match
ok chrome@112 (windows 10) -> spa change trigger -> node should have expected number of children
ok chrome@112 (windows 10) -> spa change trigger -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa change trigger -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa change trigger -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa change trigger -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa change trigger -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa change trigger -> node should have children
ok chrome@112 (windows 10) -> spa change trigger -> type should match
ok chrome@112 (windows 10) -> spa change trigger -> node should have expected number of children
ok chrome@112 (windows 10) -> spa change trigger -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> spa change trigger -> ajax node has end time >= start
ok chrome@112 (windows 10) -> spa change trigger -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> spa change trigger -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> spa change trigger -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa change trigger -> name in attrs should match
ok chrome@112 (windows 10) -> spa change trigger -> node should have children
ok chrome@112 (windows 10) -> spa change trigger -> type should match
ok chrome@112 (windows 10) -> spa change trigger -> node should have expected number of children
ok chrome@112 (windows 10) -> spa change trigger -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa change trigger -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa change trigger -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa change trigger -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa change trigger -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa change trigger -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa change trigger -> should have correct end Time
# chrome@112 (windows 10) -> tests 31
# chrome@112 (windows 10) -> pass  31
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/add-event-listener-options.browser.js
# chrome@112 (windows 10) -> browser/spa/promise-all.browser.js
# chrome@112 (windows 10) -> Promise.all
ok chrome@112 (windows 10) -> Promise.all -> promise should yield correct value
ok chrome@112 (windows 10) -> Promise.all -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> Promise.all -> interaction should be finished
ok chrome@112 (windows 10) -> Promise.all -> trigger in attrs should match
ok chrome@112 (windows 10) -> Promise.all -> node should have children
ok chrome@112 (windows 10) -> Promise.all -> type should match
ok chrome@112 (windows 10) -> Promise.all -> node should have expected number of children
ok chrome@112 (windows 10) -> Promise.all -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> Promise.all -> interaction node has end time >= start
ok chrome@112 (windows 10) -> Promise.all -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> Promise.all -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> Promise.all -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Promise.all -> name in attrs should match
ok chrome@112 (windows 10) -> Promise.all -> node should have children
ok chrome@112 (windows 10) -> Promise.all -> type should match
ok chrome@112 (windows 10) -> Promise.all -> node should have expected number of children
ok chrome@112 (windows 10) -> Promise.all -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Promise.all -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Promise.all -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Promise.all -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Promise.all -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Promise.all -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> Promise.all -> should have correct end Time
# chrome@112 (windows 10) -> Promise.all async resolve after rejected
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> should get reject value in fist catch
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> should get reject value in delayed catch
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> should have same node id as other catch
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> interaction should be finished
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> trigger in attrs should match
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> node should have children
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> type should match
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> node should have expected number of children
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> interaction node has end time >= start
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> name in attrs should match
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> node should have children
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> type should match
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> node should have expected number of children
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> name in attrs should match
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> node should have children
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> type should match
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> node should have expected number of children
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> name in attrs should match
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> node should have children
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> type should match
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> node should have expected number of children
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> Promise.all async resolve after rejected -> should have correct end Time
# chrome@112 (windows 10) -> tests 66
# chrome@112 (windows 10) -> pass  66
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> old url should be the url navigated from
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> new url should be the current url
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> node should have children
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> type should match
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> node should have expected number of children
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> name in attrs should match
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> node should have children
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> type should match
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> node should have expected number of children
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa interaction triggered by hashchange + popstate -> should have correct end Time
# chrome@112 (windows 10) -> tests 23
# chrome@112 (windows 10) -> pass  23
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> basic promise chain
ok chrome@112 (windows 10) -> basic promise chain -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> basic promise chain -> interaction should be finished
ok chrome@112 (windows 10) -> basic promise chain -> trigger in attrs should match
ok chrome@112 (windows 10) -> basic promise chain -> custom in attrs should match
ok chrome@112 (windows 10) -> basic promise chain -> node should have children
ok chrome@112 (windows 10) -> basic promise chain -> type should match
ok chrome@112 (windows 10) -> basic promise chain -> node should have expected number of children
ok chrome@112 (windows 10) -> basic promise chain -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> basic promise chain -> interaction node has end time >= start
ok chrome@112 (windows 10) -> basic promise chain -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> basic promise chain -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> basic promise chain -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> basic promise chain -> name in attrs should match
ok chrome@112 (windows 10) -> basic promise chain -> node should have children
ok chrome@112 (windows 10) -> basic promise chain -> type should match
ok chrome@112 (windows 10) -> basic promise chain -> node should have expected number of children
ok chrome@112 (windows 10) -> basic promise chain -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> basic promise chain -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> basic promise chain -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> basic promise chain -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> basic promise chain -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> basic promise chain -> name in attrs should match
ok chrome@112 (windows 10) -> basic promise chain -> node should have children
ok chrome@112 (windows 10) -> basic promise chain -> type should match
ok chrome@112 (windows 10) -> basic promise chain -> node should have expected number of children
ok chrome@112 (windows 10) -> basic promise chain -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> basic promise chain -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> basic promise chain -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> basic promise chain -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> basic promise chain -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> basic promise chain -> name in attrs should match
ok chrome@112 (windows 10) -> basic promise chain -> node should have children
ok chrome@112 (windows 10) -> basic promise chain -> type should match
ok chrome@112 (windows 10) -> basic promise chain -> node should have expected number of children
ok chrome@112 (windows 10) -> basic promise chain -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> basic promise chain -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> basic promise chain -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> basic promise chain -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> basic promise chain -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> basic promise chain -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> basic promise chain -> should have correct end Time
# chrome@112 (windows 10) -> instanceof
ok chrome@112 (windows 10) -> instanceof -> global (wrapped) Promise.resolve should return an instance of itself
ok chrome@112 (windows 10) -> instanceof -> the wrapped promise should be an instance of the original Promise
ok chrome@112 (windows 10) -> instanceof -> original Promise.resolve should return an instance of itself
# chrome@112 (windows 10) -> Promise throw in executor
ok chrome@112 (windows 10) -> Promise throw in executor -> promise should yield the error that was thrown in executor
ok chrome@112 (windows 10) -> Promise throw in executor -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> Promise throw in executor -> interaction should be finished
ok chrome@112 (windows 10) -> Promise throw in executor -> trigger in attrs should match
ok chrome@112 (windows 10) -> Promise throw in executor -> node should have children
ok chrome@112 (windows 10) -> Promise throw in executor -> type should match
ok chrome@112 (windows 10) -> Promise throw in executor -> node should have expected number of children
ok chrome@112 (windows 10) -> Promise throw in executor -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> Promise throw in executor -> interaction node has end time >= start
ok chrome@112 (windows 10) -> Promise throw in executor -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> Promise throw in executor -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> Promise throw in executor -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Promise throw in executor -> name in attrs should match
ok chrome@112 (windows 10) -> Promise throw in executor -> node should have children
ok chrome@112 (windows 10) -> Promise throw in executor -> type should match
ok chrome@112 (windows 10) -> Promise throw in executor -> node should have expected number of children
ok chrome@112 (windows 10) -> Promise throw in executor -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Promise throw in executor -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Promise throw in executor -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Promise throw in executor -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Promise throw in executor -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Promise throw in executor -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> Promise throw in executor -> should have correct end Time
# chrome@112 (windows 10) -> tests 67
# chrome@112 (windows 10) -> pass  67
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/aggregator.browser.js
# chrome@112 (windows 10) -> browser/spa/promise-race.browser.js
# chrome@112 (windows 10) -> Promise.race
ok chrome@112 (windows 10) -> Promise.race -> promise should yield correct value
ok chrome@112 (windows 10) -> Promise.race -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> Promise.race -> interaction should be finished
ok chrome@112 (windows 10) -> Promise.race -> trigger in attrs should match
ok chrome@112 (windows 10) -> Promise.race -> node should have children
ok chrome@112 (windows 10) -> Promise.race -> type should match
ok chrome@112 (windows 10) -> Promise.race -> node should have expected number of children
ok chrome@112 (windows 10) -> Promise.race -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> Promise.race -> interaction node has end time >= start
ok chrome@112 (windows 10) -> Promise.race -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> Promise.race -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> Promise.race -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Promise.race -> name in attrs should match
ok chrome@112 (windows 10) -> Promise.race -> node should have children
ok chrome@112 (windows 10) -> Promise.race -> type should match
ok chrome@112 (windows 10) -> Promise.race -> node should have expected number of children
ok chrome@112 (windows 10) -> Promise.race -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Promise.race -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Promise.race -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Promise.race -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Promise.race -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Promise.race -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> Promise.race -> should have correct end Time
# chrome@112 (windows 10) -> Promise.race async accept
ok chrome@112 (windows 10) -> Promise.race async accept -> should get accept value in delayed then
ok chrome@112 (windows 10) -> Promise.race async accept -> should have same node id as accept
ok chrome@112 (windows 10) -> Promise.race async accept -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> Promise.race async accept -> interaction should be finished
ok chrome@112 (windows 10) -> Promise.race async accept -> trigger in attrs should match
ok chrome@112 (windows 10) -> Promise.race async accept -> node should have children
ok chrome@112 (windows 10) -> Promise.race async accept -> type should match
ok chrome@112 (windows 10) -> Promise.race async accept -> node should have expected number of children
ok chrome@112 (windows 10) -> Promise.race async accept -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> Promise.race async accept -> interaction node has end time >= start
ok chrome@112 (windows 10) -> Promise.race async accept -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> Promise.race async accept -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> Promise.race async accept -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Promise.race async accept -> name in attrs should match
ok chrome@112 (windows 10) -> Promise.race async accept -> node should have children
ok chrome@112 (windows 10) -> Promise.race async accept -> type should match
ok chrome@112 (windows 10) -> Promise.race async accept -> node should have expected number of children
ok chrome@112 (windows 10) -> Promise.race async accept -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Promise.race async accept -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Promise.race async accept -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Promise.race async accept -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Promise.race async accept -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Promise.race async accept -> name in attrs should match
ok chrome@112 (windows 10) -> Promise.race async accept -> node should have children
ok chrome@112 (windows 10) -> Promise.race async accept -> type should match
ok chrome@112 (windows 10) -> Promise.race async accept -> node should have expected number of children
ok chrome@112 (windows 10) -> Promise.race async accept -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Promise.race async accept -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Promise.race async accept -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Promise.race async accept -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Promise.race async accept -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Promise.race async accept -> name in attrs should match
ok chrome@112 (windows 10) -> Promise.race async accept -> node should have children
ok chrome@112 (windows 10) -> Promise.race async accept -> type should match
ok chrome@112 (windows 10) -> Promise.race async accept -> node should have expected number of children
ok chrome@112 (windows 10) -> Promise.race async accept -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Promise.race async accept -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Promise.race async accept -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Promise.race async accept -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Promise.race async accept -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Promise.race async accept -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> Promise.race async accept -> should have correct end Time
# chrome@112 (windows 10) -> tests 65
# chrome@112 (windows 10) -> pass  65
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> promise.catch
ok chrome@112 (windows 10) -> promise.catch -> promise should yield correct value
ok chrome@112 (windows 10) -> promise.catch -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> promise.catch -> interaction should be finished
ok chrome@112 (windows 10) -> promise.catch -> trigger in attrs should match
ok chrome@112 (windows 10) -> promise.catch -> node should have children
ok chrome@112 (windows 10) -> promise.catch -> type should match
ok chrome@112 (windows 10) -> promise.catch -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.catch -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> promise.catch -> interaction node has end time >= start
ok chrome@112 (windows 10) -> promise.catch -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.catch -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.catch -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.catch -> name in attrs should match
ok chrome@112 (windows 10) -> promise.catch -> node should have children
ok chrome@112 (windows 10) -> promise.catch -> type should match
ok chrome@112 (windows 10) -> promise.catch -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.catch -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> promise.catch -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> promise.catch -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.catch -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.catch -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.catch -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> promise.catch -> should have correct end Time
# chrome@112 (windows 10) -> promise.catch chain with async
ok chrome@112 (windows 10) -> promise.catch chain with async -> should get reject value in first catch
ok chrome@112 (windows 10) -> promise.catch chain with async -> should get reject value in 2nd catch
ok chrome@112 (windows 10) -> promise.catch chain with async -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> promise.catch chain with async -> interaction should be finished
ok chrome@112 (windows 10) -> promise.catch chain with async -> trigger in attrs should match
ok chrome@112 (windows 10) -> promise.catch chain with async -> node should have children
ok chrome@112 (windows 10) -> promise.catch chain with async -> type should match
ok chrome@112 (windows 10) -> promise.catch chain with async -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.catch chain with async -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> promise.catch chain with async -> interaction node has end time >= start
ok chrome@112 (windows 10) -> promise.catch chain with async -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.catch chain with async -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.catch chain with async -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.catch chain with async -> name in attrs should match
ok chrome@112 (windows 10) -> promise.catch chain with async -> node should have children
ok chrome@112 (windows 10) -> promise.catch chain with async -> type should match
ok chrome@112 (windows 10) -> promise.catch chain with async -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.catch chain with async -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> promise.catch chain with async -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> promise.catch chain with async -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.catch chain with async -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.catch chain with async -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.catch chain with async -> name in attrs should match
ok chrome@112 (windows 10) -> promise.catch chain with async -> node should have children
ok chrome@112 (windows 10) -> promise.catch chain with async -> type should match
ok chrome@112 (windows 10) -> promise.catch chain with async -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.catch chain with async -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> promise.catch chain with async -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> promise.catch chain with async -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.catch chain with async -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.catch chain with async -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.catch chain with async -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> promise.catch chain with async -> should have correct end Time
# chrome@112 (windows 10) -> throw in promise.catch
ok chrome@112 (windows 10) -> throw in promise.catch -> should be resolved with thrown error
ok chrome@112 (windows 10) -> throw in promise.catch -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> throw in promise.catch -> interaction should be finished
ok chrome@112 (windows 10) -> throw in promise.catch -> trigger in attrs should match
ok chrome@112 (windows 10) -> throw in promise.catch -> node should have children
ok chrome@112 (windows 10) -> throw in promise.catch -> type should match
ok chrome@112 (windows 10) -> throw in promise.catch -> node should have expected number of children
ok chrome@112 (windows 10) -> throw in promise.catch -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> throw in promise.catch -> interaction node has end time >= start
ok chrome@112 (windows 10) -> throw in promise.catch -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> throw in promise.catch -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> throw in promise.catch -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> throw in promise.catch -> name in attrs should match
ok chrome@112 (windows 10) -> throw in promise.catch -> node should have children
ok chrome@112 (windows 10) -> throw in promise.catch -> type should match
ok chrome@112 (windows 10) -> throw in promise.catch -> node should have expected number of children
ok chrome@112 (windows 10) -> throw in promise.catch -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> throw in promise.catch -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> throw in promise.catch -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> throw in promise.catch -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> throw in promise.catch -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> throw in promise.catch -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> throw in promise.catch -> should have correct end Time
# chrome@112 (windows 10) -> tests 79
# chrome@112 (windows 10) -> pass  79
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> old and new URLs should be different
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> interaction should be finished
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> trigger in attrs should match
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> initialPageURL in attrs should match
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> oldURL in attrs should match
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> newURL in attrs should match
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> custom in attrs should match
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> node should have children
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> type should match
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> node should have expected number of children
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> node should have children
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> type should match
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> node should have expected number of children
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> ajax node has end time >= start
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa aggregator receives complete interaction when hashchange fires after finish -> should have correct end Time
# chrome@112 (windows 10) -> tests 25
# chrome@112 (windows 10) -> pass  25
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> spa nested XHR
ok chrome@112 (windows 10) -> spa nested XHR -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa nested XHR -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa nested XHR -> node should have children
ok chrome@112 (windows 10) -> spa nested XHR -> type should match
ok chrome@112 (windows 10) -> spa nested XHR -> node should have expected number of children
ok chrome@112 (windows 10) -> spa nested XHR -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa nested XHR -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa nested XHR -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa nested XHR -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa nested XHR -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa nested XHR -> node should have children
ok chrome@112 (windows 10) -> spa nested XHR -> type should match
ok chrome@112 (windows 10) -> spa nested XHR -> node should have expected number of children
ok chrome@112 (windows 10) -> spa nested XHR -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> spa nested XHR -> ajax node has end time >= start
ok chrome@112 (windows 10) -> spa nested XHR -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> spa nested XHR -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> spa nested XHR -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa nested XHR -> node should have children
ok chrome@112 (windows 10) -> spa nested XHR -> type should match
ok chrome@112 (windows 10) -> spa nested XHR -> node should have expected number of children
ok chrome@112 (windows 10) -> spa nested XHR -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> spa nested XHR -> ajax node has end time >= start
ok chrome@112 (windows 10) -> spa nested XHR -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> spa nested XHR -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> spa nested XHR -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa nested XHR -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa nested XHR -> should have correct end Time
# chrome@112 (windows 10) -> tests 28
# chrome@112 (windows 10) -> pass  28
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> spa parallel XHRs and timers
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> node should have children
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> type should match
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> node should have expected number of children
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> node should have children
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> type should match
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> node should have expected number of children
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> ajax node has end time >= start
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> node should have children
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> type should match
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> node should have expected number of children
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> ajax node has end time >= start
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> name in attrs should match
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> node should have children
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> type should match
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> node should have expected number of children
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> name in attrs should match
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> node should have children
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> type should match
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> node should have expected number of children
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa parallel XHRs and timers -> should have correct end Time
# chrome@112 (windows 10) -> tests 46
# chrome@112 (windows 10) -> pass  46
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/api.browser.js
# chrome@112 (windows 10) -> browser/spa/promise-reject.browser.js
# chrome@112 (windows 10) -> promise.reject
ok chrome@112 (windows 10) -> promise.reject -> promise should yield correct value
ok chrome@112 (windows 10) -> promise.reject -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> promise.reject -> interaction should be finished
ok chrome@112 (windows 10) -> promise.reject -> trigger in attrs should match
ok chrome@112 (windows 10) -> promise.reject -> node should have children
ok chrome@112 (windows 10) -> promise.reject -> type should match
ok chrome@112 (windows 10) -> promise.reject -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.reject -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> promise.reject -> interaction node has end time >= start
ok chrome@112 (windows 10) -> promise.reject -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.reject -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.reject -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.reject -> name in attrs should match
ok chrome@112 (windows 10) -> promise.reject -> node should have children
ok chrome@112 (windows 10) -> promise.reject -> type should match
ok chrome@112 (windows 10) -> promise.reject -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.reject -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> promise.reject -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> promise.reject -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.reject -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.reject -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.reject -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> promise.reject -> should have correct end Time
# chrome@112 (windows 10) -> tests 23
# chrome@112 (windows 10) -> pass  23
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/config.browser.js
# chrome@112 (windows 10) -> browser/spa/promise-resolve.browser.js
# chrome@112 (windows 10) -> Promise.resolve
ok chrome@112 (windows 10) -> Promise.resolve -> promise should yield correct value
ok chrome@112 (windows 10) -> Promise.resolve -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> Promise.resolve -> interaction should be finished
ok chrome@112 (windows 10) -> Promise.resolve -> trigger in attrs should match
ok chrome@112 (windows 10) -> Promise.resolve -> node should have children
ok chrome@112 (windows 10) -> Promise.resolve -> type should match
ok chrome@112 (windows 10) -> Promise.resolve -> node should have expected number of children
ok chrome@112 (windows 10) -> Promise.resolve -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> Promise.resolve -> interaction node has end time >= start
ok chrome@112 (windows 10) -> Promise.resolve -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> Promise.resolve -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> Promise.resolve -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Promise.resolve -> name in attrs should match
ok chrome@112 (windows 10) -> Promise.resolve -> node should have children
ok chrome@112 (windows 10) -> Promise.resolve -> type should match
ok chrome@112 (windows 10) -> Promise.resolve -> node should have expected number of children
ok chrome@112 (windows 10) -> Promise.resolve -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Promise.resolve -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Promise.resolve -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Promise.resolve -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Promise.resolve -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Promise.resolve -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> Promise.resolve -> should have correct end Time
# chrome@112 (windows 10) -> promise.resolve with Promise argument
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> promise should yield correct value
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> interaction should be finished
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> trigger in attrs should match
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> node should have children
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> type should match
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> interaction node has end time >= start
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> name in attrs should match
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> node should have children
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> type should match
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> name in attrs should match
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> node should have children
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> type should match
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> promise.resolve with Promise argument -> should have correct end Time
# chrome@112 (windows 10) -> tests 55
# chrome@112 (windows 10) -> pass  55
# chrome@112 (windows 10) -> ok
# chrome@112 (windows 10) -> spa keypress trigger
ok chrome@112 (windows 10) -> spa keypress trigger -> interaction should be null at first
ok chrome@112 (windows 10) -> spa keypress trigger -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa keypress trigger -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa keypress trigger -> trigger in attrs should match
ok chrome@112 (windows 10) -> spa keypress trigger -> node should have children
ok chrome@112 (windows 10) -> spa keypress trigger -> type should match
ok chrome@112 (windows 10) -> spa keypress trigger -> node should have expected number of children
ok chrome@112 (windows 10) -> spa keypress trigger -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa keypress trigger -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa keypress trigger -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa keypress trigger -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa keypress trigger -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa keypress trigger -> node should have children
ok chrome@112 (windows 10) -> spa keypress trigger -> type should match
ok chrome@112 (windows 10) -> spa keypress trigger -> node should have expected number of children
ok chrome@112 (windows 10) -> spa keypress trigger -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> spa keypress trigger -> ajax node has end time >= start
ok chrome@112 (windows 10) -> spa keypress trigger -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> spa keypress trigger -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> spa keypress trigger -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa keypress trigger -> name in attrs should match
ok chrome@112 (windows 10) -> spa keypress trigger -> node should have children
ok chrome@112 (windows 10) -> spa keypress trigger -> type should match
ok chrome@112 (windows 10) -> spa keypress trigger -> node should have expected number of children
ok chrome@112 (windows 10) -> spa keypress trigger -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa keypress trigger -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa keypress trigger -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa keypress trigger -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa keypress trigger -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa keypress trigger -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa keypress trigger -> should have correct end Time
# chrome@112 (windows 10) -> spa keyup trigger
ok chrome@112 (windows 10) -> spa keyup trigger -> interaction should be null at first
ok chrome@112 (windows 10) -> spa keyup trigger -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa keyup trigger -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa keyup trigger -> trigger in attrs should match
ok chrome@112 (windows 10) -> spa keyup trigger -> node should have children
ok chrome@112 (windows 10) -> spa keyup trigger -> type should match
ok chrome@112 (windows 10) -> spa keyup trigger -> node should have expected number of children
ok chrome@112 (windows 10) -> spa keyup trigger -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa keyup trigger -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa keyup trigger -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa keyup trigger -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa keyup trigger -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa keyup trigger -> node should have children
ok chrome@112 (windows 10) -> spa keyup trigger -> type should match
ok chrome@112 (windows 10) -> spa keyup trigger -> node should have expected number of children
ok chrome@112 (windows 10) -> spa keyup trigger -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> spa keyup trigger -> ajax node has end time >= start
ok chrome@112 (windows 10) -> spa keyup trigger -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> spa keyup trigger -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> spa keyup trigger -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa keyup trigger -> name in attrs should match
ok chrome@112 (windows 10) -> spa keyup trigger -> node should have children
ok chrome@112 (windows 10) -> spa keyup trigger -> type should match
ok chrome@112 (windows 10) -> spa keyup trigger -> node should have expected number of children
ok chrome@112 (windows 10) -> spa keyup trigger -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa keyup trigger -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa keyup trigger -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa keyup trigger -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa keyup trigger -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa keyup trigger -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa keyup trigger -> should have correct end Time
# chrome@112 (windows 10) -> spa keydown trigger
ok chrome@112 (windows 10) -> spa keydown trigger -> interaction should be null at first
ok chrome@112 (windows 10) -> spa keydown trigger -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa keydown trigger -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa keydown trigger -> trigger in attrs should match
ok chrome@112 (windows 10) -> spa keydown trigger -> node should have children
ok chrome@112 (windows 10) -> spa keydown trigger -> type should match
ok chrome@112 (windows 10) -> spa keydown trigger -> node should have expected number of children
ok chrome@112 (windows 10) -> spa keydown trigger -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa keydown trigger -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa keydown trigger -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa keydown trigger -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa keydown trigger -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa keydown trigger -> node should have children
ok chrome@112 (windows 10) -> spa keydown trigger -> type should match
ok chrome@112 (windows 10) -> spa keydown trigger -> node should have expected number of children
ok chrome@112 (windows 10) -> spa keydown trigger -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> spa keydown trigger -> ajax node has end time >= start
ok chrome@112 (windows 10) -> spa keydown trigger -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> spa keydown trigger -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> spa keydown trigger -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa keydown trigger -> name in attrs should match
ok chrome@112 (windows 10) -> spa keydown trigger -> node should have children
ok chrome@112 (windows 10) -> spa keydown trigger -> type should match
ok chrome@112 (windows 10) -> spa keydown trigger -> node should have expected number of children
ok chrome@112 (windows 10) -> spa keydown trigger -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa keydown trigger -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa keydown trigger -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa keydown trigger -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa keydown trigger -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa keydown trigger -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa keydown trigger -> should have correct end Time
# chrome@112 (windows 10) -> tests 93
# chrome@112 (windows 10) -> pass  93
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/keypress.browser.js
# chrome@112 (windows 10) -> METRICS, ERRORS - Kills feature if entitlements flag is 0
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/features.browser.js
# chrome@112 (windows 10) -> browser/spa/promise-sync-chain.browser.js
# chrome@112 (windows 10) -> promise.then sync chains
ok chrome@112 (windows 10) -> promise.then sync chains -> should get correct value in then callback 1
ok chrome@112 (windows 10) -> promise.then sync chains -> id should be rootId
ok chrome@112 (windows 10) -> promise.then sync chains -> should get correct value in then callback 4
ok chrome@112 (windows 10) -> promise.then sync chains -> id should be rootId
ok chrome@112 (windows 10) -> promise.then sync chains -> should get correct value in then callback 2
ok chrome@112 (windows 10) -> promise.then sync chains -> id should be rootId
ok chrome@112 (windows 10) -> promise.then sync chains -> should get correct value in then callback 5
ok chrome@112 (windows 10) -> promise.then sync chains -> id should be rootId
ok chrome@112 (windows 10) -> promise.then sync chains -> should get correct value in then callback 3
ok chrome@112 (windows 10) -> promise.then sync chains -> id should be rootId
ok chrome@112 (windows 10) -> promise.then sync chains -> should get correct value in then callback 6
ok chrome@112 (windows 10) -> promise.then sync chains -> id should be rootId
ok chrome@112 (windows 10) -> promise.then sync chains -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> promise.then sync chains -> interaction should be finished
ok chrome@112 (windows 10) -> promise.then sync chains -> trigger in attrs should match
ok chrome@112 (windows 10) -> promise.then sync chains -> node should have children
ok chrome@112 (windows 10) -> promise.then sync chains -> type should match
ok chrome@112 (windows 10) -> promise.then sync chains -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.then sync chains -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> promise.then sync chains -> interaction node has end time >= start
ok chrome@112 (windows 10) -> promise.then sync chains -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.then sync chains -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.then sync chains -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.then sync chains -> name in attrs should match
ok chrome@112 (windows 10) -> promise.then sync chains -> node should have children
ok chrome@112 (windows 10) -> promise.then sync chains -> type should match
ok chrome@112 (windows 10) -> promise.then sync chains -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.then sync chains -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> promise.then sync chains -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> promise.then sync chains -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.then sync chains -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.then sync chains -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.then sync chains -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> promise.then sync chains -> should have correct end Time
# chrome@112 (windows 10) -> tests 34
# chrome@112 (windows 10) -> pass  34
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> METRICS, ERRORS - Kills feature if entitlements flag is 0 -> did not receive metrics or errors :)
# chrome@112 (windows 10) -> SPA - Kills feature if entitlements flag is 0
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/promise-sync-chain.browser.js
# chrome@112 (windows 10) -> PAGE ACTIONS - Kills feature if entitlements flag is 0
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/promise-resolve.browser.js
# chrome@112 (windows 10) -> setUserId adds correct (persisted) attribute to payloads
# chrome@112 (windows 10) -> setUserId adds correct (persisted) attribute to payloads (retry 1)
ok chrome@112 (windows 10) -> setUserId adds correct (persisted) attribute to payloads (retry 1) -> Invalid data type (non-string) does not set user id
ok chrome@112 (windows 10) -> setUserId adds correct (persisted) attribute to payloads (retry 1) -> Correct enduser.id custom attr on error
ok chrome@112 (windows 10) -> SPA - Kills feature if entitlements flag is 0 -> did not received spa data :)
# chrome@112 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (full)
ok chrome@112 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (full) -> exactly three errors
ok chrome@112 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (full) -> first error should have a custom parameter set with the expected value
ok chrome@112 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (full) -> second error should have a custom parameter set with the expected value
ok chrome@112 (windows 10) -> PAGE ACTIONS - Kills feature if entitlements flag is 0 -> did not received ins data :)
# chrome@112 (windows 10) -> set single custom attribute before page load with single JS error occurring before page load (full)
ok chrome@112 (windows 10) -> set single custom attribute before page load with single JS error occurring before page load (full) -> exactly one error
ok chrome@112 (windows 10) -> setUserId adds correct (persisted) attribute to payloads (retry 1) -> setUserId affects subsequent page loads in the same storage session
# chrome@112 (windows 10) -> set custom attribute before page load after loader before info (full)
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/err/zz-error.browser.js
# chrome@112 (windows 10) -> browser/spa/route-change-detection.browser.js
# chrome@112 (windows 10) -> setCurrentRouteName
ok chrome@112 (windows 10) -> setCurrentRouteName -> should be falsy
ok chrome@112 (windows 10) -> setCurrentRouteName -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> setCurrentRouteName -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> setCurrentRouteName -> oldRoute in attrs should match
ok chrome@112 (windows 10) -> setCurrentRouteName -> newRoute in attrs should match
ok chrome@112 (windows 10) -> setCurrentRouteName -> node should have children
ok chrome@112 (windows 10) -> setCurrentRouteName -> type should match
ok chrome@112 (windows 10) -> setCurrentRouteName -> node should have expected number of children
ok chrome@112 (windows 10) -> setCurrentRouteName -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> setCurrentRouteName -> interaction node has end time >= start
ok chrome@112 (windows 10) -> setCurrentRouteName -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> setCurrentRouteName -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> setCurrentRouteName -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> setCurrentRouteName -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> setCurrentRouteName -> should have correct end Time
# chrome@112 (windows 10) -> interaction is not a route change if it does not change the url while route name is null
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change the url while route name is null -> should be falsy
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change the url while route name is null -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change the url while route name is null -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change the url while route name is null -> node should have children
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change the url while route name is null -> type should match
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change the url while route name is null -> node should have expected number of children
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change the url while route name is null -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change the url while route name is null -> interaction node has end time >= start
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change the url while route name is null -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change the url while route name is null -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change the url while route name is null -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change the url while route name is null -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change the url while route name is null -> should have correct end Time
# chrome@112 (windows 10) -> interaction is not a route change if it does not change url or route
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change url or route -> should be falsy
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change url or route -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change url or route -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change url or route -> node should have children
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change url or route -> type should match
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change url or route -> node should have expected number of children
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change url or route -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change url or route -> interaction node has end time >= start
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change url or route -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change url or route -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change url or route -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change url or route -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> interaction is not a route change if it does not change url or route -> should have correct end Time
# chrome@112 (windows 10) -> url change is a route change when route name is set
ok chrome@112 (windows 10) -> url change is a route change when route name is set -> should be truthy
ok chrome@112 (windows 10) -> url change is a route change when route name is set -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> url change is a route change when route name is set -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> url change is a route change when route name is set -> node should have children
ok chrome@112 (windows 10) -> url change is a route change when route name is set -> type should match
ok chrome@112 (windows 10) -> url change is a route change when route name is set -> node should have expected number of children
ok chrome@112 (windows 10) -> url change is a route change when route name is set -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> url change is a route change when route name is set -> interaction node has end time >= start
ok chrome@112 (windows 10) -> url change is a route change when route name is set -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> url change is a route change when route name is set -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> url change is a route change when route name is set -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> url change is a route change when route name is set -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> url change is a route change when route name is set -> should have correct end Time
# chrome@112 (windows 10) -> replaceState is a route change when route name is set
ok chrome@112 (windows 10) -> replaceState is a route change when route name is set -> should be truthy
ok chrome@112 (windows 10) -> replaceState is a route change when route name is set -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> replaceState is a route change when route name is set -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> replaceState is a route change when route name is set -> node should have children
ok chrome@112 (windows 10) -> replaceState is a route change when route name is set -> type should match
ok chrome@112 (windows 10) -> replaceState is a route change when route name is set -> node should have expected number of children
ok chrome@112 (windows 10) -> replaceState is a route change when route name is set -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> replaceState is a route change when route name is set -> interaction node has end time >= start
ok chrome@112 (windows 10) -> replaceState is a route change when route name is set -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> replaceState is a route change when route name is set -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> replaceState is a route change when route name is set -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> replaceState is a route change when route name is set -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> replaceState is a route change when route name is set -> should have correct end Time
# chrome@112 (windows 10) -> setting route to null does not count as a route change
ok chrome@112 (windows 10) -> setting route to null does not count as a route change -> should be falsy
ok chrome@112 (windows 10) -> setting route to null does not count as a route change -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> setting route to null does not count as a route change -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> setting route to null does not count as a route change -> node should have children
ok chrome@112 (windows 10) -> setting route to null does not count as a route change -> type should match
ok chrome@112 (windows 10) -> setting route to null does not count as a route change -> node should have expected number of children
ok chrome@112 (windows 10) -> setting route to null does not count as a route change -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> setting route to null does not count as a route change -> interaction node has end time >= start
ok chrome@112 (windows 10) -> setting route to null does not count as a route change -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> setting route to null does not count as a route change -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> setting route to null does not count as a route change -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> setting route to null does not count as a route change -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> setting route to null does not count as a route change -> should have correct end Time
# chrome@112 (windows 10) -> changing the url when route name is null counts as a route change
ok chrome@112 (windows 10) -> changing the url when route name is null counts as a route change -> should be truthy
ok chrome@112 (windows 10) -> changing the url when route name is null counts as a route change -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> changing the url when route name is null counts as a route change -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> changing the url when route name is null counts as a route change -> node should have children
ok chrome@112 (windows 10) -> changing the url when route name is null counts as a route change -> type should match
ok chrome@112 (windows 10) -> changing the url when route name is null counts as a route change -> node should have expected number of children
ok chrome@112 (windows 10) -> changing the url when route name is null counts as a route change -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> changing the url when route name is null counts as a route change -> interaction node has end time >= start
ok chrome@112 (windows 10) -> changing the url when route name is null counts as a route change -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> changing the url when route name is null counts as a route change -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> changing the url when route name is null counts as a route change -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> changing the url when route name is null counts as a route change -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> changing the url when route name is null counts as a route change -> should have correct end Time
# chrome@112 (windows 10) -> resetting the route to the same routename does not count as a route change
ok chrome@112 (windows 10) -> resetting the route to the same routename does not count as a route change -> should be falsy
ok chrome@112 (windows 10) -> resetting the route to the same routename does not count as a route change -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> resetting the route to the same routename does not count as a route change -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> resetting the route to the same routename does not count as a route change -> node should have children
ok chrome@112 (windows 10) -> resetting the route to the same routename does not count as a route change -> type should match
ok chrome@112 (windows 10) -> resetting the route to the same routename does not count as a route change -> node should have expected number of children
ok chrome@112 (windows 10) -> resetting the route to the same routename does not count as a route change -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> resetting the route to the same routename does not count as a route change -> interaction node has end time >= start
ok chrome@112 (windows 10) -> resetting the route to the same routename does not count as a route change -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> resetting the route to the same routename does not count as a route change -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> resetting the route to the same routename does not count as a route change -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> resetting the route to the same routename does not count as a route change -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> resetting the route to the same routename does not count as a route change -> should have correct end Time
# chrome@112 (windows 10) -> changeing route, and changing back to original is not a route change
ok chrome@112 (windows 10) -> changeing route, and changing back to original is not a route change -> should be falsy
ok chrome@112 (windows 10) -> changeing route, and changing back to original is not a route change -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> changeing route, and changing back to original is not a route change -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> changeing route, and changing back to original is not a route change -> node should have children
ok chrome@112 (windows 10) -> changeing route, and changing back to original is not a route change -> type should match
ok chrome@112 (windows 10) -> changeing route, and changing back to original is not a route change -> node should have expected number of children
ok chrome@112 (windows 10) -> changeing route, and changing back to original is not a route change -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> changeing route, and changing back to original is not a route change -> interaction node has end time >= start
ok chrome@112 (windows 10) -> changeing route, and changing back to original is not a route change -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> changeing route, and changing back to original is not a route change -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> changeing route, and changing back to original is not a route change -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> changeing route, and changing back to original is not a route change -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> changeing route, and changing back to original is not a route change -> should have correct end Time
# chrome@112 (windows 10) -> changeing url, and changing back to original is a route change
ok chrome@112 (windows 10) -> changeing url, and changing back to original is a route change -> should be truthy
ok chrome@112 (windows 10) -> changeing url, and changing back to original is a route change -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> changeing url, and changing back to original is a route change -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> changeing url, and changing back to original is a route change -> node should have children
ok chrome@112 (windows 10) -> changeing url, and changing back to original is a route change -> type should match
ok chrome@112 (windows 10) -> changeing url, and changing back to original is a route change -> node should have expected number of children
ok chrome@112 (windows 10) -> changeing url, and changing back to original is a route change -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> changeing url, and changing back to original is a route change -> interaction node has end time >= start
ok chrome@112 (windows 10) -> changeing url, and changing back to original is a route change -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> changeing url, and changing back to original is a route change -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> changeing url, and changing back to original is a route change -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> changeing url, and changing back to original is a route change -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> changeing url, and changing back to original is a route change -> should have correct end Time
# chrome@112 (windows 10) -> tests 132
# chrome@112 (windows 10) -> pass  132
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/metrics.browser.js
# chrome@112 (windows 10) -> browser/spa/promise-then.browser.js
# chrome@112 (windows 10) -> promise.then
ok chrome@112 (windows 10) -> promise.then -> promise should yield correct value
ok chrome@112 (windows 10) -> promise.then -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> promise.then -> interaction should be finished
ok chrome@112 (windows 10) -> promise.then -> trigger in attrs should match
ok chrome@112 (windows 10) -> promise.then -> node should have children
ok chrome@112 (windows 10) -> promise.then -> type should match
ok chrome@112 (windows 10) -> promise.then -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.then -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> promise.then -> interaction node has end time >= start
ok chrome@112 (windows 10) -> promise.then -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.then -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.then -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.then -> name in attrs should match
ok chrome@112 (windows 10) -> promise.then -> node should have children
ok chrome@112 (windows 10) -> promise.then -> type should match
ok chrome@112 (windows 10) -> promise.then -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.then -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> promise.then -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> promise.then -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.then -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.then -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.then -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> promise.then -> should have correct end Time
# chrome@112 (windows 10) -> promise.then chain with async
ok chrome@112 (windows 10) -> promise.then chain with async -> should get resolve value in 1st then
ok chrome@112 (windows 10) -> promise.then chain with async -> should get resolve value in 2nd then
ok chrome@112 (windows 10) -> promise.then chain with async -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> promise.then chain with async -> interaction should be finished
ok chrome@112 (windows 10) -> promise.then chain with async -> trigger in attrs should match
ok chrome@112 (windows 10) -> promise.then chain with async -> node should have children
ok chrome@112 (windows 10) -> promise.then chain with async -> type should match
ok chrome@112 (windows 10) -> promise.then chain with async -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.then chain with async -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> promise.then chain with async -> interaction node has end time >= start
ok chrome@112 (windows 10) -> promise.then chain with async -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.then chain with async -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.then chain with async -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.then chain with async -> name in attrs should match
ok chrome@112 (windows 10) -> promise.then chain with async -> node should have children
ok chrome@112 (windows 10) -> promise.then chain with async -> type should match
ok chrome@112 (windows 10) -> promise.then chain with async -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.then chain with async -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> promise.then chain with async -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> promise.then chain with async -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.then chain with async -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.then chain with async -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.then chain with async -> name in attrs should match
ok chrome@112 (windows 10) -> promise.then chain with async -> node should have children
ok chrome@112 (windows 10) -> promise.then chain with async -> type should match
ok chrome@112 (windows 10) -> promise.then chain with async -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.then chain with async -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> promise.then chain with async -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> promise.then chain with async -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.then chain with async -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.then chain with async -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.then chain with async -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> promise.then chain with async -> should have correct end Time
# chrome@112 (windows 10) -> promise.then chain with async with rejection
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> should get reject value in first catch
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> should get reject value in 2nd catch
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> interaction should be finished
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> trigger in attrs should match
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> node should have children
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> type should match
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> interaction node has end time >= start
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> name in attrs should match
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> node should have children
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> type should match
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> name in attrs should match
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> node should have children
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> type should match
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> node should have expected number of children
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> promise.then chain with async with rejection -> should have correct end Time
# chrome@112 (windows 10) -> throw in promise.then
ok chrome@112 (windows 10) -> throw in promise.then -> should be resolved with thrown error
ok chrome@112 (windows 10) -> throw in promise.then -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> throw in promise.then -> interaction should be finished
ok chrome@112 (windows 10) -> throw in promise.then -> trigger in attrs should match
ok chrome@112 (windows 10) -> throw in promise.then -> node should have children
ok chrome@112 (windows 10) -> throw in promise.then -> type should match
ok chrome@112 (windows 10) -> throw in promise.then -> node should have expected number of children
ok chrome@112 (windows 10) -> throw in promise.then -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> throw in promise.then -> interaction node has end time >= start
ok chrome@112 (windows 10) -> throw in promise.then -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> throw in promise.then -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> throw in promise.then -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> throw in promise.then -> name in attrs should match
ok chrome@112 (windows 10) -> throw in promise.then -> node should have children
ok chrome@112 (windows 10) -> throw in promise.then -> type should match
ok chrome@112 (windows 10) -> throw in promise.then -> node should have expected number of children
ok chrome@112 (windows 10) -> throw in promise.then -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> throw in promise.then -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> throw in promise.then -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> throw in promise.then -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> throw in promise.then -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> throw in promise.then -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> throw in promise.then -> should have correct end Time
# chrome@112 (windows 10) -> throw in promise.then
ok chrome@112 (windows 10) -> throw in promise.then -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> throw in promise.then -> interaction should be finished
ok chrome@112 (windows 10) -> throw in promise.then -> trigger in attrs should match
ok chrome@112 (windows 10) -> throw in promise.then -> node should have children
ok chrome@112 (windows 10) -> throw in promise.then -> type should match
ok chrome@112 (windows 10) -> throw in promise.then -> node should have expected number of children
ok chrome@112 (windows 10) -> throw in promise.then -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> throw in promise.then -> interaction node has end time >= start
ok chrome@112 (windows 10) -> throw in promise.then -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> throw in promise.then -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> throw in promise.then -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> throw in promise.then -> node should have children
ok chrome@112 (windows 10) -> throw in promise.then -> type should match
ok chrome@112 (windows 10) -> throw in promise.then -> node should have expected number of children
ok chrome@112 (windows 10) -> throw in promise.then -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> throw in promise.then -> ajax node has end time >= start
ok chrome@112 (windows 10) -> throw in promise.then -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> throw in promise.then -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> throw in promise.then -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> throw in promise.then -> name in attrs should match
ok chrome@112 (windows 10) -> throw in promise.then -> node should have children
ok chrome@112 (windows 10) -> throw in promise.then -> type should match
ok chrome@112 (windows 10) -> throw in promise.then -> node should have expected number of children
ok chrome@112 (windows 10) -> throw in promise.then -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> throw in promise.then -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> throw in promise.then -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> throw in promise.then -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> throw in promise.then -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> throw in promise.then -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> throw in promise.then -> should have correct end Time
# chrome@112 (windows 10) -> tests 142
# chrome@112 (windows 10) -> pass  142
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/event-listener-after-abort.browser.js
# chrome@112 (windows 10) -> browser/spa/same-callback-multiple-xhrs.browser.js
# chrome@112 (windows 10) -> multiple XHRs with the same callback function
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> should be able to find XHR 1 in list of launched XHRs, idx = 1
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> should be able to find XHR 0 in list of launched XHRs, idx = 0
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> node should have children
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> type should match
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> node should have expected number of children
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> interaction node has end time >= start
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> node should have children
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> type should match
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> node should have expected number of children
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> ajax node has end time >= start
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> should have correct end Time
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> node should have children
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> type should match
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> node should have expected number of children
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> interaction node has end time >= start
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> node should have children
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> type should match
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> node should have expected number of children
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> ajax node has end time >= start
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> should have correct end Time
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> xhr 0 interaction should be finished and have an end time
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> xhr 1 interaction should be finished and have an end time
ok chrome@112 (windows 10) -> multiple XHRs with the same callback function -> should have 2 different interactions
# chrome@112 (windows 10) -> tests 43
# chrome@112 (windows 10) -> pass  43
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (full) -> third error should have a custom parameter set with the expected value
# chrome@112 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info (full)
ok chrome@112 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info (full) -> first error should have a custom parameter set with the expected value
ok chrome@112 (windows 10) -> set single custom attribute before page load with single JS error occurring before page load (full) -> first error should have a custom parameter set with the expected value
# chrome@112 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info precedence check (full)
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/drain.browser.js
# chrome@112 (windows 10) -> browser/spa/serializer.browser.js
# chrome@112 (windows 10) -> spa interaction serializer default-first-timestamp
ok chrome@112 (windows 10) -> spa interaction serializer default-first-timestamp -> agent serializer should produce same output as reference encoder
# chrome@112 (windows 10) -> spa interaction serializer distributed-tracing
ok chrome@112 (windows 10) -> spa interaction serializer distributed-tracing -> agent serializer should produce same output as reference encoder
# chrome@112 (windows 10) -> spa interaction serializer nested-nodes
ok chrome@112 (windows 10) -> spa interaction serializer nested-nodes -> agent serializer should produce same output as reference encoder
# chrome@112 (windows 10) -> spa interaction serializer newlines
ok chrome@112 (windows 10) -> spa interaction serializer newlines -> agent serializer should produce same output as reference encoder
# chrome@112 (windows 10) -> spa interaction serializer node-with-child
ok chrome@112 (windows 10) -> spa interaction serializer node-with-child -> agent serializer should produce same output as reference encoder
# chrome@112 (windows 10) -> spa interaction serializer node-with-nesting
ok chrome@112 (windows 10) -> spa interaction serializer node-with-nesting -> agent serializer should produce same output as reference encoder
# chrome@112 (windows 10) -> spa interaction serializer null-relative-first
ok chrome@112 (windows 10) -> spa interaction serializer null-relative-first -> agent serializer should produce same output as reference encoder
# chrome@112 (windows 10) -> spa interaction serializer single-node
ok chrome@112 (windows 10) -> spa interaction serializer single-node -> agent serializer should produce same output as reference encoder
# chrome@112 (windows 10) -> spa interaction serializer string-escaping
ok chrome@112 (windows 10) -> spa interaction serializer string-escaping -> agent serializer should produce same output as reference encoder
# chrome@112 (windows 10) -> spa interaction serializer zero-duration-node
ok chrome@112 (windows 10) -> spa interaction serializer zero-duration-node -> agent serializer should produce same output as reference encoder
# chrome@112 (windows 10) -> spa interaction serializer attributes
ok chrome@112 (windows 10) -> spa interaction serializer attributes -> should have expected attributes
# chrome@112 (windows 10) -> spa interaction serializer attributes
ok chrome@112 (windows 10) -> spa interaction serializer attributes -> should only have 64 attributes
# chrome@112 (windows 10) -> spa interaction serializer with undefined string values
ok chrome@112 (windows 10) -> spa interaction serializer with undefined string values -> customName (which was undefined originally) should have default value
# chrome@112 (windows 10) -> serializing multiple interactions
ok chrome@112 (windows 10) -> serializing multiple interactions -> there are two root nodes
ok chrome@112 (windows 10) -> serializing multiple interactions -> should be equal
ok chrome@112 (windows 10) -> serializing multiple interactions -> first interaction has one child node
ok chrome@112 (windows 10) -> serializing multiple interactions -> should be equal
ok chrome@112 (windows 10) -> serializing multiple interactions -> second interaction has one child node
ok chrome@112 (windows 10) -> serializing multiple interactions -> should be truthy
# chrome@112 (windows 10) -> tests 19
# chrome@112 (windows 10) -> pass  19
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/harvest-scheduler.browser.js
# chrome@112 (windows 10) -> browser/spa/single-fetch.browser.js
# chrome@112 (windows 10) -> spa single fetch
ok chrome@112 (windows 10) -> spa single fetch -> interaction should be null at first
ok chrome@112 (windows 10) -> spa single fetch -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa single fetch -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa single fetch -> node should have children
ok chrome@112 (windows 10) -> spa single fetch -> type should match
ok chrome@112 (windows 10) -> spa single fetch -> node should have expected number of children
ok chrome@112 (windows 10) -> spa single fetch -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa single fetch -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa single fetch -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa single fetch -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa single fetch -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa single fetch -> node should have children
ok chrome@112 (windows 10) -> spa single fetch -> type should match
ok chrome@112 (windows 10) -> spa single fetch -> node should have expected number of children
ok chrome@112 (windows 10) -> spa single fetch -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> spa single fetch -> ajax node has end time >= start
ok chrome@112 (windows 10) -> spa single fetch -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> spa single fetch -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> spa single fetch -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa single fetch -> name in attrs should match
ok chrome@112 (windows 10) -> spa single fetch -> node should have children
ok chrome@112 (windows 10) -> spa single fetch -> type should match
ok chrome@112 (windows 10) -> spa single fetch -> node should have expected number of children
ok chrome@112 (windows 10) -> spa single fetch -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa single fetch -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa single fetch -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa single fetch -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa single fetch -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa single fetch -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa single fetch -> should have correct end Time
# chrome@112 (windows 10) -> tests 30
# chrome@112 (windows 10) -> pass  30
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/harvest.browser.js
# chrome@112 (windows 10) -> browser/spa/pushstate-popstate.browser.js
# chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> should be a route change
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> old url should be the url navigated from
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> new url should be the current url
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> node should have children
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> type should match
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> node should have expected number of children
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> name in attrs should match
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> node should have children
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> type should match
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> node should have expected number of children
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa interaction triggered by pushstate + popstate -> should have correct end Time
# chrome@112 (windows 10) -> tests 24
# chrome@112 (windows 10) -> pass  24
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/api.browser.js
# chrome@112 (windows 10) -> browser/spa/timer-between-cb-and-microtasks.browser.js
# chrome@112 (windows 10) -> timer between cb and microtasks
ok chrome@112 (windows 10) -> timer between cb and microtasks -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> timer between cb and microtasks -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> timer between cb and microtasks -> node should have children
ok chrome@112 (windows 10) -> timer between cb and microtasks -> type should match
ok chrome@112 (windows 10) -> timer between cb and microtasks -> node should have expected number of children
ok chrome@112 (windows 10) -> timer between cb and microtasks -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> timer between cb and microtasks -> interaction node has end time >= start
ok chrome@112 (windows 10) -> timer between cb and microtasks -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> timer between cb and microtasks -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> timer between cb and microtasks -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> timer between cb and microtasks -> name in attrs should match
ok chrome@112 (windows 10) -> timer between cb and microtasks -> node should have children
ok chrome@112 (windows 10) -> timer between cb and microtasks -> type should match
ok chrome@112 (windows 10) -> timer between cb and microtasks -> node should have expected number of children
ok chrome@112 (windows 10) -> timer between cb and microtasks -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> timer between cb and microtasks -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> timer between cb and microtasks -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> timer between cb and microtasks -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> timer between cb and microtasks -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> timer between cb and microtasks -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> timer between cb and microtasks -> should have correct end Time
# chrome@112 (windows 10) -> tests 21
# chrome@112 (windows 10) -> pass  21
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/ins/add-page-action.browser.js
# chrome@112 (windows 10) -> browser/spa/single-timer.browser.js
# chrome@112 (windows 10) -> spa single timer
ok chrome@112 (windows 10) -> spa single timer -> interaction should be null at first
ok chrome@112 (windows 10) -> spa single timer -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa single timer -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa single timer -> node should have children
ok chrome@112 (windows 10) -> spa single timer -> type should match
ok chrome@112 (windows 10) -> spa single timer -> node should have expected number of children
ok chrome@112 (windows 10) -> spa single timer -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa single timer -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa single timer -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa single timer -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa single timer -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa single timer -> name in attrs should match
ok chrome@112 (windows 10) -> spa single timer -> node should have children
ok chrome@112 (windows 10) -> spa single timer -> type should match
ok chrome@112 (windows 10) -> spa single timer -> node should have expected number of children
ok chrome@112 (windows 10) -> spa single timer -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa single timer -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa single timer -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa single timer -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa single timer -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa single timer -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa single timer -> should have correct end Time
# chrome@112 (windows 10) -> tests 22
# chrome@112 (windows 10) -> pass  22
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/fetch-body-propagation-ext.browser.js
# chrome@112 (windows 10) -> browser/spa/traced-callback.browser.js
# chrome@112 (windows 10) -> spa single timer
ok chrome@112 (windows 10) -> spa single timer -> interaction should be null at first
ok chrome@112 (windows 10) -> spa single timer -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa single timer -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa single timer -> node should have children
ok chrome@112 (windows 10) -> spa single timer -> type should match
ok chrome@112 (windows 10) -> spa single timer -> node should have expected number of children
ok chrome@112 (windows 10) -> spa single timer -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa single timer -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa single timer -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa single timer -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa single timer -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa single timer -> name in attrs should match
ok chrome@112 (windows 10) -> spa single timer -> node should have children
ok chrome@112 (windows 10) -> spa single timer -> type should match
ok chrome@112 (windows 10) -> spa single timer -> node should have expected number of children
ok chrome@112 (windows 10) -> spa single timer -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa single timer -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa single timer -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa single timer -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa single timer -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa single timer -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa single timer -> should have correct end Time
ok chrome@112 (windows 10) -> spa single timer -> should record traced time
# chrome@112 (windows 10) -> tests 23
# chrome@112 (windows 10) -> pass  23
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/obfuscate.browser.js
# chrome@112 (windows 10) -> browser/spa/single-xhr.browser.js
# chrome@112 (windows 10) -> spa single XHR
ok chrome@112 (windows 10) -> spa single XHR -> interaction should be null at first
ok chrome@112 (windows 10) -> spa single XHR -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa single XHR -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa single XHR -> node should have children
ok chrome@112 (windows 10) -> spa single XHR -> type should match
ok chrome@112 (windows 10) -> spa single XHR -> node should have expected number of children
ok chrome@112 (windows 10) -> spa single XHR -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa single XHR -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa single XHR -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa single XHR -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa single XHR -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa single XHR -> node should have children
ok chrome@112 (windows 10) -> spa single XHR -> type should match
ok chrome@112 (windows 10) -> spa single XHR -> node should have expected number of children
ok chrome@112 (windows 10) -> spa single XHR -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> spa single XHR -> ajax node has end time >= start
ok chrome@112 (windows 10) -> spa single XHR -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> spa single XHR -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> spa single XHR -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa single XHR -> name in attrs should match
ok chrome@112 (windows 10) -> spa single XHR -> node should have children
ok chrome@112 (windows 10) -> spa single XHR -> type should match
ok chrome@112 (windows 10) -> spa single XHR -> node should have expected number of children
ok chrome@112 (windows 10) -> spa single XHR -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa single XHR -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa single XHR -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa single XHR -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa single XHR -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa single XHR -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa single XHR -> should have correct end Time
# chrome@112 (windows 10) -> tests 30
# chrome@112 (windows 10) -> pass  30
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/mutation-observer-instrumentation.browser.js
# chrome@112 (windows 10) -> browser/stringify.browser.js
# chrome@112 (windows 10) -> fake stringify
ok chrome@112 (windows 10) -> fake stringify -> Array
ok chrome@112 (windows 10) -> fake stringify -> undefined
ok chrome@112 (windows 10) -> fake stringify -> null
ok chrome@112 (windows 10) -> fake stringify -> number
ok chrome@112 (windows 10) -> fake stringify -> obj
ok chrome@112 (windows 10) -> fake stringify -> obj w/ prototype
ok chrome@112 (windows 10) -> fake stringify -> function
ok chrome@112 (windows 10) -> fake stringify -> stringified object
ok chrome@112 (windows 10) -> fake stringify -> Stringifying a circular object returns empty object
# chrome@112 (windows 10) -> tests 9
# chrome@112 (windows 10) -> pass  9
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/cancelled-timer-in-callback.browser.js
# chrome@112 (windows 10) -> browser/wrappings/no-events-for-recursive-wrapped-calls.browser.js
# chrome@112 (windows 10) -> recursive calls to wrapped functions from start/end event callbacks should not trigger more events
ok chrome@112 (windows 10) -> recursive calls to wrapped functions from start/end event callbacks should not trigger more events -> foo should be called thrice
ok chrome@112 (windows 10) -> recursive calls to wrapped functions from start/end event callbacks should not trigger more events -> fn-start event emitted 1 times
ok chrome@112 (windows 10) -> recursive calls to wrapped functions from start/end event callbacks should not trigger more events -> fn-end event emitted 1 times
# chrome@112 (windows 10) -> calls to other wrapped functions from start/end event callbacks should not trigger more events
ok chrome@112 (windows 10) -> calls to other wrapped functions from start/end event callbacks should not trigger more events -> foo should be called once
ok chrome@112 (windows 10) -> calls to other wrapped functions from start/end event callbacks should not trigger more events -> bar should be called twice
ok chrome@112 (windows 10) -> calls to other wrapped functions from start/end event callbacks should not trigger more events -> fn-start event emitted 1 times
ok chrome@112 (windows 10) -> calls to other wrapped functions from start/end event callbacks should not trigger more events -> fn-end event emitted 1 times
# chrome@112 (windows 10) -> calls to other wrapped functions from start/end event callbacks with different prefix should not trigger more events
ok chrome@112 (windows 10) -> calls to other wrapped functions from start/end event callbacks with different prefix should not trigger more events -> foo should be called once
ok chrome@112 (windows 10) -> calls to other wrapped functions from start/end event callbacks with different prefix should not trigger more events -> bar should be called thrice
ok chrome@112 (windows 10) -> calls to other wrapped functions from start/end event callbacks with different prefix should not trigger more events -> foo-start event emitted 1 times
ok chrome@112 (windows 10) -> calls to other wrapped functions from start/end event callbacks with different prefix should not trigger more events -> foo-end event emitted 1 times
ok chrome@112 (windows 10) -> calls to other wrapped functions from start/end event callbacks with different prefix should not trigger more events -> bar-start event emitted 1 times
ok chrome@112 (windows 10) -> calls to other wrapped functions from start/end event callbacks with different prefix should not trigger more events -> bar-end event emitted 1 times
# chrome@112 (windows 10) -> always flag allows nested calls
ok chrome@112 (windows 10) -> always flag allows nested calls -> foo should be called twice
ok chrome@112 (windows 10) -> always flag allows nested calls -> bar should be called thrice
ok chrome@112 (windows 10) -> always flag allows nested calls -> foo-start event emitted 2 times
ok chrome@112 (windows 10) -> always flag allows nested calls -> bar-start event emitted 1 times
# chrome@112 (windows 10) -> tests 17
# chrome@112 (windows 10) -> pass  17
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/callback-timing.browser.js
# chrome@112 (windows 10) -> browser/wrappings/wrap-function.browser.js
# chrome@112 (windows 10) -> Wrap Function
ok chrome@112 (windows 10) -> Wrap Function -> Props coppied from original fn
ok chrome@112 (windows 10) -> Wrap Function -> Proxy accessors work
ok chrome@112 (windows 10) -> Wrap Function -> wrapped flag set
ok chrome@112 (windows 10) -> Wrap Function -> re-wrapping just returns same function
ok chrome@112 (windows 10) -> Wrap Function -> Wrapping non functions returns same value
ok chrome@112 (windows 10) -> Wrap Function -> Empty key not added
ok chrome@112 (windows 10) -> Wrap Function -> event args make sense
ok chrome@112 (windows 10) -> Wrap Function -> result of calling function reported
ok chrome@112 (windows 10) -> Wrap Function -> wrapped returns same argument
ok chrome@112 (windows 10) -> Wrap Function -> Methondname passed to event handler
ok chrome@112 (windows 10) -> Wrap Function -> obj wrapped returns modified argument
ok chrome@112 (windows 10) -> Wrap Function -> start and end fired at least as far apart as fn took
ok chrome@112 (windows 10) -> Wrap Function -> Wrapped has same "this"
ok chrome@112 (windows 10) -> Wrap Function -> Context reused among wrapped methods using sameCtx
ok chrome@112 (windows 10) -> Wrap Function -> obj wrapped has same "this"
ok chrome@112 (windows 10) -> Wrap Function -> got thrown error
ok chrome@112 (windows 10) -> Wrap Function -> Wrapped still throws
ok chrome@112 (windows 10) -> Wrap Function -> Ctx not reused for outer
ok chrome@112 (windows 10) -> Wrap Function -> Ctx not reused for inner
ok chrome@112 (windows 10) -> Wrap Function -> context not messed up for inner
ok chrome@112 (windows 10) -> Wrap Function -> context not messed up for outer
# chrome@112 (windows 10) -> tests 21
# chrome@112 (windows 10) -> pass  21
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/interaction.browser.js
# chrome@112 (windows 10) -> browser/spa/timer-cutoff.browser.js
# chrome@112 (windows 10) -> timer cutoff
ok chrome@112 (windows 10) -> timer cutoff -> interaction should be null at first
ok chrome@112 (windows 10) -> timer cutoff -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> timer cutoff -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> timer cutoff -> custom in attrs should match
ok chrome@112 (windows 10) -> timer cutoff -> node should have children
ok chrome@112 (windows 10) -> timer cutoff -> type should match
ok chrome@112 (windows 10) -> timer cutoff -> node should have expected number of children
ok chrome@112 (windows 10) -> timer cutoff -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> timer cutoff -> interaction node has end time >= start
ok chrome@112 (windows 10) -> timer cutoff -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> timer cutoff -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> timer cutoff -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> timer cutoff -> name in attrs should match
ok chrome@112 (windows 10) -> timer cutoff -> node should have children
ok chrome@112 (windows 10) -> timer cutoff -> type should match
ok chrome@112 (windows 10) -> timer cutoff -> node should have expected number of children
ok chrome@112 (windows 10) -> timer cutoff -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> timer cutoff -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> timer cutoff -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> timer cutoff -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> timer cutoff -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> timer cutoff -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> timer cutoff -> should have correct end Time
# chrome@112 (windows 10) -> string values for duration
ok chrome@112 (windows 10) -> string values for duration -> interaction should be null at first
ok chrome@112 (windows 10) -> string values for duration -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> string values for duration -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> string values for duration -> custom in attrs should match
ok chrome@112 (windows 10) -> string values for duration -> node should have children
ok chrome@112 (windows 10) -> string values for duration -> type should match
ok chrome@112 (windows 10) -> string values for duration -> node should have expected number of children
ok chrome@112 (windows 10) -> string values for duration -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> string values for duration -> interaction node has end time >= start
ok chrome@112 (windows 10) -> string values for duration -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> string values for duration -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> string values for duration -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> string values for duration -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> string values for duration -> should have correct end Time
# chrome@112 (windows 10) -> tests 37
# chrome@112 (windows 10) -> pass  37
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/promise-all.browser.js
# chrome@112 (windows 10) -> browser/xhr/ajax-events.browser.js
# chrome@112 (windows 10) -> storeXhr for a SPA ajax request buffers in spaAjaxEvents
ok chrome@112 (windows 10) -> storeXhr for a SPA ajax request buffers in spaAjaxEvents -> SPA ajax requests are buffered and associated in spaAjaxEvents by interaction id
ok chrome@112 (windows 10) -> storeXhr for a SPA ajax request buffers in spaAjaxEvents -> SPA ajax requests are not buffered in ajaxEvents
ok chrome@112 (windows 10) -> storeXhr for a SPA ajax request buffers in spaAjaxEvents -> expected SPA ajax event is buffered
# chrome@112 (windows 10) -> storeXhr for a non-SPA ajax request buffers in ajaxEvents
ok chrome@112 (windows 10) -> storeXhr for a non-SPA ajax request buffers in ajaxEvents -> non-SPA ajax requests are buffered in ajaxEvents
ok chrome@112 (windows 10) -> storeXhr for a non-SPA ajax request buffers in ajaxEvents -> non-SPA ajax requests are not buffered in spaAjaxEvents
ok chrome@112 (windows 10) -> storeXhr for a non-SPA ajax request buffers in ajaxEvents -> expected ajax event is buffered
# chrome@112 (windows 10) -> on interactionDiscarded, saved SPA events are buffered in ajaxEvents
ok chrome@112 (windows 10) -> on interactionDiscarded, saved SPA events are buffered in ajaxEvents -> ajax requests from discarded interaction no longer held buffer
ok chrome@112 (windows 10) -> on interactionDiscarded, saved SPA events are buffered in ajaxEvents -> ajax request buffered as non-SPA
# chrome@112 (windows 10) -> prepareHarvest correctly serializes an AjaxRequest events payload
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes an AjaxRequest events payload -> ajax event has expected number of custom attributes
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes an AjaxRequest events payload -> string & num custom attributes encoded
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes an AjaxRequest events payload -> string & num custom attributes encoded
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes an AjaxRequest events payload -> true custom attribute encoded
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes an AjaxRequest events payload -> undefined custom attributes encoded
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes an AjaxRequest events payload -> event attributes serialized correctly
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes an AjaxRequest events payload -> ajax event has expected number of custom attributes
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes an AjaxRequest events payload -> string & num custom attributes encoded
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes an AjaxRequest events payload -> string & num custom attributes encoded
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes an AjaxRequest events payload -> true custom attribute encoded
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes an AjaxRequest events payload -> undefined custom attributes encoded
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes an AjaxRequest events payload -> event attributes serialized correctly
# chrome@112 (windows 10) -> prepareHarvest correctly serializes a very large AjaxRequest events payload
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes a very large AjaxRequest events payload -> Large Payload of AJAX Events are broken into multiple chunks (5)
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes a very large AjaxRequest events payload -> All AJAX chunks are less than the maxPayloadSize property (500)
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes a very large AjaxRequest events payload -> Custom attributes are accounted for in chunked AJAX payload (0)
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes a very large AjaxRequest events payload -> Custom attributes are accounted for in chunked AJAX payload (0)
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes a very large AjaxRequest events payload -> Custom attributes are accounted for in chunked AJAX payload (1)
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes a very large AjaxRequest events payload -> Custom attributes are accounted for in chunked AJAX payload (1)
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes a very large AjaxRequest events payload -> Custom attributes are accounted for in chunked AJAX payload (2)
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes a very large AjaxRequest events payload -> Custom attributes are accounted for in chunked AJAX payload (2)
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes a very large AjaxRequest events payload -> Custom attributes are accounted for in chunked AJAX payload (3)
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes a very large AjaxRequest events payload -> Custom attributes are accounted for in chunked AJAX payload (3)
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes a very large AjaxRequest events payload -> Custom attributes are accounted for in chunked AJAX payload (4)
ok chrome@112 (windows 10) -> prepareHarvest correctly serializes a very large AjaxRequest events payload -> Custom attributes are accounted for in chunked AJAX payload (4)
# chrome@112 (windows 10) -> prepareHarvest correctly exits if maxPayload is too small
ok chrome@112 (windows 10) -> prepareHarvest correctly exits if maxPayload is too small -> Payload of AJAX Events that are each too small for limit will be dropped
# chrome@112 (windows 10) -> tests 33
# chrome@112 (windows 10) -> pass  33
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/multiple-event-handlers.browser.js
# chrome@112 (windows 10) -> browser/timings-fi-attributes.browser.js
# chrome@112 (windows 10) -> sends expected attributes when available
ok chrome@112 (windows 10) -> sends expected attributes when available -> there should be only 1 timing (firstInteraction)
ok chrome@112 (windows 10) -> sends expected attributes when available -> fi should be present
ok chrome@112 (windows 10) -> sends expected attributes when available -> interactionType should be present
ok chrome@112 (windows 10) -> sends expected attributes when available -> fid should be present
ok chrome@112 (windows 10) -> sends expected attributes when available -> network type should be present
ok chrome@112 (windows 10) -> sends expected attributes when available -> network effectiveType should be present
ok chrome@112 (windows 10) -> sends expected attributes when available -> network rtt should be present
ok chrome@112 (windows 10) -> sends expected attributes when available -> network downlink should be present
# chrome@112 (windows 10) -> tests 8
# chrome@112 (windows 10) -> pass  8
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/load-event-during-interaction.browser.js
# chrome@112 (windows 10) -> browser/timings-lcp-cls.browser.js
# chrome@112 (windows 10) -> LCP event with CLS attribute
ok chrome@112 (windows 10) -> LCP event with CLS attribute -> CLS value should be the one present at the time LCP happened
# chrome@112 (windows 10) -> tests 1
# chrome@112 (windows 10) -> pass  1
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/hashchange-popstate.browser.js
# chrome@112 (windows 10) -> browser/xhr/data-url.browser.js
# chrome@112 (windows 10) -> XHR request for Data URL does not generate telemetry
ok chrome@112 (windows 10) -> XHR request for Data URL does not generate telemetry -> XHR Data URL request recorded
ok chrome@112 (windows 10) -> XHR request for Data URL does not generate telemetry -> XHR Data URL request did not generate telemetry
# chrome@112 (windows 10) -> Data URL Fetch requests do not generate telemetry
ok chrome@112 (windows 10) -> Data URL Fetch requests do not generate telemetry -> Fetch data URL request recorded
ok chrome@112 (windows 10) -> Data URL Fetch requests do not generate telemetry -> Fetch data URL request did not generate telemetry
# chrome@112 (windows 10) -> tests 4
# chrome@112 (windows 10) -> pass  4
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/buffered-events.browser.js
# chrome@112 (windows 10) -> browser/spa/sync-events.browser.js
# chrome@112 (windows 10) -> sync event in timer
ok chrome@112 (windows 10) -> sync event in timer -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> sync event in timer -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> sync event in timer -> node should have children
ok chrome@112 (windows 10) -> sync event in timer -> type should match
ok chrome@112 (windows 10) -> sync event in timer -> node should have expected number of children
ok chrome@112 (windows 10) -> sync event in timer -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> sync event in timer -> interaction node has end time >= start
ok chrome@112 (windows 10) -> sync event in timer -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> sync event in timer -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> sync event in timer -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> sync event in timer -> name in attrs should match
ok chrome@112 (windows 10) -> sync event in timer -> node should have children
ok chrome@112 (windows 10) -> sync event in timer -> type should match
ok chrome@112 (windows 10) -> sync event in timer -> node should have expected number of children
ok chrome@112 (windows 10) -> sync event in timer -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> sync event in timer -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> sync event in timer -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> sync event in timer -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> sync event in timer -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> sync event in timer -> node should have children
ok chrome@112 (windows 10) -> sync event in timer -> type should match
ok chrome@112 (windows 10) -> sync event in timer -> node should have expected number of children
ok chrome@112 (windows 10) -> sync event in timer -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> sync event in timer -> ajax node has end time >= start
ok chrome@112 (windows 10) -> sync event in timer -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> sync event in timer -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> sync event in timer -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> sync event in timer -> name in attrs should match
ok chrome@112 (windows 10) -> sync event in timer -> node should have children
ok chrome@112 (windows 10) -> sync event in timer -> type should match
ok chrome@112 (windows 10) -> sync event in timer -> node should have expected number of children
ok chrome@112 (windows 10) -> sync event in timer -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> sync event in timer -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> sync event in timer -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> sync event in timer -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> sync event in timer -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> sync event in timer -> name in attrs should match
ok chrome@112 (windows 10) -> sync event in timer -> node should have children
ok chrome@112 (windows 10) -> sync event in timer -> type should match
ok chrome@112 (windows 10) -> sync event in timer -> node should have expected number of children
ok chrome@112 (windows 10) -> sync event in timer -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> sync event in timer -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> sync event in timer -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> sync event in timer -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> sync event in timer -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> sync event in timer -> name in attrs should match
ok chrome@112 (windows 10) -> sync event in timer -> node should have children
ok chrome@112 (windows 10) -> sync event in timer -> type should match
ok chrome@112 (windows 10) -> sync event in timer -> node should have expected number of children
ok chrome@112 (windows 10) -> sync event in timer -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> sync event in timer -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> sync event in timer -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> sync event in timer -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> sync event in timer -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> sync event in timer -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> sync event in timer -> should have correct end Time
# chrome@112 (windows 10) -> sync event in click
ok chrome@112 (windows 10) -> sync event in click -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> sync event in click -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> sync event in click -> node should have children
ok chrome@112 (windows 10) -> sync event in click -> type should match
ok chrome@112 (windows 10) -> sync event in click -> node should have expected number of children
ok chrome@112 (windows 10) -> sync event in click -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> sync event in click -> interaction node has end time >= start
ok chrome@112 (windows 10) -> sync event in click -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> sync event in click -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> sync event in click -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> sync event in click -> node should have children
ok chrome@112 (windows 10) -> sync event in click -> type should match
ok chrome@112 (windows 10) -> sync event in click -> node should have expected number of children
ok chrome@112 (windows 10) -> sync event in click -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> sync event in click -> ajax node has end time >= start
ok chrome@112 (windows 10) -> sync event in click -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> sync event in click -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> sync event in click -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> sync event in click -> name in attrs should match
ok chrome@112 (windows 10) -> sync event in click -> node should have children
ok chrome@112 (windows 10) -> sync event in click -> type should match
ok chrome@112 (windows 10) -> sync event in click -> node should have expected number of children
ok chrome@112 (windows 10) -> sync event in click -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> sync event in click -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> sync event in click -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> sync event in click -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> sync event in click -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> sync event in click -> name in attrs should match
ok chrome@112 (windows 10) -> sync event in click -> node should have children
ok chrome@112 (windows 10) -> sync event in click -> type should match
ok chrome@112 (windows 10) -> sync event in click -> node should have expected number of children
ok chrome@112 (windows 10) -> sync event in click -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> sync event in click -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> sync event in click -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> sync event in click -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> sync event in click -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> sync event in click -> name in attrs should match
ok chrome@112 (windows 10) -> sync event in click -> node should have children
ok chrome@112 (windows 10) -> sync event in click -> type should match
ok chrome@112 (windows 10) -> sync event in click -> node should have expected number of children
ok chrome@112 (windows 10) -> sync event in click -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> sync event in click -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> sync event in click -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> sync event in click -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> sync event in click -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> sync event in click -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> sync event in click -> should have correct end Time
# chrome@112 (windows 10) -> tests 103
# chrome@112 (windows 10) -> pass  103
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/mutation-observer.browser.js
# chrome@112 (windows 10) -> browser/timings.browser.js
# chrome@112 (windows 10) -> page-view-timing serializer default attributes
ok chrome@112 (windows 10) -> page-view-timing serializer default attributes -> single node
ok chrome@112 (windows 10) -> page-view-timing serializer default attributes -> single node with one attribute
ok chrome@112 (windows 10) -> page-view-timing serializer default attributes -> single lcp node with multiple attributes
ok chrome@112 (windows 10) -> page-view-timing serializer default attributes -> single node with multiple attributes
ok chrome@112 (windows 10) -> page-view-timing serializer default attributes -> multiple nodes
ok chrome@112 (windows 10) -> page-view-timing serializer default attributes -> multiple nodes with attributes
ok chrome@112 (windows 10) -> page-view-timing serializer default attributes -> more than 9 attributes
# chrome@112 (windows 10) -> page-view-timing serializer handles custom attributes
ok chrome@112 (windows 10) -> page-view-timing serializer handles custom attributes -> should not allow overridden reserved attribute
ok chrome@112 (windows 10) -> page-view-timing serializer handles custom attributes -> all events should have the set custom attribute
ok chrome@112 (windows 10) -> page-view-timing serializer handles custom attributes -> should not allow overridden reserved attribute
ok chrome@112 (windows 10) -> page-view-timing serializer handles custom attributes -> all events should have the set custom attribute
ok chrome@112 (windows 10) -> page-view-timing serializer handles custom attributes -> should not allow overridden reserved attribute
ok chrome@112 (windows 10) -> page-view-timing serializer handles custom attributes -> all events should have the set custom attribute
ok chrome@112 (windows 10) -> page-view-timing serializer handles custom attributes -> should not allow overridden reserved attribute
ok chrome@112 (windows 10) -> page-view-timing serializer handles custom attributes -> all events should have the set custom attribute
ok chrome@112 (windows 10) -> page-view-timing serializer handles custom attributes -> should not allow overridden reserved attribute
ok chrome@112 (windows 10) -> page-view-timing serializer handles custom attributes -> all events should have the set custom attribute
ok chrome@112 (windows 10) -> page-view-timing serializer handles custom attributes -> should not allow overridden reserved attribute
ok chrome@112 (windows 10) -> page-view-timing serializer handles custom attributes -> all events should have the set custom attribute
ok chrome@112 (windows 10) -> page-view-timing serializer handles custom attributes -> should not allow overridden reserved attribute
ok chrome@112 (windows 10) -> page-view-timing serializer handles custom attributes -> all events should have the set custom attribute
# chrome@112 (windows 10) -> tests 21
# chrome@112 (windows 10) -> pass  21
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/nested-timer.browser.js
# chrome@112 (windows 10) -> browser/wrappings/wrap-event-target.browser.js
# chrome@112 (windows 10) -> AEL on window should call through to AEL on EventTarget
ok chrome@112 (windows 10) -> AEL on window should call through to AEL on EventTarget -> evName should be correct
ok chrome@112 (windows 10) -> AEL on window should call through to AEL on EventTarget -> handler should be correct
ok chrome@112 (windows 10) -> AEL on window should call through to AEL on EventTarget -> capture should be correct
# chrome@112 (windows 10) -> tests 3
# chrome@112 (windows 10) -> pass  3
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/mutation-observer-events.browser.js
# chrome@112 (windows 10) -> browser/wrappings/wrap-events.browser.js
# chrome@112 (windows 10) -> addEventListener should target only the given event
ok chrome@112 (windows 10) -> addEventListener should target only the given event -> expected only one handler call for click event
ok chrome@112 (windows 10) -> addEventListener should target only the given event -> should have called the listener once
# chrome@112 (windows 10) -> addEventListener should not blow up with a null func
ok chrome@112 (windows 10) -> addEventListener should not blow up with a null func -> Called successfully
# chrome@112 (windows 10) -> addEventListener allows multiple subscribers to same event on same element
ok chrome@112 (windows 10) -> addEventListener allows multiple subscribers to same event on same element -> expected two calls to handler 1
ok chrome@112 (windows 10) -> addEventListener allows multiple subscribers to same event on same element -> expected two calls to handler 2
# chrome@112 (windows 10) -> addEventListener allows object with handleEvent property
ok chrome@112 (windows 10) -> addEventListener allows object with handleEvent property -> should have one call to handler
ok chrome@112 (windows 10) -> addEventListener allows object with handleEvent property -> should have listener counter of 1
ok chrome@112 (windows 10) -> addEventListener allows object with handleEvent property -> removing handler should work
ok chrome@112 (windows 10) -> addEventListener allows object with handleEvent property -> should not have been called again
# chrome@112 (windows 10) -> addEventListener allows for multiple event listeners with an object
ok chrome@112 (windows 10) -> addEventListener allows for multiple event listeners with an object -> should have two calls
ok chrome@112 (windows 10) -> addEventListener allows for multiple event listeners with an object -> should have two calls
ok chrome@112 (windows 10) -> addEventListener allows for multiple event listeners with an object -> should have three calls
ok chrome@112 (windows 10) -> addEventListener allows for multiple event listeners with an object -> should have three calls
ok chrome@112 (windows 10) -> addEventListener allows for multiple event listeners with an object -> should have two calls
ok chrome@112 (windows 10) -> addEventListener allows for multiple event listeners with an object -> should have three calls
# chrome@112 (windows 10) -> addEventListener allows object with handleEvent property that is mutated
ok chrome@112 (windows 10) -> addEventListener allows object with handleEvent property that is mutated -> should have counter of 1
ok chrome@112 (windows 10) -> addEventListener allows object with handleEvent property that is mutated -> should have listener counter of 1
ok chrome@112 (windows 10) -> addEventListener allows object with handleEvent property that is mutated -> should have counter of 3
ok chrome@112 (windows 10) -> addEventListener allows object with handleEvent property that is mutated -> should have listener counter of 2
# chrome@112 (windows 10) -> addEventListener allows object with handleEvent property that is originally null
ok chrome@112 (windows 10) -> addEventListener allows object with handleEvent property that is originally null -> should have counter of zero
ok chrome@112 (windows 10) -> addEventListener allows object with handleEvent property that is originally null -> should have counter of two
# chrome@112 (windows 10) -> removeEventListener works with handleEvent property
ok chrome@112 (windows 10) -> removeEventListener works with handleEvent property -> should have counter of zero
ok chrome@112 (windows 10) -> removeEventListener works with handleEvent property -> should have counter of two
ok chrome@112 (windows 10) -> removeEventListener works with handleEvent property -> should still have counter of two
# chrome@112 (windows 10) -> removeEventListener works when same callback is passed for different events
ok chrome@112 (windows 10) -> removeEventListener works when same callback is passed for different events -> should have seen handler calls for both events
ok chrome@112 (windows 10) -> removeEventListener works when same callback is passed for different events -> should have seen handler call for mouseup only
ok chrome@112 (windows 10) -> removeEventListener works when same callback is passed for different events -> should have seen handler calls for neither event
# chrome@112 (windows 10) -> removeEventListener works when same callback is passed for different elements
ok chrome@112 (windows 10) -> removeEventListener works when same callback is passed for different elements -> should have seen handler calls for both elements
ok chrome@112 (windows 10) -> removeEventListener works when same callback is passed for different elements -> should have seen handler call for e2 only
ok chrome@112 (windows 10) -> removeEventListener works when same callback is passed for different elements -> should have seen handler calls for neither element
# chrome@112 (windows 10) -> tests 30
# chrome@112 (windows 10) -> pass  30
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/change.browser.js
# chrome@112 (windows 10) -> browser/wrappings/wrap-node.browser.js
# chrome@112 (windows 10) -> functions are wrapped
ok chrome@112 (windows 10) -> functions are wrapped -> appendChild is wrapped on HTMLElement
ok chrome@112 (windows 10) -> functions are wrapped -> insertBefore is wrapped on HTMLElement
ok chrome@112 (windows 10) -> functions are wrapped -> replaceChild is wrapped on HTMLElement
ok chrome@112 (windows 10) -> functions are wrapped -> appendChild is wrapped on HTMLHeadElement
ok chrome@112 (windows 10) -> functions are wrapped -> insertBefore is wrapped on HTMLHeadElement
ok chrome@112 (windows 10) -> functions are wrapped -> replaceChild is wrapped on HTMLHeadElement
ok chrome@112 (windows 10) -> functions are wrapped -> appendChild is wrapped on HTMLBodyElement
ok chrome@112 (windows 10) -> functions are wrapped -> insertBefore is wrapped on HTMLBodyElement
ok chrome@112 (windows 10) -> functions are wrapped -> replaceChild is wrapped on HTMLBodyElement
# chrome@112 (windows 10) -> new property is not added to HTMLElement
ok chrome@112 (windows 10) -> new property is not added to HTMLElement -> should be equal
ok chrome@112 (windows 10) -> new property is not added to HTMLElement -> should be equal
ok chrome@112 (windows 10) -> new property is not added to HTMLElement -> should be equal
# chrome@112 (windows 10) -> tests 12
# chrome@112 (windows 10) -> pass  12
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/initial-page-load.browser.js
# chrome@112 (windows 10) -> browser/spa/xhr-never-call-send.browser.js
# chrome@112 (windows 10) -> interaction does not include xhrs that are not sent
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> interaction should be null at first
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> node should have children
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> type should match
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> node should have expected number of children
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> interaction node has end time >= start
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> name in attrs should match
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> node should have children
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> type should match
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> node should have expected number of children
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> interaction does not include xhrs that are not sent -> should have correct end Time
# chrome@112 (windows 10) -> tests 22
# chrome@112 (windows 10) -> pass  22
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> set custom attribute before page load after loader before info (full) -> first error should have a custom parameter set with the expected value
# chrome@112 (windows 10) -> set multiple custom attributes before page load with multiple JS errors occurring after page load (full)
ok chrome@112 (windows 10) -> set multiple custom attributes before page load with multiple JS errors occurring after page load (full) -> exactly one error
ok chrome@112 (windows 10) -> set multiple custom attributes before page load with multiple JS errors occurring after page load (full) -> first error should have a custom parameter set with the expected value
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/cancelled-timer-twice.browser.js
# chrome@112 (windows 10) -> browser/wrappings/wrap-history.browser.js
# chrome@112 (windows 10) -> history functions are wrapped
ok chrome@112 (windows 10) -> history functions are wrapped -> pushState is wrapped
ok chrome@112 (windows 10) -> history functions are wrapped -> replaceState is wrapped
# chrome@112 (windows 10) -> two modified properties are shown on the history object
ok chrome@112 (windows 10) -> two modified properties are shown on the history object -> should be equal
ok chrome@112 (windows 10) -> two modified properties are shown on the history object -> should be equal
# chrome@112 (windows 10) -> tests 4
# chrome@112 (windows 10) -> pass  4
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/promise-basic.browser.js
# chrome@112 (windows 10) -> browser/xhr/deny-list.browser.js
# chrome@112 (windows 10) -> domain-only blocks all subdomains and all paths
ok chrome@112 (windows 10) -> domain-only blocks all subdomains and all paths -> should be equal
ok chrome@112 (windows 10) -> domain-only blocks all subdomains and all paths -> should be equal
ok chrome@112 (windows 10) -> domain-only blocks all subdomains and all paths -> should be equal
ok chrome@112 (windows 10) -> domain-only blocks all subdomains and all paths -> should be equal
ok chrome@112 (windows 10) -> domain-only blocks all subdomains and all paths -> should be equal
ok chrome@112 (windows 10) -> domain-only blocks all subdomains and all paths -> should be equal
ok chrome@112 (windows 10) -> domain-only blocks all subdomains and all paths -> should be equal
ok chrome@112 (windows 10) -> domain-only blocks all subdomains and all paths -> regression for length comparison
ok chrome@112 (windows 10) -> domain-only blocks all subdomains and all paths -> should be equal
# chrome@112 (windows 10) -> subdomain blocks further subdomains, but not parent domain
ok chrome@112 (windows 10) -> subdomain blocks further subdomains, but not parent domain -> should be equal
ok chrome@112 (windows 10) -> subdomain blocks further subdomains, but not parent domain -> should be equal
ok chrome@112 (windows 10) -> subdomain blocks further subdomains, but not parent domain -> should be equal
ok chrome@112 (windows 10) -> subdomain blocks further subdomains, but not parent domain -> should be equal
# chrome@112 (windows 10) -> * blocks all domains
ok chrome@112 (windows 10) -> * blocks all domains -> should be equal
ok chrome@112 (windows 10) -> * blocks all domains -> should be equal
ok chrome@112 (windows 10) -> * blocks all domains -> should be equal
ok chrome@112 (windows 10) -> * blocks all domains -> should be equal
# chrome@112 (windows 10) -> path is blocking only with exact match
ok chrome@112 (windows 10) -> path is blocking only with exact match -> should be equal
ok chrome@112 (windows 10) -> path is blocking only with exact match -> should be equal
ok chrome@112 (windows 10) -> path is blocking only with exact match -> should be equal
ok chrome@112 (windows 10) -> path is blocking only with exact match -> should be equal
ok chrome@112 (windows 10) -> path is blocking only with exact match -> should be equal
ok chrome@112 (windows 10) -> path is blocking only with exact match -> should be equal
# chrome@112 (windows 10) -> * blocks all domains
ok chrome@112 (windows 10) -> * blocks all domains -> should be equal
ok chrome@112 (windows 10) -> * blocks all domains -> should be equal
ok chrome@112 (windows 10) -> * blocks all domains -> should be equal
ok chrome@112 (windows 10) -> * blocks all domains -> should be equal
# chrome@112 (windows 10) -> protocol is ignored when not specified
ok chrome@112 (windows 10) -> protocol is ignored when not specified -> should be equal
ok chrome@112 (windows 10) -> protocol is ignored when not specified -> should be equal
# chrome@112 (windows 10) -> port is ignored when not specified
ok chrome@112 (windows 10) -> port is ignored when not specified -> should be equal
ok chrome@112 (windows 10) -> port is ignored when not specified -> should be equal
# chrome@112 (windows 10) -> invalid values
ok chrome@112 (windows 10) -> invalid values -> should be equal
ok chrome@112 (windows 10) -> invalid values -> should be equal
ok chrome@112 (windows 10) -> invalid values -> should be equal
ok chrome@112 (windows 10) -> invalid values -> should be equal
# chrome@112 (windows 10) -> URL that contains protocol multiple times
ok chrome@112 (windows 10) -> URL that contains protocol multiple times -> should be equal
ok chrome@112 (windows 10) -> URL that contains protocol multiple times -> should be equal
ok chrome@112 (windows 10) -> URL that contains protocol multiple times -> should be equal
# chrome@112 (windows 10) -> tests 38
# chrome@112 (windows 10) -> pass  38
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/promise-race.browser.js
# chrome@112 (windows 10) -> browser/xhr/dt.browser.js
# chrome@112 (windows 10) -> newrelic header has the correct format
ok chrome@112 (windows 10) -> newrelic header has the correct format -> payload is not null
ok chrome@112 (windows 10) -> newrelic header has the correct format -> spanId is not null
ok chrome@112 (windows 10) -> newrelic header has the correct format -> spanId is the same as id in header
ok chrome@112 (windows 10) -> newrelic header has the correct format -> traceId is not null
ok chrome@112 (windows 10) -> newrelic header has the correct format -> traceId is the same as tr in header
ok chrome@112 (windows 10) -> newrelic header has the correct format -> timestamp is not null
ok chrome@112 (windows 10) -> newrelic header has the correct format -> timestamp is the same as ti in header
ok chrome@112 (windows 10) -> newrelic header has the correct format -> version in header is set
ok chrome@112 (windows 10) -> newrelic header has the correct format -> type in header is set to Browser
ok chrome@112 (windows 10) -> newrelic header has the correct format -> ac in header is set to account
ok chrome@112 (windows 10) -> newrelic header has the correct format -> ap in header is set to app/agent ID
ok chrome@112 (windows 10) -> newrelic header has the correct format -> tk in header is set to trust key
# chrome@112 (windows 10) -> newrelic header is not generated for same-origin calls when disabled in configuration
ok chrome@112 (windows 10) -> newrelic header is not generated for same-origin calls when disabled in configuration -> newrelicHeader should not be generated
ok chrome@112 (windows 10) -> newrelic header is not generated for same-origin calls when disabled in configuration -> traceparent header should be generated
ok chrome@112 (windows 10) -> newrelic header is not generated for same-origin calls when disabled in configuration -> tracestate header should be generated
# chrome@112 (windows 10) -> newrelic header is added to cross-origin calls by default
ok chrome@112 (windows 10) -> newrelic header is added to cross-origin calls by default -> newrelic header should be generated
# chrome@112 (windows 10) -> newrelic header is added to cross-origin calls when enabled in configuration
ok chrome@112 (windows 10) -> newrelic header is added to cross-origin calls when enabled in configuration -> newrelic header should be generated
# chrome@112 (windows 10) -> newrelic header is not added to cross-origin calls when disabled in configuration
ok chrome@112 (windows 10) -> newrelic header is not added to cross-origin calls when disabled in configuration -> newrelic header should be empty
# chrome@112 (windows 10) -> TraceContext headers are generated with the correct format
ok chrome@112 (windows 10) -> TraceContext headers are generated with the correct format -> parent header should have four parts
ok chrome@112 (windows 10) -> TraceContext headers are generated with the correct format -> first part should be format version set to 00
ok chrome@112 (windows 10) -> TraceContext headers are generated with the correct format -> second part should be the trace ID
ok chrome@112 (windows 10) -> TraceContext headers are generated with the correct format -> third part should be the span ID
ok chrome@112 (windows 10) -> TraceContext headers are generated with the correct format -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> TraceContext headers are generated with the correct format -> key should be in the right format
ok chrome@112 (windows 10) -> TraceContext headers are generated with the correct format -> state header should have nine parts
ok chrome@112 (windows 10) -> TraceContext headers are generated with the correct format -> version is set to 0
ok chrome@112 (windows 10) -> TraceContext headers are generated with the correct format -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> TraceContext headers are generated with the correct format -> third part is set to account ID
ok chrome@112 (windows 10) -> TraceContext headers are generated with the correct format -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> TraceContext headers are generated with the correct format -> fourth part is set to span ID
ok chrome@112 (windows 10) -> TraceContext headers are generated with the correct format -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> TraceContext headers are generated with the correct format -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> TraceContext headers are generated with the correct format -> priority is not set
ok chrome@112 (windows 10) -> TraceContext headers are generated with the correct format -> last part is set to timestamp
# chrome@112 (windows 10) -> TraceContext headers are not added to cross-origin calls by default
ok chrome@112 (windows 10) -> TraceContext headers are not added to cross-origin calls by default -> traceparent header should be empty
ok chrome@112 (windows 10) -> TraceContext headers are not added to cross-origin calls by default -> tracestate header should be empty
# chrome@112 (windows 10) -> TraceContext headers are added to cross-origin calls when enabled in configuration
ok chrome@112 (windows 10) -> TraceContext headers are added to cross-origin calls when enabled in configuration -> traceparent header should be generated
ok chrome@112 (windows 10) -> TraceContext headers are added to cross-origin calls when enabled in configuration -> tracestate header should be generated
# chrome@112 (windows 10) -> TraceContext headers are not added to cross-origin calls when disabled in configuration
ok chrome@112 (windows 10) -> TraceContext headers are not added to cross-origin calls when disabled in configuration -> traceparent header should be empty
ok chrome@112 (windows 10) -> TraceContext headers are not added to cross-origin calls when disabled in configuration -> tracestate header should be empty
# chrome@112 (windows 10) -> newrelic header is generated when configuration has numeric values
ok chrome@112 (windows 10) -> newrelic header is generated when configuration has numeric values -> payload is not null
ok chrome@112 (windows 10) -> newrelic header is generated when configuration has numeric values -> should be truthy
ok chrome@112 (windows 10) -> newrelic header is generated when configuration has numeric values -> should be equal
ok chrome@112 (windows 10) -> newrelic header is generated when configuration has numeric values -> should be truthy
ok chrome@112 (windows 10) -> newrelic header is generated when configuration has numeric values -> should be equal
ok chrome@112 (windows 10) -> newrelic header is generated when configuration has numeric values -> should be truthy
ok chrome@112 (windows 10) -> newrelic header is generated when configuration has numeric values -> should be equal
ok chrome@112 (windows 10) -> newrelic header is generated when configuration has numeric values -> should be equivalent
ok chrome@112 (windows 10) -> newrelic header is generated when configuration has numeric values -> should be equal
ok chrome@112 (windows 10) -> newrelic header is generated when configuration has numeric values -> should be equal
ok chrome@112 (windows 10) -> newrelic header is generated when configuration has numeric values -> should be equal
ok chrome@112 (windows 10) -> newrelic header is generated when configuration has numeric values -> should be equal
ok chrome@112 (windows 10) -> newrelic header is generated when configuration has numeric values -> should be truthy
ok chrome@112 (windows 10) -> newrelic header is generated when configuration has numeric values -> should be truthy
ok chrome@112 (windows 10) -> newrelic header is generated when configuration has numeric values -> should be truthy
# chrome@112 (windows 10) -> NREUM.loader_config object is empty - no DT headers are generated
ok chrome@112 (windows 10) -> NREUM.loader_config object is empty - no DT headers are generated -> payload is null
# chrome@112 (windows 10) -> accountID is missing - no header generated
ok chrome@112 (windows 10) -> accountID is missing - no header generated -> payload is null
# chrome@112 (windows 10) -> agentID is missing - no header generated
ok chrome@112 (windows 10) -> agentID is missing - no header generated -> payload is null
# chrome@112 (windows 10) -> trustKey is missing - header generated, trustKey won't be in header
ok chrome@112 (windows 10) -> trustKey is missing - header generated, trustKey won't be in header -> payload is not null
ok chrome@112 (windows 10) -> trustKey is missing - header generated, trustKey won't be in header -> should be truthy
ok chrome@112 (windows 10) -> trustKey is missing - header generated, trustKey won't be in header -> should be equal
ok chrome@112 (windows 10) -> trustKey is missing - header generated, trustKey won't be in header -> should be truthy
ok chrome@112 (windows 10) -> trustKey is missing - header generated, trustKey won't be in header -> should be equal
ok chrome@112 (windows 10) -> trustKey is missing - header generated, trustKey won't be in header -> should be truthy
ok chrome@112 (windows 10) -> trustKey is missing - header generated, trustKey won't be in header -> should be equal
ok chrome@112 (windows 10) -> trustKey is missing - header generated, trustKey won't be in header -> should be equivalent
ok chrome@112 (windows 10) -> trustKey is missing - header generated, trustKey won't be in header -> should be equal
ok chrome@112 (windows 10) -> trustKey is missing - header generated, trustKey won't be in header -> should be equal
ok chrome@112 (windows 10) -> trustKey is missing - header generated, trustKey won't be in header -> should be equal
ok chrome@112 (windows 10) -> trustKey is missing - header generated, trustKey won't be in header -> should be falsy
ok chrome@112 (windows 10) -> trustKey is missing - header generated, trustKey won't be in header -> should be truthy
ok chrome@112 (windows 10) -> trustKey is missing - header generated, trustKey won't be in header -> should be truthy
ok chrome@112 (windows 10) -> trustKey is missing - header generated, trustKey won't be in header -> should be truthy
# chrome@112 (windows 10) -> window.btoa is missing - no header generated
ok chrome@112 (windows 10) -> window.btoa is missing - no header generated -> should be truthy
ok chrome@112 (windows 10) -> window.btoa is missing - no header generated -> payload is not null
ok chrome@112 (windows 10) -> window.btoa is missing - no header generated -> should be truthy
ok chrome@112 (windows 10) -> window.btoa is missing - no header generated -> should be truthy
ok chrome@112 (windows 10) -> window.btoa is missing - no header generated -> should be truthy
ok chrome@112 (windows 10) -> window.btoa is missing - no header generated -> should be falsy
# chrome@112 (windows 10) -> NREUM.init object has no DT section - shouldGenerateTrace is false
ok chrome@112 (windows 10) -> NREUM.init object has no DT section - shouldGenerateTrace is false -> should be equal
# chrome@112 (windows 10) -> NREUM.loader_config object has dt enabled/same origin - shouldGenerateTrace is true
ok chrome@112 (windows 10) -> NREUM.loader_config object has dt enabled/same origin - shouldGenerateTrace is true -> should be equal
# chrome@112 (windows 10) -> NREUM.loader_config object has dt enabled/allowed CORS origin - shouldGenerateTrace is true
ok chrome@112 (windows 10) -> NREUM.loader_config object has dt enabled/allowed CORS origin - shouldGenerateTrace is true -> should be equal
# chrome@112 (windows 10) -> NREUM.loader_config object has dt enabled/disallowed CORS origin - shouldGenerateTrace is false
ok chrome@112 (windows 10) -> NREUM.loader_config object has dt enabled/disallowed CORS origin - shouldGenerateTrace is false -> should be equal
# chrome@112 (windows 10) -> tests 83
# chrome@112 (windows 10) -> pass  83
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/cancelled-timer.browser.js
# chrome@112 (windows 10) -> browser/stn/stn.browser.js
# chrome@112 (windows 10) -> wait for trace node generation
ok chrome@112 (windows 10) -> wait for trace node generation -> should be truthy
ok chrome@112 (windows 10) -> wait for trace node generation -> should be truthy
ok chrome@112 (windows 10) -> wait for trace node generation -> should be truthy
ok chrome@112 (windows 10) -> wait for trace node generation -> should be truthy
# chrome@112 (windows 10) -> session trace nodes
ok chrome@112 (windows 10) -> session trace nodes -> Start time is between recent time and now 1682813243319
ok chrome@112 (windows 10) -> session trace nodes -> No events with unknown origin
# chrome@112 (windows 10) -> stn DOMContentLoaded
ok chrome@112 (windows 10) -> stn DOMContentLoaded -> DOMContentLoaded node created
ok chrome@112 (windows 10) -> stn DOMContentLoaded -> DOMContentLoaded node has start time 50503
ok chrome@112 (windows 10) -> stn DOMContentLoaded -> DOMContentLoaded node origin document
# chrome@112 (windows 10) -> stn document load
ok chrome@112 (windows 10) -> stn document load -> load node created
ok chrome@112 (windows 10) -> stn document load -> load node has start time 20
ok chrome@112 (windows 10) -> stn document load -> load node origin document
# chrome@112 (windows 10) -> stn timer
ok chrome@112 (windows 10) -> stn timer -> timer node created
ok chrome@112 (windows 10) -> stn timer -> timer node has start time 50500
ok chrome@112 (windows 10) -> stn timer -> setInterval origin window
# chrome@112 (windows 10) -> stn-raf
ok chrome@112 (windows 10) -> stn-raf -> raf node created
ok chrome@112 (windows 10) -> stn-raf -> raf node has start time 50496
ok chrome@112 (windows 10) -> stn-raf -> requestAnimationFrame origin window
# chrome@112 (windows 10) -> stn error
ok chrome@112 (windows 10) -> stn error -> error node created
ok chrome@112 (windows 10) -> stn error -> error node has start time 50497
ok chrome@112 (windows 10) -> stn error -> error node has no duration
# chrome@112 (windows 10) -> stn ajax
ok chrome@112 (windows 10) -> stn ajax -> ajax node created
ok chrome@112 (windows 10) -> stn ajax -> Ajax has some duration
ok chrome@112 (windows 10) -> stn ajax -> Ajax name
ok chrome@112 (windows 10) -> stn ajax -> Ajax type
# chrome@112 (windows 10) -> stn history
ok chrome@112 (windows 10) -> stn history -> hist node created
ok chrome@112 (windows 10) -> stn history -> hist node has no duration
ok chrome@112 (windows 10) -> stn history -> hist name
ok chrome@112 (windows 10) -> stn history -> new path
ok chrome@112 (windows 10) -> stn history -> old path
# chrome@112 (windows 10) -> stn pvt items
ok chrome@112 (windows 10) -> stn pvt items -> all pvt items exist
ok chrome@112 (windows 10) -> stn pvt items -> FI owner is document
ok chrome@112 (windows 10) -> stn pvt items -> FI has no duration
ok chrome@112 (windows 10) -> stn pvt items -> FI is a timing node
ok chrome@112 (windows 10) -> stn pvt items -> FID owner is document
ok chrome@112 (windows 10) -> stn pvt items -> FID has a duration relative to FI
ok chrome@112 (windows 10) -> stn pvt items -> FID is an event node
# chrome@112 (windows 10) -> tests 37
# chrome@112 (windows 10) -> pass  37
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/parallel-xhr-and-timers.browser.js
# chrome@112 (windows 10) -> browser/xhr/response-size.browser.js
# chrome@112 (windows 10) -> ms-stream has undefined size
ok chrome@112 (windows 10) -> ms-stream has undefined size -> returned size should be undefined
# chrome@112 (windows 10) -> arraybuffer returns response size
ok chrome@112 (windows 10) -> arraybuffer returns response size -> returned size should be arraybuffer size
# chrome@112 (windows 10) -> blob returns response size
ok chrome@112 (windows 10) -> blob returns response size -> returned size should be blob size
# chrome@112 (windows 10) -> json returns response size
ok chrome@112 (windows 10) -> json returns response size -> returned size should be json size
# chrome@112 (windows 10) -> text returns responseText size
ok chrome@112 (windows 10) -> text returns responseText size -> returned size should be text size
# chrome@112 (windows 10) -> default empty string type returns responseText size
ok chrome@112 (windows 10) -> default empty string type returns responseText size -> returned size should be text size
# chrome@112 (windows 10) -> tests 6
# chrome@112 (windows 10) -> pass  6
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/promise-reject.browser.js
# chrome@112 (windows 10) -> browser/xhr/xhr-with-blob-body.browser.js
# chrome@112 (windows 10) -> xhr with blob request body
ok chrome@112 (windows 10) -> xhr with blob request body -> correct size for sent blob objects
ok chrome@112 (windows 10) -> xhr with blob request body -> correct size for received blob objects
ok chrome@112 (windows 10) -> xhr with blob request body -> blob content matches
# chrome@112 (windows 10) -> tests 3
# chrome@112 (windows 10) -> pass  3
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/ended-interaction.browser.js
# chrome@112 (windows 10) -> browser/spa/xhr-readystatechange.browser.js
# chrome@112 (windows 10) -> spa XHR readystatechange callback
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> node should have children
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> type should match
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> node should have expected number of children
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> interaction node has end time >= start
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> node should have children
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> type should match
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> node should have expected number of children
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> ajax node has end time >= start
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> name in attrs should match
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> node should have children
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> type should match
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> node should have expected number of children
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> name in attrs should match
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> node should have children
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> type should match
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> node should have expected number of children
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> spa XHR readystatechange callback -> should have correct end Time
# chrome@112 (windows 10) -> tests 38
# chrome@112 (windows 10) -> pass  38
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/hashchange-after-finish.browser.js
# chrome@112 (windows 10) -> browser/xhr/index.browser.js
# chrome@112 (windows 10) -> xhr timing
ok chrome@112 (windows 10) -> xhr timing -> should get right data
ok chrome@112 (windows 10) -> xhr timing -> Status code for timeout request is 0
ok chrome@112 (windows 10) -> xhr timing -> No txSize for empty put
ok chrome@112 (windows 10) -> xhr timing -> Get txSize on posts with a body
ok chrome@112 (windows 10) -> xhr timing -> Callbacks Took some time for /echo, onload : 3
ok chrome@112 (windows 10) -> xhr timing -> correct status for /xhr_with_cat
ok chrome@112 (windows 10) -> xhr timing -> correct method for /xhr_with_cat
ok chrome@112 (windows 10) -> xhr timing -> host has a hostname
ok chrome@112 (windows 10) -> xhr timing -> host correct port number
ok chrome@112 (windows 10) -> xhr timing -> has CAT data for /xhr_with_cat
ok chrome@112 (windows 10) -> xhr timing -> Has some size for /xhr_with_cat
ok chrome@112 (windows 10) -> xhr timing -> Took some time for /xhr_with_cat
ok chrome@112 (windows 10) -> xhr timing -> No txSize for get
ok chrome@112 (windows 10) -> xhr timing -> Callbacks Took some time for /xhr_with_cat, one load and onload : 6
ok chrome@112 (windows 10) -> xhr timing -> /xhr_with_cat/1
ok chrome@112 (windows 10) -> xhr timing -> correct status for /xhr_no_cat
ok chrome@112 (windows 10) -> xhr timing -> correct method for /xhr_no_cat
ok chrome@112 (windows 10) -> xhr timing -> correct pathname for /xhr_no_cat
ok chrome@112 (windows 10) -> xhr timing -> Has some size for /xhr_no_cat
ok chrome@112 (windows 10) -> xhr timing -> Took some time for /xhr_no_cat
ok chrome@112 (windows 10) -> xhr timing -> does not have CAT data for /xhr_no_cat
ok chrome@112 (windows 10) -> xhr timing -> Callbacks Took some time for /xhr_no_cat, two load handlers: 6
ok chrome@112 (windows 10) -> xhr timing -> status for /xhr_with_cat/2 was 200
ok chrome@112 (windows 10) -> xhr timing -> got pathname for cross-origin XHR request
ok chrome@112 (windows 10) -> xhr timing -> does not process CAT data for cross-origin XHR request
ok chrome@112 (windows 10) -> xhr timing -> cbTime reported even w/o long running CBs
ok chrome@112 (windows 10) -> xhr timing -> host has hostname and port
ok chrome@112 (windows 10) -> xhr timing -> arraybuffer content matches
ok chrome@112 (windows 10) -> xhr timing -> correct size for sent arraybuffer objects
ok chrome@112 (windows 10) -> xhr timing -> correct size for received arraybuffer objects
ok chrome@112 (windows 10) -> xhr timing -> correct FormData content sent
ok chrome@112 (windows 10) -> xhr timing -> no size for sent FormData objects
ok chrome@112 (windows 10) -> xhr timing -> JSON content matches
ok chrome@112 (windows 10) -> xhr timing -> correct size for received JSON objects
ok chrome@112 (windows 10) -> xhr timing -> onreadystatechange fired on non-cors cross origin call
ok chrome@112 (windows 10) -> xhr timing -> content-length header should not be present
ok chrome@112 (windows 10) -> xhr timing -> rxSize should be full resource size
ok chrome@112 (windows 10) -> xhr timing -> rxSize should be the uncompressed resource size
# chrome@112 (windows 10) -> tests 38
# chrome@112 (windows 10) -> pass  38
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/hashchange-multiple-event-callbacks.browser.js
# chrome@112 (windows 10) -> browser/wrappings/wrap-jsonp.browser.js
# chrome@112 (windows 10) -> jsonp works with /jsonp?cb=foo
# chrome@112 (windows 10) -> listener called
ok chrome@112 (windows 10) -> listener called -> should get here
# chrome@112 (windows 10) -> jsonp works with /jsonp?cb=foo#abc
# chrome@112 (windows 10) -> listener called
ok chrome@112 (windows 10) -> listener called -> should get here
# chrome@112 (windows 10) -> jsonp works with /jsonp?callback=foo
# chrome@112 (windows 10) -> listener called
ok chrome@112 (windows 10) -> listener called -> should get here
# chrome@112 (windows 10) -> jsonp works with /jsonp?callback=foo#abc
# chrome@112 (windows 10) -> listener called
ok chrome@112 (windows 10) -> listener called -> should get here
# chrome@112 (windows 10) -> jsonp does not work with /jsonp?mycb=foo
ok chrome@112 (windows 10) -> jsonp does not work with /jsonp?mycb=foo -> should be truthy
# chrome@112 (windows 10) -> jsonp does not work with /jsonp?ab=1&mycb=foo
ok chrome@112 (windows 10) -> jsonp does not work with /jsonp?ab=1&mycb=foo -> should be truthy
# chrome@112 (windows 10) -> jsonp does not work with /jsonp?mycallback=foo
ok chrome@112 (windows 10) -> jsonp does not work with /jsonp?mycallback=foo -> should be truthy
# chrome@112 (windows 10) -> jsonp does not work with /jsonp?ab=1&mycallback=foo
ok chrome@112 (windows 10) -> jsonp does not work with /jsonp?ab=1&mycallback=foo -> should be truthy
# chrome@112 (windows 10) -> tests 8
# chrome@112 (windows 10) -> pass  8
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/promise-then.browser.js
# chrome@112 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (spa)
ok chrome@112 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (spa) -> exactly three errors
ok chrome@112 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (spa) -> first error should have a custom parameter set with the expected value
ok chrome@112 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (spa) -> second error should have a custom parameter set with the expected value
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/single-fetch.browser.js
# chrome@112 (windows 10) -> set multiple custom attributes before page load with multiple JS errors occurring after page load (spa)
ok chrome@112 (windows 10) -> set multiple custom attributes before page load with multiple JS errors occurring after page load (spa) -> exactly one error
ok chrome@112 (windows 10) -> set multiple custom attributes before page load with multiple JS errors occurring after page load (spa) -> first error should have a custom parameter set with the expected value
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/promise-catch.browser.js
# chrome@112 (windows 10) -> browser/xhr/fetch.browser.js
# chrome@112 (windows 10) -> basic fetch call
ok chrome@112 (windows 10) -> basic fetch call -> method
ok chrome@112 (windows 10) -> basic fetch call -> status
ok chrome@112 (windows 10) -> basic fetch call -> host
ok chrome@112 (windows 10) -> basic fetch call -> pathname
ok chrome@112 (windows 10) -> basic fetch call -> request size
ok chrome@112 (windows 10) -> basic fetch call -> response size
ok chrome@112 (windows 10) -> basic fetch call -> duration is a positive number
ok chrome@112 (windows 10) -> basic fetch call -> start is a positive number
# chrome@112 (windows 10) -> fetch with Request parameter
ok chrome@112 (windows 10) -> fetch with Request parameter -> method
ok chrome@112 (windows 10) -> fetch with Request parameter -> status
ok chrome@112 (windows 10) -> fetch with Request parameter -> host
ok chrome@112 (windows 10) -> fetch with Request parameter -> pathname
ok chrome@112 (windows 10) -> fetch with Request parameter -> request size
ok chrome@112 (windows 10) -> fetch with Request parameter -> response size
ok chrome@112 (windows 10) -> fetch with Request parameter -> duration is a positive number
ok chrome@112 (windows 10) -> fetch with Request parameter -> start is a positive number
# chrome@112 (windows 10) -> fetch with URL parameter
ok chrome@112 (windows 10) -> fetch with URL parameter -> method
ok chrome@112 (windows 10) -> fetch with URL parameter -> status
ok chrome@112 (windows 10) -> fetch with URL parameter -> host
ok chrome@112 (windows 10) -> fetch with URL parameter -> pathname
ok chrome@112 (windows 10) -> fetch with URL parameter -> request size
ok chrome@112 (windows 10) -> fetch with URL parameter -> response size
ok chrome@112 (windows 10) -> fetch with URL parameter -> duration is a positive number
ok chrome@112 (windows 10) -> fetch with URL parameter -> start is a positive number
# chrome@112 (windows 10) -> fetch with error response
ok chrome@112 (windows 10) -> fetch with error response -> method
ok chrome@112 (windows 10) -> fetch with error response -> status
ok chrome@112 (windows 10) -> fetch with error response -> host
ok chrome@112 (windows 10) -> fetch with error response -> pathname
ok chrome@112 (windows 10) -> fetch with error response -> request size
ok chrome@112 (windows 10) -> fetch with error response -> duration is a positive number
ok chrome@112 (windows 10) -> fetch with error response -> start is a positive number
# chrome@112 (windows 10) -> rejected fetch call is captured
ok chrome@112 (windows 10) -> rejected fetch call is captured -> method
ok chrome@112 (windows 10) -> rejected fetch call is captured -> status
ok chrome@112 (windows 10) -> rejected fetch call is captured -> host
ok chrome@112 (windows 10) -> rejected fetch call is captured -> pathname
ok chrome@112 (windows 10) -> rejected fetch call is captured -> request size
ok chrome@112 (windows 10) -> rejected fetch call is captured -> duration is a positive number
ok chrome@112 (windows 10) -> rejected fetch call is captured -> start is a positive number
# chrome@112 (windows 10) -> tests 38
# chrome@112 (windows 10) -> pass  38
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/nested-xhr.browser.js
# chrome@112 (windows 10) -> browser/xhr/onreadystatechange.browser.js
# chrome@112 (windows 10) -> xhr with onreadystatechange assigned after send
ok chrome@112 (windows 10) -> xhr with onreadystatechange assigned after send -> saw readyState 2
ok chrome@112 (windows 10) -> xhr with onreadystatechange assigned after send -> saw readyState 3
ok chrome@112 (windows 10) -> xhr with onreadystatechange assigned after send -> saw readyState 4
# chrome@112 (windows 10) -> multiple XHRs with onreadystatechange assigned after send
ok chrome@112 (windows 10) -> multiple XHRs with onreadystatechange assigned after send -> saw readyState 2 for xhr1
ok chrome@112 (windows 10) -> multiple XHRs with onreadystatechange assigned after send -> saw readyState 3 for xhr1
ok chrome@112 (windows 10) -> multiple XHRs with onreadystatechange assigned after send -> saw readyState 4 for xhr1
ok chrome@112 (windows 10) -> multiple XHRs with onreadystatechange assigned after send -> saw readyState 2 for xhr2
ok chrome@112 (windows 10) -> multiple XHRs with onreadystatechange assigned after send -> saw readyState 3 for xhr2
ok chrome@112 (windows 10) -> multiple XHRs with onreadystatechange assigned after send -> saw readyState 4 for xhr2
# chrome@112 (windows 10) -> tests 9
# chrome@112 (windows 10) -> pass  9
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/wrappings/wrap-function.browser.js
# chrome@112 (windows 10) -> setAttribute takes precedence over setCustomAttribute
ok chrome@112 (windows 10) -> setAttribute takes precedence over setCustomAttribute -> exactly one error
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/xhr/ajax-events.browser.js
# chrome@112 (windows 10) -> noticeError takes precedence over setAttribute in discarded interactions
ok chrome@112 (windows 10) -> noticeError takes precedence over setAttribute in discarded interactions -> exactly one error
# storing failed test for later retry: chrome@112 (windows 10) - setErrorHandler ignores errors
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/xhr/index.browser.js
# chrome@112 (windows 10) -> final harvest sends page action
ok chrome@112 (windows 10) -> final harvest sends page action -> no ins harvest yet
ok chrome@112 (windows 10) -> final harvest sends page action -> received one ins harvest
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/xhr-readystatechange.browser.js
# chrome@112 (windows 10) -> final harvest happens on page unload -- new unload BFC work
ok chrome@112 (windows 10) -> final harvest happens on page unload -- new unload BFC work -> no ins harvest yet
ok chrome@112 (windows 10) -> final harvest happens on page unload -- new unload BFC work -> no err harvest yet
ok chrome@112 (windows 10) -> final harvest happens on page unload -- new unload BFC work -> received one ins harvest
ok chrome@112 (windows 10) -> final harvest happens on page unload -- new unload BFC work -> received one err harvest
ok chrome@112 (windows 10) -> final harvest happens on page unload -- new unload BFC work -> received ins harvest
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/fetch-rejections.browser.js
# chrome@112 (windows 10) -> browser/wrappings/wrap-fetch.browser.js
# chrome@112 (windows 10) -> response size
# chrome@112 (windows 10) -> is captured when content-length is present
ok chrome@112 (windows 10) -> is captured when content-length is present -> should be equal
ok chrome@112 (windows 10) -> is captured when content-length is present -> fetch got response
# chrome@112 (windows 10) -> is not captured when content-length is not present
ok chrome@112 (windows 10) -> is not captured when content-length is not present -> size should not be present
ok chrome@112 (windows 10) -> is not captured when content-length is not present -> fetch got response
# chrome@112 (windows 10) -> Safari 11 fetch clone regression
# chrome@112 (windows 10) -> agent should not cause clone to fail, response size: 1
ok chrome@112 (windows 10) -> agent should not cause clone to fail, response size: 1 -> clone was successful
# chrome@112 (windows 10) -> agent should not cause clone to fail, response size: 10
ok chrome@112 (windows 10) -> agent should not cause clone to fail, response size: 10 -> clone was successful
# chrome@112 (windows 10) -> agent should not cause clone to fail, response size: 100
ok chrome@112 (windows 10) -> agent should not cause clone to fail, response size: 100 -> clone was successful
# chrome@112 (windows 10) -> agent should not cause clone to fail, response size: 1000
ok chrome@112 (windows 10) -> agent should not cause clone to fail, response size: 1000 -> clone was successful
# chrome@112 (windows 10) -> agent should not cause clone to fail, response size: 10000
ok chrome@112 (windows 10) -> agent should not cause clone to fail, response size: 10000 -> clone was successful
# chrome@112 (windows 10) -> agent should not cause clone to fail, response size: 100000
ok chrome@112 (windows 10) -> agent should not cause clone to fail, response size: 100000 -> clone was successful
# chrome@112 (windows 10) -> tests 10
# chrome@112 (windows 10) -> pass  10
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (spa) -> third error should have a custom parameter set with the expected value
# chrome@112 (windows 10) -> final harvest doesnt append pageHide if already previously recorded
ok chrome@112 (windows 10) -> final harvest doesnt append pageHide if already previously recorded -> there should be at least one timing metric
ok chrome@112 (windows 10) -> final harvest doesnt append pageHide if already previously recorded -> there should be ONLY ONE pageHide timing
ok chrome@112 (windows 10) -> final harvest doesnt append pageHide if already previously recorded -> value should be a positive number
ok chrome@112 (windows 10) -> set multiple custom attributes before page load with multiple JS errors occurring after page load (spa) -> first error has a count of 3
# chrome@112 (windows 10) -> final harvest sends js errors
ok chrome@112 (windows 10) -> final harvest sends js errors -> no errors harvest yet
ok chrome@112 (windows 10) -> final harvest sends js errors -> received one errors harvest
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/wrappings/wrap-jsonp.browser.js
# chrome@112 (windows 10) -> final harvest sends pageHide if not already recorded
ok chrome@112 (windows 10) -> final harvest sends pageHide if not already recorded -> no events harvest yet
ok chrome@112 (windows 10) -> final harvest sends pageHide if not already recorded -> received one events harvest
ok chrome@112 (windows 10) -> final harvest sends pageHide if not already recorded -> there should be at least one timing metric
ok chrome@112 (windows 10) -> final harvest sends pageHide if not already recorded -> Final harvest should have a pageHide timing
ok chrome@112 (windows 10) -> final harvest sends pageHide if not already recorded -> pageHide should have a value
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/wrappings/wrap-events.browser.js
# chrome@112 (windows 10) -> custom fingerprinting labels errors correctly
# chrome@112 (windows 10) -> custom fingerprinting labels errors correctly (retry 2)
ok chrome@112 (windows 10) -> custom fingerprinting labels errors correctly (retry 2) -> correct number of errors harvested
ok chrome@112 (windows 10) -> custom fingerprinting labels errors correctly (retry 2) -> harvested error is expected
ok chrome@112 (windows 10) -> custom fingerprinting labels errors correctly (retry 2) -> "much" error has the right group label
ok chrome@112 (windows 10) -> custom fingerprinting labels errors correctly (retry 2) -> harvested error is expected
ok chrome@112 (windows 10) -> custom fingerprinting labels errors correctly (retry 2) -> "such" error has the right group label
ok chrome@112 (windows 10) -> custom fingerprinting labels errors correctly (retry 2) -> harvested error is expected
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/xhr/data-url.browser.js
# chrome@112 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed
ok chrome@112 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed -> pageViewErr reported
ok chrome@112 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed -> two errors reported
ok chrome@112 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed -> first error has stack trace
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/timings-fi-attributes.browser.js
# chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> pageViewErr reported
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> exactly 8 errors
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> found expected error
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> Stack hash exists
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> has correct request_uri attribute
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> found expected error
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> Stack hash exists
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> has correct request_uri attribute
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> found expected error
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> Stack hash exists
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> has correct request_uri attribute
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> found expected error
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> Stack hash exists
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> has correct request_uri attribute
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> found expected error
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> Stack hash exists
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> has correct request_uri attribute
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> found expected error
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> Stack hash exists
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> has correct request_uri attribute
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> found expected error
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> Stack hash exists
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> has correct request_uri attribute
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> found expected error
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> Stack hash exists
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/single-xhr.browser.js
# chrome@112 (windows 10) -> click interaction: multiple errors - different attribute values
# chrome@112 (windows 10) -> click interaction: multiple errors - different attribute values (retry 1)
ok chrome@112 (windows 10) -> click interaction: multiple errors - different attribute values (retry 1) -> exactly three errors
ok chrome@112 (windows 10) -> click interaction: multiple errors - different attribute values (retry 1) -> first error should have a custom parameter set with the expected value
ok chrome@112 (windows 10) -> click interaction: multiple errors - different attribute values (retry 1) -> second error should have a custom parameter set with the expected value
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/stringify.browser.js
# chrome@112 (windows 10) -> click interaction: attributes captured in discarded interaction are still collected
# chrome@112 (windows 10) -> click interaction: attributes captured in discarded interaction are still collected (retry 1)
ok chrome@112 (windows 10) -> click interaction: attributes captured in discarded interaction are still collected (retry 1) -> exactly one error
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/traced-callback.browser.js
# chrome@112 (windows 10) -> click interaction: simple case - single error
# chrome@112 (windows 10) -> click interaction: simple case - single error (retry 1)
ok chrome@112 (windows 10) -> click interaction: simple case - single error (retry 1) -> exactly one error
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/xhr/onreadystatechange.browser.js
# chrome@112 (windows 10) -> final harvest sends timings data
ok chrome@112 (windows 10) -> final harvest sends timings data -> no events harvest yet
ok chrome@112 (windows 10) -> final harvest sends timings data -> received first events harvest
ok chrome@112 (windows 10) -> final harvest sends timings data -> there should be at least one timing metric
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/wrappings/wrap-fetch.browser.js
# chrome@112 (windows 10) -> agent either runs or fails gracefully
ok chrome@112 (windows 10) -> final harvest sends pageHide if not already recorded -> pageHide value should be valid
# chrome@112 (windows 10) -> when url is changed using pushState during load
# chrome@112 (windows 10) -> header
ok chrome@112 (windows 10) -> header -> should be truthy
# chrome@112 (windows 10) -> query param
ok chrome@112 (windows 10) -> final harvest sends js errors -> received err harvest
# chrome@112 (windows 10) -> referrer sent in query does not include query parameters
ok chrome@112 (windows 10) -> final harvest doesnt append pageHide if already previously recorded -> value should not be larger than time since start of the test
# chrome@112 (windows 10) -> referrer attribute is sent in the query string
ok chrome@112 (windows 10) -> custom fingerprinting labels errors correctly (retry 2) -> "wow" error has the right group label
# chrome@112 (windows 10) -> when url is changed using replaceState during load
# chrome@112 (windows 10) -> header
ok chrome@112 (windows 10) -> header -> should be truthy
# chrome@112 (windows 10) -> query param
ok chrome@112 (windows 10) -> final harvest happens on page unload -- new unload BFC work -> received err harvest
# chrome@112 (windows 10) -> Agent detects a page built with NO FRAMEWORK and DOES NOT send a supportability metric
ok chrome@112 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed -> second error has stack trace
# chrome@112 (windows 10) -> browsers that do not decode the url when accessing window.location encode special characters in the referrer attribute
ok chrome@112 (windows 10) -> browsers that do not decode the url when accessing window.location encode special characters in the referrer attribute -> The query string should include the ref attribute.
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/timer-between-cb-and-microtasks.browser.js
# chrome@112 (windows 10) -> initial load interaction: simple case - single error
ok chrome@112 (windows 10) -> initial load interaction: simple case - single error -> exactly one error
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/wrappings/no-events-for-recursive-wrapped-calls.browser.js
# chrome@112 (windows 10) -> global and interaction attributes on same error
ok chrome@112 (windows 10) -> global and interaction attributes on same error -> exactly one error
ok chrome@112 (windows 10) -> global and interaction attributes on same error -> first error should have a custom attribute set with the expected value
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/timer-cutoff.browser.js
# chrome@112 (windows 10) -> noticeError takes precedence over setAttribute
ok chrome@112 (windows 10) -> noticeError takes precedence over setAttribute -> exactly one error
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/single-timer.browser.js
# chrome@112 (windows 10) -> initial load interaction: muliple errors - different attribute values
ok chrome@112 (windows 10) -> initial load interaction: muliple errors - different attribute values -> exactly three errors
ok chrome@112 (windows 10) -> initial load interaction: muliple errors - different attribute values -> first error should have a custom parameter set with the expected value
ok chrome@112 (windows 10) -> initial load interaction: muliple errors - different attribute values -> second error should have a custom parameter set with the expected value
ok chrome@112 (windows 10) -> final harvest sends page action -> received ins harvest
# chrome@112 (windows 10) -> Agent detects a page built with ANGULAR and sends a supportability metric
ok chrome@112 (windows 10) -> Agent detects a page built with ANGULAR and sends a supportability metric -> SupportabilityMetrics objects were generated
ok chrome@112 (windows 10) -> click interaction: multiple errors - different attribute values (retry 1) -> third error should have a custom parameter set with the expected value
# chrome@112 (windows 10) -> cookie enabled by default: query string attributes
ok chrome@112 (windows 10) -> cookie enabled by default: query string attributes -> The cookie flag ('ck') should equal 0.
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/wrappings/wrap-event-target.browser.js
# chrome@112 (windows 10) -> setErrorHandler ignores errors
# chrome@112 (windows 10) -> Agent detects a page built with REACT and sends a supportability metric
ok chrome@112 (windows 10) -> Agent detects a page built with REACT and sends a supportability metric -> SupportabilityMetrics objects were generated
ok chrome@112 (windows 10) -> final harvest sends timings data -> first node is a timing node
# chrome@112 (windows 10) -> PageAction submission on final harvest
ok chrome@112 (windows 10) -> PageAction submission on final harvest -> should have 1 event
ok chrome@112 (windows 10) -> PageAction submission on final harvest -> event has correct action name
ok chrome@112 (windows 10) -> PageAction submission on final harvest -> event has free tacos
ok chrome@112 (windows 10) -> PageAction submission on final harvest -> harvest time (2288) should always be bigger than event time (1427)
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/route-change-detection.browser.js
# chrome@112 (windows 10) -> noticeError accepts custom attributes in an argument (full)
ok chrome@112 (windows 10) -> noticeError accepts custom attributes in an argument (full) -> exactly one error
ok chrome@112 (windows 10) -> noticeError accepts custom attributes in an argument (full) -> should have first custom attribute
ok chrome@112 (windows 10) -> referrer attribute is sent in the query string -> The query string should include the ref attribute.
# chrome@112 (windows 10) -> generic agent info is captured - spa
ok chrome@112 (windows 10) -> generic agent info is captured - spa -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> generic agent info is captured - spa -> LoaderType was captured for spa
ok chrome@112 (windows 10) -> query param -> ref param contains the redirected URL
# chrome@112 (windows 10) -> generic agent info is captured - rum
ok chrome@112 (windows 10) -> generic agent info is captured - rum -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> generic agent info is captured - rum -> LoaderType was captured for rum
ok chrome@112 (windows 10) -> noticeError takes precedence over setAttribute in discarded interactions -> error should have value val1
# chrome@112 (windows 10) -> final harvest sends ajax events
# chrome@112 (windows 10) -> final harvest sends ajax events (retry 1)
ok chrome@112 (windows 10) -> final harvest sends ajax events (retry 1) -> there should be at least one ajax call
ok chrome@112 (windows 10) -> Agent detects a page built with REACT and sends a supportability metric -> Supportability metric is React and is formatted correctly
# chrome@112 (windows 10) -> NPM agent dist -- custom-agent-lite -- sends RUM call
ok chrome@112 (windows 10) -> cookie enabled by default: query string attributes -> The session id ('s') should NOT be 0.
# chrome@112 (windows 10) -> NPM agent dist -- browser-agent -- sends RUM call
ok chrome@112 (windows 10) -> initial load interaction: simple case - single error -> first error should have a custom parameter set with the expected value
# chrome@112 (windows 10) -> an invalid obfuscation regex type creates invalid supportability metric
ok chrome@112 (windows 10) -> an invalid obfuscation regex type creates invalid supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> noticeError takes precedence over setAttribute -> error should have value from noticeError
# chrome@112 (windows 10) -> an invalid obfuscation replacement type creates invalid supportability metric
ok chrome@112 (windows 10) -> an invalid obfuscation replacement type creates invalid supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> global and interaction attributes on same error -> first error should have an interaction attribute set with the expected value
# chrome@112 (windows 10) -> an invalid obfuscation regex undefined creates invalid supportability metric
ok chrome@112 (windows 10) -> an invalid obfuscation regex undefined creates invalid supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> browsers that do not decode the url when accessing window.location encode special characters in the referrer attribute -> The ref attribute should be the same as the assetURL
# chrome@112 (windows 10) -> a valid obfuscationRule creates detected supportability metric
ok chrome@112 (windows 10) -> a valid obfuscationRule creates detected supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> a valid obfuscationRule creates detected supportability metric -> Generic/Version/1.231.0/Detected contains correct name
ok chrome@112 (windows 10) -> a valid obfuscationRule creates detected supportability metric -> Generic/LoaderType/spa/Detected contains correct name
ok chrome@112 (windows 10) -> a valid obfuscationRule creates detected supportability metric -> Generic/DistMethod/CDN/Detected contains correct name
ok chrome@112 (windows 10) -> a valid obfuscationRule creates detected supportability metric -> Generic/Obfuscate/Detected contains correct name
ok chrome@112 (windows 10) -> a valid obfuscationRule creates detected supportability metric -> Workers/Service/Unavailable contains correct name
ok chrome@112 (windows 10) -> a valid obfuscationRule creates detected supportability metric -> API/addPageAction/called contains correct name
ok chrome@112 (windows 10) -> a valid obfuscationRule creates detected supportability metric -> API/setCustomAttribute/called contains correct name
ok chrome@112 (windows 10) -> a valid obfuscationRule creates detected supportability metric -> Generic/Resources/Non-Ajax/Internal contains correct name
ok chrome@112 (windows 10) -> a valid obfuscationRule creates detected supportability metric -> Generic/Resources/Ajax/Internal contains correct name
ok chrome@112 (windows 10) -> a valid obfuscationRule creates detected supportability metric -> PageSession/Endpoint/1/BytesSent contains correct name
ok chrome@112 (windows 10) -> a valid obfuscationRule creates detected supportability metric -> PageSession/Endpoint/Resources/BytesSent contains correct name
ok chrome@112 (windows 10) -> a valid obfuscationRule creates detected supportability metric -> PageSession/Endpoint/Ins/BytesSent contains correct name
ok chrome@112 (windows 10) -> a valid obfuscationRule creates detected supportability metric -> PageSession/Endpoint/Events/BytesSent contains correct name
ok chrome@112 (windows 10) -> Agent detects a page built with NO FRAMEWORK and DOES NOT send a supportability metric -> FRAMEWORK SupportabilityMetrics object(s) were NOT generated
# chrome@112 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric
ok chrome@112 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> CustomMetrics object(s) were generated
ok chrome@112 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> API/noticeError/called count was incremented by 1
ok chrome@112 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> API/setPageViewName/called count was incremented by 1 until reached 5
ok chrome@112 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> API/setCustomAttribute/called count was incremented by 1
ok chrome@112 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> API/setUserId/called count was incremented by 1
ok chrome@112 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> API/setErrorHandler/called count was incremented by 1
ok chrome@112 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> API/finished/called count was incremented by 1
ok chrome@112 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> API/addToTrace/called count was incremented by 1
ok chrome@112 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> API/addRelease/called count was incremented by 1
ok chrome@112 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> Saw all asyncApiFns
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/timings-lcp-cls.browser.js
# chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket when retrying due to 429
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket when retrying due to 429 -> server responded with 429
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket when retrying due to 429 -> server responded with 200
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket when retrying due to 429 -> post body in retry harvest should be the same as in the first harvest
ok chrome@112 (windows 10) -> initial load interaction: muliple errors - different attribute values -> third error should have a custom parameter set with the expected value
# chrome@112 (windows 10) -> workers creation generates sm
ok chrome@112 (windows 10) -> workers creation generates sm -> 12 SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> workers creation generates sm -> classic worker is expected and used
ok chrome@112 (windows 10) -> workers creation generates sm -> module worker is expected and used
ok chrome@112 (windows 10) -> workers creation generates sm -> classic sharedworker is expected and used
ok chrome@112 (windows 10) -> workers creation generates sm -> module sharedworker is expected and used
ok chrome@112 (windows 10) -> workers creation generates sm -> classic or module serviceworker is NOT expected or used
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/sync-events.browser.js
# chrome@112 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed when retrying due to 429
ok chrome@112 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed when retrying due to 429 -> server responded with 429
ok chrome@112 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed when retrying due to 429 -> server responded with 200
ok chrome@112 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed when retrying due to 429 -> post body in retry harvest should be the same as in the first harvest
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/wrappings/wrap-history.browser.js
# chrome@112 (windows 10) -> reporting uncaught errors from inline scripts
ok chrome@112 (windows 10) -> reporting uncaught errors from inline scripts -> pageViewErr reported
ok chrome@112 (windows 10) -> reporting uncaught errors from inline scripts -> Expected exactly one error
ok chrome@112 (windows 10) -> reporting uncaught errors from inline scripts -> stack trace should not include URL query string or fragment
ok chrome@112 (windows 10) -> reporting uncaught errors from inline scripts -> Expected exactly one error
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/xhr-never-call-send.browser.js
# chrome@112 (windows 10) -> reporting uncaught errors from external scripts
ok chrome@112 (windows 10) -> reporting uncaught errors from external scripts -> pageViewErr reported
ok chrome@112 (windows 10) -> reporting uncaught errors from external scripts -> Expected exactly one error
ok chrome@112 (windows 10) -> reporting uncaught errors from external scripts -> stack trace should not include URL query string or fragment
ok chrome@112 (windows 10) -> reporting uncaught errors from external scripts -> Expected exactly one error
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/timings.browser.js
# chrome@112 (windows 10) -> encoding error where message contains a circular reference
ok chrome@112 (windows 10) -> encoding error where message contains a circular reference -> exactly one error
ok chrome@112 (windows 10) -> set multiple custom attributes before page load with multiple JS errors occurring after page load (full) -> first error has a count of 3
# chrome@112 (windows 10) -> jserrors are retried when collector returns 429
ok chrome@112 (windows 10) -> jserrors are retried when collector returns 429 -> server responded with 429
ok chrome@112 (windows 10) -> jserrors are retried when collector returns 429 -> server responded with 200
ok chrome@112 (windows 10) -> jserrors are retried when collector returns 429 -> post body in retry harvest should be the same as in the first harvest
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/wrappings/wrap-node.browser.js
# chrome@112 (windows 10) -> reporting errors from event listener callbacks
ok chrome@112 (windows 10) -> reporting errors from event listener callbacks -> pageViewErr reported
ok chrome@112 (windows 10) -> reporting errors from event listener callbacks -> Has 2 errors
ok chrome@112 (windows 10) -> reporting errors from event listener callbacks -> document addEventListener listenerexceptionClass is Error
ok chrome@112 (windows 10) -> reporting errors from event listener callbacks -> document addEventListener listenermessage is correct
ok chrome@112 (windows 10) -> reporting errors from event listener callbacks -> Stack trace has handleEvent
ok chrome@112 (windows 10) -> reporting errors from event listener callbacks -> Stack trace has eventListenerUrl
ok chrome@112 (windows 10) -> reporting errors from event listener callbacks -> global addEventListener listenerexceptionClass is Error
ok chrome@112 (windows 10) -> reporting errors from event listener callbacks -> global addEventListener listenermessage is correct
ok chrome@112 (windows 10) -> reporting errors from event listener callbacks -> Stack trace has handleEvent
ok chrome@112 (windows 10) -> PageAction submission on final harvest -> estimated event time (595576689) < receipt time (595577550)
# chrome@112 (windows 10) -> NPM agent dist -- custom-agent-pro -- sends RUM call
ok chrome@112 (windows 10) -> referrer sent in query does not include query parameters -> url in ref query param does not contain query parameters
# chrome@112 (windows 10) -> generic agent info is captured - full
ok chrome@112 (windows 10) -> generic agent info is captured - full -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> generic agent info is captured - full -> LoaderType was captured for full
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> has correct request_uri attribute
# chrome@112 (windows 10) -> cookie disabled: query string attributes
ok chrome@112 (windows 10) -> cookie disabled: query string attributes -> The cookie flag ('ck') should equal 0.
ok chrome@112 (windows 10) -> cookie disabled: query string attributes -> The session id attr 's' should exist and be truthy.
ok chrome@112 (windows 10) -> cookie disabled: query string attributes -> The cookie flag ('ck') should equal 0.
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/xhr/deny-list.browser.js
# chrome@112 (windows 10) -> reporting errors from setInterval callbacks
ok chrome@112 (windows 10) -> reporting errors from setInterval callbacks -> pageViewErr reported
ok chrome@112 (windows 10) -> reporting errors from setInterval callbacks -> exactly 1 errors
ok chrome@112 (windows 10) -> reporting errors from setInterval callbacks -> found expected error
ok chrome@112 (windows 10) -> reporting errors from setInterval callbacks -> Stack hash exists
ok chrome@112 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info precedence check (full) -> first error should have a custom parameter set with the expected value
# chrome@112 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info (spa)
ok chrome@112 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info (spa) -> first error should have a custom parameter set with the expected value
ok chrome@112 (windows 10) -> generic agent info is captured - spa -> LoaderType SM matches spa
# chrome@112 (windows 10) -> NPM agent dist -- worker-agent -- sends RUM call
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/same-callback-multiple-xhrs.browser.js
# chrome@112 (windows 10) -> set single custom attribute before page load with single JS error occurring before page load (spa)
ok chrome@112 (windows 10) -> set single custom attribute before page load with single JS error occurring before page load (spa) -> exactly one error
ok chrome@112 (windows 10) -> an invalid obfuscation regex type creates invalid supportability metric -> invalid regex rule detected
# chrome@112 (windows 10) -> NPM agent src -- worker-agent -- sends RUM call
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/serializer.browser.js
# chrome@112 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info precedence check (spa)
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/xhr/response-size.browser.js
# chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> pageViewErr reported
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> expected string message exists (Unhandled Promise Rejection: "Test")
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stack_trace exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stackHash exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> expected number message exists (Unhandled Promise Rejection: 1)
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stack_trace exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stackHash exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> expected nested obj message exists (Unhandled Promise Rejection: {"a":1,"b":{"a":1}})
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stack_trace exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stackHash exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> expected array message exists (Unhandled Promise Rejection: [1,2,3])
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stack_trace exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stackHash exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> expected error with message message exists (Unhandled Promise Rejection: test)
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stack_trace exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stackHash exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> expected error with no setter with message message exists (test)
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stack_trace exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stackHash exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> expected undefined message exists (Unhandled Promise Rejection: )
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stack_trace exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stackHash exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> expected null message exists (Unhandled Promise Rejection: null)
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stack_trace exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stackHash exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> expected error with no message message exists (Unhandled Promise Rejection: )
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stack_trace exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stackHash exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> expected map object message exists (Unhandled Promise Rejection: {})
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stack_trace exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stackHash exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> expected factory function message exists (Unhandled Promise Rejection: {"abc":"Hello"})
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stack_trace exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stackHash exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> expected uncalled function message exists (Unhandled Promise Rejection: undefined)
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stack_trace exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stackHash exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> expected circular object message exists (Unhandled Promise Rejection: {"abc":"circular"})
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stack_trace exists
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> stackHash exists
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/pushstate-popstate.browser.js
# chrome@112 (windows 10) -> noticeError accepts custom attributes in an argument (spa)
ok chrome@112 (windows 10) -> noticeError accepts custom attributes in an argument (spa) -> exactly one error
ok chrome@112 (windows 10) -> noticeError accepts custom attributes in an argument (spa) -> should have first custom attribute
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/xhr/dt.browser.js
# chrome@112 (windows 10) -> reporting errors from setTimeout callbacks
ok chrome@112 (windows 10) -> reporting errors from setTimeout callbacks -> pageViewErr reported
ok chrome@112 (windows 10) -> reporting errors from setTimeout callbacks -> exactly 1 errors
ok chrome@112 (windows 10) -> reporting errors from setTimeout callbacks -> found expected error
ok chrome@112 (windows 10) -> reporting errors from setTimeout callbacks -> Stack hash exists
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/stn/stn.browser.js
# chrome@112 (windows 10) -> reporting uncaught errors
ok chrome@112 (windows 10) -> reporting uncaught errors -> pageViewErr reported
ok chrome@112 (windows 10) -> reporting uncaught errors -> expected original onerror message exists
ok chrome@112 (windows 10) -> reporting uncaught errors -> stack_trace exists
ok chrome@112 (windows 10) -> reporting uncaught errors -> stackHash exists
ok chrome@112 (windows 10) -> reporting uncaught errors -> error has correct exceptionClass (Error)
ok chrome@112 (windows 10) -> reporting uncaught errors -> expected uncaught error message exists
ok chrome@112 (windows 10) -> reporting uncaught errors -> stack_trace exists
ok chrome@112 (windows 10) -> reporting uncaught errors -> stackHash exists
ok chrome@112 (windows 10) -> reporting uncaught errors -> error has correct exceptionClass (Error)
ok chrome@112 (windows 10) -> reporting uncaught errors -> expected fake message exists
ok chrome@112 (windows 10) -> reporting uncaught errors -> stack_trace exists
ok chrome@112 (windows 10) -> reporting uncaught errors -> stackHash exists
ok chrome@112 (windows 10) -> reporting uncaught errors -> fake error has correct exceptionClass (p)
ok chrome@112 (windows 10) -> reporting uncaught errors -> expected original return false message exists
ok chrome@112 (windows 10) -> reporting uncaught errors -> stack_trace exists
ok chrome@112 (windows 10) -> reporting uncaught errors -> stackHash exists
ok chrome@112 (windows 10) -> reporting uncaught errors -> error has correct exceptionClass (Error)
ok chrome@112 (windows 10) -> final harvest sends ajax events (retry 1) -> first node is a ajax node
# chrome@112 (windows 10) -> NPM agent src -- custom-agent-lite -- sends RUM call
ok chrome@112 (windows 10) -> noticeError accepts custom attributes in an argument (full) -> should have second custom attribute
# chrome@112 (windows 10) -> NPM agent dist -- custom-agent-spa -- sends RUM call
ok chrome@112 (windows 10) -> Agent detects a page built with ANGULAR and sends a supportability metric -> Supportability metric is Angular and is formatted correctly
# chrome@112 (windows 10) -> agent set nav cookie when page is unloading
ok chrome@112 (windows 10) -> agent set nav cookie when page is unloading -> no ins harvest yet
ok chrome@112 (windows 10) -> agent set nav cookie when page is unloading -> received one ins harvest
ok chrome@112 (windows 10) -> NPM agent dist -- custom-agent-lite -- sends RUM call -> RUM call was sent
# chrome@112 (windows 10) -> NPM agent src -- custom-agent-pro -- sends RUM call
ok chrome@112 (windows 10) -> NPM agent dist -- browser-agent -- sends RUM call -> RUM call was sent
# chrome@112 (windows 10) -> NPM agent src -- custom-agent-spa -- sends RUM call
ok chrome@112 (windows 10) -> generic agent info is captured - rum -> LoaderType SM matches rum
# chrome@112 (windows 10) -> NPM agent src -- browser-agent -- sends RUM call
ok chrome@112 (windows 10) -> a valid obfuscationRule creates detected supportability metric -> PageSession/Feature/SessionTrace/DurationMs contains correct name
# chrome@112 (windows 10) -> Agent doesn't block page from back/fwd cache
ok chrome@112 (windows 10) -> an invalid obfuscation replacement type creates invalid supportability metric -> invalid regex rule detected
# chrome@112 (windows 10) -> NPM agent -- vite-react-wrapper -- sends RUM call
ok chrome@112 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> a `Finished` Custom Metric (cm) was also generated
# chrome@112 (windows 10) -> EOL events are sent appropriately
ok chrome@112 (windows 10) -> EOL events are sent appropriately -> vis hidden causes PVT harvest
ok chrome@112 (windows 10) -> EOL events are sent appropriately -> vis hidden emits the pageHide event
ok chrome@112 (windows 10) -> EOL events are sent appropriately -> vis hidden doesn't emit unload event
ok chrome@112 (windows 10) -> EOL events are sent appropriately -> unloading causes PVT harvest
ok chrome@112 (windows 10) -> EOL events are sent appropriately -> window pagehide emits the unload event
ok chrome@112 (windows 10) -> generic agent info is captured - full -> LoaderType SM matches full
# chrome@112 (windows 10) -> unload timing for spa agent
ok chrome@112 (windows 10) -> unload timing for spa agent -> there should be at least one timing metric
ok chrome@112 (windows 10) -> unload timing for spa agent -> there should be unload timing
ok chrome@112 (windows 10) -> unload timing for spa agent -> value should be a positive number
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/xhr/xhr-with-blob-body.browser.js
# chrome@112 (windows 10) -> reporting errors from XHR callbacks
# chrome@112 (windows 10) -> reporting errors from XHR callbacks (retry 1)
ok chrome@112 (windows 10) -> reporting errors from XHR callbacks (retry 1) -> pageViewErr reported
ok chrome@112 (windows 10) -> reporting errors from XHR callbacks (retry 1) -> exactly 1 errors
ok chrome@112 (windows 10) -> reporting errors from XHR callbacks (retry 1) -> found expected error
ok chrome@112 (windows 10) -> reporting errors from XHR callbacks (retry 1) -> Stack hash exists
ok chrome@112 (windows 10) -> cookie disabled: query string attributes -> the session id attr "s" exists but does not match the previous id
# chrome@112 (windows 10) -> unload timing for rum agent
ok chrome@112 (windows 10) -> unload timing for rum agent -> there should be at least one timing metric
ok chrome@112 (windows 10) -> unload timing for rum agent -> there should be unload timing
ok chrome@112 (windows 10) -> unload timing for rum agent -> value should be a positive number
ok chrome@112 (windows 10) -> reporting errors from event listener callbacks -> Stack trace has eventListenerUrl
# chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent
ok chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent -> there is a largestContentfulPaint timing
ok chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent -> largestContentfulPaint is a positive value
ok chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent -> element id is present and correct
ok chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent -> largestContentfulPaint attribute elementId is stringAttribute
ok chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent -> size is a non-negative value
ok chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent -> largestContentfulPaint attribute size is doubleAttribute
ok chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent -> element.tagName is present and correct
ok chrome@112 (windows 10) -> encoding error where message contains a circular reference -> has the expected message
# chrome@112 (windows 10) -> First interaction and first input delay for spa agent
ok chrome@112 (windows 10) -> First interaction and first input delay for spa agent -> firstInteraction is a positive value
ok chrome@112 (windows 10) -> First interaction and first input delay for spa agent -> firstInteraction should be a reasonable value
ok chrome@112 (windows 10) -> First interaction and first input delay for spa agent -> firstInteraction event type is a mouse event
ok chrome@112 (windows 10) -> First interaction and first input delay for spa agent -> firstInteraction attribute type is stringAttribute
ok chrome@112 (windows 10) -> First interaction and first input delay for spa agent -> firstInputDelay is a non-negative value
ok chrome@112 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info (spa) -> first error should have a custom parameter set with the expected value
# chrome@112 (windows 10) -> window load timing for rum agent
ok chrome@112 (windows 10) -> window load timing for rum agent -> there should be at least one timing metric
ok chrome@112 (windows 10) -> window load timing for rum agent -> there should be load timing
ok chrome@112 (windows 10) -> window load timing for rum agent -> value should be a positive number
ok chrome@112 (windows 10) -> reporting errors from setInterval callbacks -> has correct request_uri attribute
# chrome@112 (windows 10) -> window load timing for spa agent
ok chrome@112 (windows 10) -> window load timing for spa agent -> there should be at least one timing metric
ok chrome@112 (windows 10) -> window load timing for spa agent -> there should be load timing
ok chrome@112 (windows 10) -> window load timing for spa agent -> value should be a positive number
ok chrome@112 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info precedence check (spa) -> first error should have a custom parameter set with the expected value
# chrome@112 (windows 10) -> spa agent collects cls attribute when cls is 0
ok chrome@112 (windows 10) -> spa agent collects cls attribute when cls is 0 -> there should be a pageHide timing
ok chrome@112 (windows 10) -> NPM agent src -- custom-agent-lite -- sends RUM call -> RUM call was sent
# chrome@112 (windows 10) -> window load timing for spa agent includes custom attributes
ok chrome@112 (windows 10) -> window load timing for spa agent includes custom attributes -> there should be at least one timing metric
ok chrome@112 (windows 10) -> window load timing for spa agent includes custom attributes -> there should be load timing
ok chrome@112 (windows 10) -> window load timing for spa agent includes custom attributes -> PageViewTiming custom attributes should not contain default attribute keys
ok chrome@112 (windows 10) -> window load timing for spa agent includes custom attributes -> PageViewTiming event should have a custom attribute
ok chrome@112 (windows 10) -> reporting errors from setTimeout callbacks -> has correct request_uri attribute
# chrome@112 (windows 10) -> rum agent collects cls attribute when cls is 0
ok chrome@112 (windows 10) -> rum agent collects cls attribute when cls is 0 -> there should be a pageHide timing
ok chrome@112 (windows 10) -> noticeError accepts custom attributes in an argument (spa) -> should have second custom attribute
# chrome@112 (windows 10) -> windowUnload for rum agent collects cls attribute
ok chrome@112 (windows 10) -> windowUnload for rum agent collects cls attribute -> cls is a positive value
ok chrome@112 (windows 10) -> jserrors are retried when collector returns 429 -> got two jserrors harvest requests
# chrome@112 (windows 10) -> First interaction and first input delay for rum agent
ok chrome@112 (windows 10) -> First interaction and first input delay for rum agent -> firstInteraction is a positive value
ok chrome@112 (windows 10) -> First interaction and first input delay for rum agent -> firstInteraction should be a reasonable value
ok chrome@112 (windows 10) -> First interaction and first input delay for rum agent -> firstInteraction event type is a mouse event
ok chrome@112 (windows 10) -> First interaction and first input delay for rum agent -> firstInteraction attribute type is stringAttribute
ok chrome@112 (windows 10) -> First interaction and first input delay for rum agent -> firstInputDelay is a non-negative value
ok chrome@112 (windows 10) -> NPM agent src -- worker-agent -- sends RUM call -> RUM call was sent
# chrome@112 (windows 10) -> windowUnload for spa agent collects cls attribute
ok chrome@112 (windows 10) -> windowUnload for spa agent collects cls attribute -> cls is a positive value
ok chrome@112 (windows 10) -> NPM agent dist -- custom-agent-spa -- sends RUM call -> RUM call was sent
# chrome@112 (windows 10) -> window load timing for rum agent includes custom attributes
ok chrome@112 (windows 10) -> window load timing for rum agent includes custom attributes -> there should be at least one timing metric
ok chrome@112 (windows 10) -> window load timing for rum agent includes custom attributes -> there should be load timing
ok chrome@112 (windows 10) -> window load timing for rum agent includes custom attributes -> PageViewTiming custom attributes should not contain default attribute keys
ok chrome@112 (windows 10) -> window load timing for rum agent includes custom attributes -> PageViewTiming event should have a custom attribute
ok chrome@112 (windows 10) -> NPM agent dist -- custom-agent-pro -- sends RUM call -> RUM call was sent
# chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent
ok chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent -> there is a largestContentfulPaint timing
ok chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent -> largestContentfulPaint is a positive value
ok chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent -> element id is present and correct
ok chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent -> largestContentfulPaint attribute elementId is stringAttribute
ok chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent -> size is a non-negative value
ok chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent -> largestContentfulPaint attribute size is doubleAttribute
ok chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent -> element.tagName is present and correct
ok chrome@112 (windows 10) -> set single custom attribute before page load with single JS error occurring before page load (spa) -> first error should have a custom parameter set with the expected value
# chrome@112 (windows 10) -> Timings on pagehide for rum agent
ok chrome@112 (windows 10) -> Timings on pagehide for rum agent -> there should be at least one timing metric
ok chrome@112 (windows 10) -> Timings on pagehide for rum agent -> there should be pageHide timing
ok chrome@112 (windows 10) -> Timings on pagehide for rum agent -> value should be a positive number
ok chrome@112 (windows 10) -> Timings on pagehide for rum agent -> value should not be larger than time since start of the test
ok chrome@112 (windows 10) -> Timings on pagehide for rum agent -> there should be an INP timing
ok chrome@112 (windows 10) -> Timings on pagehide for rum agent -> value should be a positive number
ok chrome@112 (windows 10) -> reporting errors from XHR callbacks (retry 1) -> has correct request_uri attribute
# chrome@112 (windows 10) -> rum data
ok chrome@112 (windows 10) -> rum data -> Application time
ok chrome@112 (windows 10) -> rum data -> Queue time
ok chrome@112 (windows 10) -> rum data -> Front end time
ok chrome@112 (windows 10) -> rum data -> Account name
ok chrome@112 (windows 10) -> rum data -> User name
ok chrome@112 (windows 10) -> rum data -> Product name
ok chrome@112 (windows 10) -> rum data -> TT GUID
ok chrome@112 (windows 10) -> rum data -> APP ID
ok chrome@112 (windows 10) -> rum data -> extra params
ok chrome@112 (windows 10) -> rum data -> userAttributes params
ok chrome@112 (windows 10) -> rum data -> atts params
ok chrome@112 (windows 10) -> rum data -> custom javascript attributes params
ok chrome@112 (windows 10) -> unload timing for rum agent -> value should not be larger than time to unload
# chrome@112 (windows 10) -> rum data with multiple app IDs
ok chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent -> largestContentfulPaint attribute elementTagName is stringAttribute
# chrome@112 (windows 10) -> rum data using loader_config data
ok chrome@112 (windows 10) -> rum data using loader_config data -> Application time
ok chrome@112 (windows 10) -> rum data using loader_config data -> Queue time
ok chrome@112 (windows 10) -> rum data using loader_config data -> Front end time
ok chrome@112 (windows 10) -> rum data using loader_config data -> Account name
ok chrome@112 (windows 10) -> rum data using loader_config data -> User name
ok chrome@112 (windows 10) -> rum data using loader_config data -> Product name
ok chrome@112 (windows 10) -> rum data using loader_config data -> TT GUID
ok chrome@112 (windows 10) -> rum data using loader_config data -> APP ID
ok chrome@112 (windows 10) -> rum data using loader_config data -> extra params
ok chrome@112 (windows 10) -> rum data using loader_config data -> userAttributes params
ok chrome@112 (windows 10) -> rum data using loader_config data -> atts params
ok chrome@112 (windows 10) -> rum data using loader_config data -> custom javascript attributes params
ok chrome@112 (windows 10) -> NPM agent -- vite-react-wrapper -- sends RUM call -> RUM call was sent
# chrome@112 (windows 10) -> rum: emits long task timings when observed
ok chrome@112 (windows 10) -> rum: emits long task timings when observed -> expected number of long tasks (2) observed
ok chrome@112 (windows 10) -> rum: emits long task timings when observed -> task duration is roughly as expected
ok chrome@112 (windows 10) -> rum: emits long task timings when observed -> performancelongtasktiming properties are attached
ok chrome@112 (windows 10) -> rum: emits long task timings when observed -> entry startTime is a doubleAttribute
ok chrome@112 (windows 10) -> rum: emits long task timings when observed -> task duration is roughly as expected
ok chrome@112 (windows 10) -> rum: emits long task timings when observed -> performancelongtasktiming properties are attached
ok chrome@112 (windows 10) -> First interaction and first input delay for spa agent -> firstInputDelay attribute type is doubleAttribute
# chrome@112 (windows 10) -> rum data with multiple app IDs using loader_config data
ok chrome@112 (windows 10) -> window load timing for spa agent -> value should not be larger than time to unload
# chrome@112 (windows 10) -> RUM navTiming
ok chrome@112 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket when retrying due to 429 -> got two jserrors harvest requests
# chrome@112 (windows 10) -> timings are retried when collector returns 429
ok chrome@112 (windows 10) -> timings are retried when collector returns 429 -> server responded with 429
ok chrome@112 (windows 10) -> timings are retried when collector returns 429 -> server responded with 200
ok chrome@112 (windows 10) -> spa agent collects cls attribute when cls is 0 -> cls value should be a perfect score of 0
# chrome@112 (windows 10) -> RUM no body
ok chrome@112 (windows 10) -> RUM no body -> Reported without body element
ok chrome@112 (windows 10) -> NPM agent dist -- worker-agent -- sends RUM call -> RUM call was sent
# chrome@112 (windows 10) -> Timings on pagehide for spa agent
ok chrome@112 (windows 10) -> Timings on pagehide for spa agent -> there should be at least one timing metric
ok chrome@112 (windows 10) -> Timings on pagehide for spa agent -> there should be pageHide timing
ok chrome@112 (windows 10) -> Timings on pagehide for spa agent -> value should be a positive number
ok chrome@112 (windows 10) -> Timings on pagehide for spa agent -> value should not be larger than time since start of the test
ok chrome@112 (windows 10) -> Timings on pagehide for spa agent -> there should be an INP timing
ok chrome@112 (windows 10) -> Timings on pagehide for spa agent -> value should be a positive number
ok chrome@112 (windows 10) -> window load timing for spa agent includes custom attributes -> custom PageViewTiming attribute has the expected value
# chrome@112 (windows 10) -> First paint for supported browsers
# storing failed test for later retry: chrome@112 (windows 10) - final harvest sends resources
# storing failed test for later retry: chrome@112 (windows 10) - final harvest sends multiple
ok chrome@112 (windows 10) -> rum agent collects cls attribute when cls is 0 -> cls value should be a perfect score of 0
# chrome@112 (windows 10) -> First contentful paint for supported browsers
ok chrome@112 (windows 10) -> unhandledPromiseRejections are caught and are readable -> All expected error messages were found
# chrome@112 (windows 10) -> pageHide event for spa agent collects cls attribute
ok chrome@112 (windows 10) -> pageHide event for spa agent collects cls attribute -> cls is a positive value
ok chrome@112 (windows 10) -> window load timing for rum agent -> value should not be larger than time to unload
# chrome@112 (windows 10) -> inline hit api
ok chrome@112 (windows 10) -> inline hit api -> inlineHit app id
ok chrome@112 (windows 10) -> inline hit api -> inlineHit request name
ok chrome@112 (windows 10) -> inline hit api -> inlineHit queue time
ok chrome@112 (windows 10) -> inline hit api -> inlineHit app time
ok chrome@112 (windows 10) -> inline hit api -> inlineHit backend time
ok chrome@112 (windows 10) -> inline hit api -> inlineHit DOM time
ok chrome@112 (windows 10) -> inline hit api -> inlineHit frontend time
ok chrome@112 (windows 10) -> inline hit api -> inlineHit cycle 1
ok chrome@112 (windows 10) -> inline hit api -> inlineHit cycle 2
ok chrome@112 (windows 10) -> inline hit api -> inlineHit app id
ok chrome@112 (windows 10) -> inline hit api -> inlineHit request name
ok chrome@112 (windows 10) -> inline hit api -> inlineHit queue time
ok chrome@112 (windows 10) -> inline hit api -> inlineHit app time
ok chrome@112 (windows 10) -> inline hit api -> inlineHit backend time
ok chrome@112 (windows 10) -> inline hit api -> inlineHit DOM time
ok chrome@112 (windows 10) -> inline hit api -> inlineHit frontend time
ok chrome@112 (windows 10) -> unload timing for spa agent -> value should not be larger than time to unload
# chrome@112 (windows 10) -> RUM backend time
ok chrome@112 (windows 10) -> First interaction and first input delay for rum agent -> firstInputDelay attribute type is doubleAttribute
# chrome@112 (windows 10) -> RUM transactionName
ok chrome@112 (windows 10) -> RUM transactionName -> has correct obfuscated transactionName
ok chrome@112 (windows 10) -> reporting uncaught errors -> All expected error messages were found
# chrome@112 (windows 10) -> pageHide event for rum agent collects cls attribute
ok chrome@112 (windows 10) -> pageHide event for rum agent collects cls attribute -> cls is a positive value
ok chrome@112 (windows 10) -> window load timing for rum agent includes custom attributes -> custom PageViewTiming attribute has the expected value
# chrome@112 (windows 10) -> RUM transactionName and tNamePlain
ok chrome@112 (windows 10) -> RUM transactionName and tNamePlain -> has correct obfuscated transactionName
ok chrome@112 (windows 10) -> windowUnload for spa agent collects cls attribute -> cls is doubleAttribute
# chrome@112 (windows 10) -> RUM tNamePlain
ok chrome@112 (windows 10) -> RUM tNamePlain -> has correct tNamePlain
ok chrome@112 (windows 10) -> Agent doesn't block page from back/fwd cache -> BFC persisted should be true
# chrome@112 (windows 10) -> Checking for PVT in STN payload for spa agent
ok chrome@112 (windows 10) -> Checking for PVT in STN payload for spa agent -> STN items were generated
ok chrome@112 (windows 10) -> windowUnload for rum agent collects cls attribute -> cls is doubleAttribute
# chrome@112 (windows 10) -> RUM perf times should not be negative
ok chrome@112 (windows 10) -> RUM perf times should not be negative -> perf object exists
# storing failed test for later retry: chrome@112 (windows 10) - agent tracks resources seen
ok chrome@112 (windows 10) -> rum: emits long task timings when observed -> entry startTime is a doubleAttribute
# chrome@112 (windows 10) -> overwrite strict window.addEventListener does not break agent
ok chrome@112 (windows 10) -> rum data -> DOM content loaded time of 85 is > 0
# chrome@112 (windows 10) -> captures value
ok chrome@112 (windows 10) -> captures value -> initial page load should be tracked with an interaction
ok chrome@112 (windows 10) -> captures value -> expect no child nodes
ok chrome@112 (windows 10) -> captures value -> The interaction does not include a route change.
ok chrome@112 (windows 10) -> captures value -> expected one child node
ok chrome@112 (windows 10) -> rum data with multiple app IDs -> APP ID
# chrome@112 (windows 10) -> captures title
ok chrome@112 (windows 10) -> captures title -> initial page load should be tracked with an interaction
ok chrome@112 (windows 10) -> captures title -> expect no child nodes
ok chrome@112 (windows 10) -> captures title -> The interaction does not include a route change.
ok chrome@112 (windows 10) -> captures title -> expected one child node
ok chrome@112 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent -> largestContentfulPaint attribute elementTagName is stringAttribute
# chrome@112 (windows 10) -> RUM
ok chrome@112 (windows 10) -> rum data using loader_config data -> DOM content loaded time of 80 is > 0
# chrome@112 (windows 10) -> does not capture body text
ok chrome@112 (windows 10) -> does not capture body text -> initial page load should be tracked with an interaction
ok chrome@112 (windows 10) -> does not capture body text -> expect no child nodes
ok chrome@112 (windows 10) -> does not capture body text -> The interaction does not include a route change.
ok chrome@112 (windows 10) -> Timings on pagehide for rum agent -> value should not be larger than time since start of the test
# chrome@112 (windows 10) -> captures innerText
ok chrome@112 (windows 10) -> captures innerText -> initial page load should be tracked with an interaction
ok chrome@112 (windows 10) -> captures innerText -> expect no child nodes
ok chrome@112 (windows 10) -> captures innerText -> The interaction does not include a route change.
ok chrome@112 (windows 10) -> captures innerText -> expected one child node
ok chrome@112 (windows 10) -> RUM navTiming -> navTiming
# chrome@112 (windows 10) -> using SPA API with the lite loader
ok chrome@112 (windows 10) -> timings are retried when collector returns 429 -> post body in retry harvest should be the same as in the first harvest
# chrome@112 (windows 10) -> sends interaction id and nodeId
ok chrome@112 (windows 10) -> sends interaction id and nodeId -> interaction has id
ok chrome@112 (windows 10) -> sends interaction id and nodeId -> interaction has nodeId
ok chrome@112 (windows 10) -> sends interaction id and nodeId -> has nodeId attribute
ok chrome@112 (windows 10) -> RUM tNamePlain -> transactionName param excluded
# chrome@112 (windows 10) -> DT payload is NOT added when the feature is not enabled (default)
ok chrome@112 (windows 10) -> DT payload is NOT added when the feature is not enabled (default) -> expected one child node
ok chrome@112 (windows 10) -> DT payload is NOT added when the feature is not enabled (default) -> should not have a guid
ok chrome@112 (windows 10) -> DT payload is NOT added when the feature is not enabled (default) -> should not have a traceId
ok chrome@112 (windows 10) -> First contentful paint for supported browsers -> firstContentfulPaint has a positive value
# chrome@112 (windows 10) -> error in root node
ok chrome@112 (windows 10) -> error in root node -> should have 1 errors
ok chrome@112 (windows 10) -> error in root node -> interaction id should not be null
ok chrome@112 (windows 10) -> error in root node -> interaction should have nodeId attribute
ok chrome@112 (windows 10) -> error in root node -> should be equal
ok chrome@112 (windows 10) -> error in root node -> should have the correct interaction id
ok chrome@112 (windows 10) -> RUM no body -> Confirmed no body element
# chrome@112 (windows 10) -> capturing SPA interactions
ok chrome@112 (windows 10) -> capturing SPA interactions -> initial page load should be tracked with an interaction
ok chrome@112 (windows 10) -> capturing SPA interactions -> expect no child nodes
ok chrome@112 (windows 10) -> capturing SPA interactions -> The interaction does not include a route change.
ok chrome@112 (windows 10) -> capturing SPA interactions -> interaction has id
ok chrome@112 (windows 10) -> capturing SPA interactions -> interaction id is in uuid format
ok chrome@112 (windows 10) -> capturing SPA interactions -> interaction has nodeId attribute
ok chrome@112 (windows 10) -> capturing SPA interactions -> interaction end time should be >= start
ok chrome@112 (windows 10) -> capturing SPA interactions -> interaaction callback end should be >= interaction start
ok chrome@112 (windows 10) -> capturing SPA interactions -> interaction callback end should be <= interaction end
ok chrome@112 (windows 10) -> capturing SPA interactions -> expected one child node
ok chrome@112 (windows 10) -> capturing SPA interactions -> node has nodeId attribute
ok chrome@112 (windows 10) -> capturing SPA interactions -> should be an ajax node
ok chrome@112 (windows 10) -> capturing SPA interactions -> should not have nested children
ok chrome@112 (windows 10) -> capturing SPA interactions -> should be a POST request
ok chrome@112 (windows 10) -> capturing SPA interactions -> should have a 200 status
ok chrome@112 (windows 10) -> capturing SPA interactions -> should have a correct hostname
ok chrome@112 (windows 10) -> capturing SPA interactions -> port should be in expected range
ok chrome@112 (windows 10) -> capturing SPA interactions -> should have correct requestBodySize
ok chrome@112 (windows 10) -> capturing SPA interactions -> should have correct responseBodySize
ok chrome@112 (windows 10) -> capturing SPA interactions -> should indicate it was requested with xhr
ok chrome@112 (windows 10) -> capturing SPA interactions -> estimated ixn start after test start
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/xhr/fetch.browser.js
# chrome@112 (windows 10) -> final harvest sends resources
# chrome@112 (windows 10) -> promise wrapper should support instanceof comparison
ok chrome@112 (windows 10) -> promise wrapper should support instanceof comparison -> should not get an error
ok chrome@112 (windows 10) -> promise wrapper should support instanceof comparison -> new Promise is an instance of global Promise
ok chrome@112 (windows 10) -> promise wrapper should support instanceof comparison -> should not get an error
ok chrome@112 (windows 10) -> promise wrapper should support instanceof comparison -> static Promise methods return is instanceof global Promise
ok chrome@112 (windows 10) -> promise wrapper should support instanceof comparison -> should not get an error
ok chrome@112 (windows 10) -> promise wrapper should support instanceof comparison -> fetch returned promise is an instance of global Promise
ok chrome@112 (windows 10) -> promise wrapper should support instanceof comparison -> should not get an error
ok chrome@112 (windows 10) -> inline hit api -> inlineHit cycle 1
# chrome@112 (windows 10) -> error in custom tracer
ok chrome@112 (windows 10) -> error in custom tracer -> should have 1 unique errors
ok chrome@112 (windows 10) -> error in custom tracer -> interaction id should not be null
ok chrome@112 (windows 10) -> error in custom tracer -> interaction should have nodeId attribute
ok chrome@112 (windows 10) -> error in custom tracer -> should be equal
ok chrome@112 (windows 10) -> error in custom tracer -> should have the correct interaction id
ok chrome@112 (windows 10) -> error in custom tracer -> has the correct node id
ok chrome@112 (windows 10) -> RUM backend time -> Backend time of 239 > 0
# chrome@112 (windows 10) -> string error in custom tracer
ok chrome@112 (windows 10) -> string error in custom tracer -> should have 1 errors
ok chrome@112 (windows 10) -> string error in custom tracer -> interaction id should not be null
ok chrome@112 (windows 10) -> string error in custom tracer -> interaction should have nodeId attribute
ok chrome@112 (windows 10) -> string error in custom tracer -> should be equal
ok chrome@112 (windows 10) -> string error in custom tracer -> should have the correct interaction id
ok chrome@112 (windows 10) -> string error in custom tracer -> has the correct node id
ok chrome@112 (windows 10) -> RUM transactionName -> tNamePlain excluded
# chrome@112 (windows 10) -> errors in discarded SPA interactions
ok chrome@112 (windows 10) -> errors in discarded SPA interactions -> should be only one error
ok chrome@112 (windows 10) -> errors in discarded SPA interactions -> should be equal
ok chrome@112 (windows 10) -> errors in discarded SPA interactions -> should not have interaction id
ok chrome@112 (windows 10) -> an invalid obfuscation regex undefined creates invalid supportability metric -> invalid regex rule detected
# chrome@112 (windows 10) -> Obfuscate All Events
ok chrome@112 (windows 10) -> Obfuscate All Events -> AJAX payload exists
ok chrome@112 (windows 10) -> Obfuscate All Events -> AJAX -- pii was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> AJAX -- bam-test was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> AJAX -- fakeid was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> Errors payload exists
ok chrome@112 (windows 10) -> Obfuscate All Events -> Errors -- pii was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> Errors -- bam-test was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> Errors -- fakeid was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> INS body payload exists
ok chrome@112 (windows 10) -> Obfuscate All Events -> INS body -- pii was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> INS body -- bam-test was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> INS body -- fakeid was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> Resource payload exists
ok chrome@112 (windows 10) -> Obfuscate All Events -> Resource -- pii was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> Resource -- bam-test was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> Resource -- fakeid was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> SPA payload exists
ok chrome@112 (windows 10) -> Obfuscate All Events -> SPA -- pii was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> SPA -- bam-test was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> SPA -- fakeid was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> Timings payload exists
ok chrome@112 (windows 10) -> Obfuscate All Events -> Timings -- pii was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> Timings -- bam-test was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> Timings -- fakeid was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> RUM payload exists
ok chrome@112 (windows 10) -> Obfuscate All Events -> RUM -- pii was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> RUM -- bam-test was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> RUM -- fakeid was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> Errors query payload exists
ok chrome@112 (windows 10) -> Obfuscate All Events -> Errors query -- pii was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> Errors query -- bam-test was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> Errors query -- fakeid was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> INS query payload exists
ok chrome@112 (windows 10) -> Obfuscate All Events -> INS query -- pii was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> INS query -- bam-test was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> INS query -- fakeid was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> Resource query payload exists
ok chrome@112 (windows 10) -> Obfuscate All Events -> Resource query -- pii was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> Resource query -- bam-test was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> Resource query -- fakeid was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> SPA query payload exists
ok chrome@112 (windows 10) -> Obfuscate All Events -> SPA query -- pii was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> SPA query -- bam-test was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> SPA query -- fakeid was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> Timings query payload exists
ok chrome@112 (windows 10) -> Obfuscate All Events -> Timings query -- pii was obfuscated
ok chrome@112 (windows 10) -> Obfuscate All Events -> Timings query -- bam-test was obfuscated
ok chrome@112 (windows 10) -> Checking for PVT in STN payload for spa agent -> Expected PVT Items are present in STN payload
# chrome@112 (windows 10) -> fetch request using string URL with two parameters on same origin has AJAX request with DT payload
ok chrome@112 (windows 10) -> fetch request using string URL with two parameters on same origin has AJAX request with DT payload -> expected one child node
ok chrome@112 (windows 10) -> fetch request using string URL with two parameters on same origin has AJAX request with DT payload -> should be a non-empty guid string
ok chrome@112 (windows 10) -> fetch request using string URL with two parameters on same origin has AJAX request with DT payload -> should be a non-empty traceId string
ok chrome@112 (windows 10) -> Timings on pagehide for spa agent -> value should not be larger than time since start of the test
# chrome@112 (windows 10) -> capturing SPA interactions using loader_config data
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> initial page load should be tracked with an interaction
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> expect no child nodes
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> The interaction does not include a route change.
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> interaction has id
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> interaction id is in uuid format
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> interaction has nodeId attribute
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> interaction end time should be >= start
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> interaaction callback end should be >= interaction start
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> interaction callback end should be <= interaction end
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> expected one child node
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> node has nodeId attribute
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> should be an ajax node
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> should not have nested children
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> should be a POST request
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> should have a 200 status
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> should have a correct hostname
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> port should be in expected range
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> should have correct requestBodySize
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> should have correct responseBodySize
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> should indicate it was requested with xhr
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> estimated ixn start after test start
ok chrome@112 (windows 10) -> reporting uncaught errors from inline scripts -> stack trace should not include URL query string or fragment
# chrome@112 (windows 10) -> First paint for rum agent
ok chrome@112 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed when retrying due to 429 -> got two jserrors harvest requests
# chrome@112 (windows 10) -> First contentful paint for spa agent
ok chrome@112 (windows 10) -> reporting uncaught errors from external scripts -> stack trace should not include URL query string or fragment
# chrome@112 (windows 10) -> First contentful paint for rum agent
ok chrome@112 (windows 10) -> workers creation generates sm -> serviceworker API should be unavailable on all
# chrome@112 (windows 10) -> First paint for spa agent
ok chrome@112 (windows 10) -> pageHide event for spa agent collects cls attribute -> cls is doubleAttribute
# chrome@112 (windows 10) -> error in xhr
ok chrome@112 (windows 10) -> error in xhr -> should have 1 unique errors
ok chrome@112 (windows 10) -> error in xhr -> interaction id should not be null
ok chrome@112 (windows 10) -> error in xhr -> interaction should have nodeId attribute
ok chrome@112 (windows 10) -> error in xhr -> should be equal
ok chrome@112 (windows 10) -> error in xhr -> should have the correct interaction id
ok chrome@112 (windows 10) -> error in xhr -> has the correct parent node id
ok chrome@112 (windows 10) -> rum data with multiple app IDs using loader_config data -> APP ID
# chrome@112 (windows 10) -> ajax in deny list is not harvested with interaction
# chrome@112 (windows 10) -> no deny list
ok chrome@112 (windows 10) -> no deny list -> type
ok chrome@112 (windows 10) -> no deny list -> type
ok chrome@112 (windows 10) -> no deny list -> path
ok chrome@112 (windows 10) -> no deny list -> type
ok chrome@112 (windows 10) -> no deny list -> path
ok chrome@112 (windows 10) -> no deny list -> there should be no children
# chrome@112 (windows 10) -> node at the end of tree branch
ok chrome@112 (windows 10) -> node at the end of tree branch -> type
ok chrome@112 (windows 10) -> node at the end of tree branch -> type
ok chrome@112 (windows 10) -> node at the end of tree branch -> path
ok chrome@112 (windows 10) -> node at the end of tree branch -> there should be no children
# chrome@112 (windows 10) -> node in the middle of tree branch
ok chrome@112 (windows 10) -> node in the middle of tree branch -> type
ok chrome@112 (windows 10) -> node in the middle of tree branch -> type
ok chrome@112 (windows 10) -> node in the middle of tree branch -> path
ok chrome@112 (windows 10) -> setAttribute takes precedence over setCustomAttribute -> first error should have value from setAttribute
# chrome@112 (windows 10) -> final harvest sends multiple
# chrome@112 (windows 10) -> error on the initial page load
ok chrome@112 (windows 10) -> error on the initial page load -> should have 1 errors
ok chrome@112 (windows 10) -> error on the initial page load -> interaction id should not be null
ok chrome@112 (windows 10) -> error on the initial page load -> interaction should have nodeId attribute
ok chrome@112 (windows 10) -> error on the initial page load -> should have one child
ok chrome@112 (windows 10) -> error on the initial page load -> child is a custom tracer
ok chrome@112 (windows 10) -> error on the initial page load -> tracer should have a node id
ok chrome@112 (windows 10) -> error on the initial page load -> should be equal
ok chrome@112 (windows 10) -> error on the initial page load -> should have the correct interaction id
ok chrome@112 (windows 10) -> captures innerText -> should be equivalent
# chrome@112 (windows 10) -> multiple custom interactions have correct customEnd value
ok chrome@112 (windows 10) -> multiple custom interactions have correct customEnd value -> three interactions should have been captured
ok chrome@112 (windows 10) -> multiple custom interactions have correct customEnd value -> interaction has expected custom name
ok chrome@112 (windows 10) -> multiple custom interactions have correct customEnd value -> interaction custom end time is equal to or greater than interaction end time
ok chrome@112 (windows 10) -> multiple custom interactions have correct customEnd value -> interaction has expected custom name
ok chrome@112 (windows 10) -> multiple custom interactions have correct customEnd value -> interaction custom end time is equal to or greater than interaction end time
ok chrome@112 (windows 10) -> multiple custom interactions have correct customEnd value -> interaction has expected custom name
ok chrome@112 (windows 10) -> EOL events are sent appropriately -> but pageHide is not emitted again (capped at one)
# chrome@112 (windows 10) -> Disabled timings feature
ok chrome@112 (windows 10) -> Disabled timings feature -> no events harvest yet
ok chrome@112 (windows 10) -> Disabled timings feature -> no events harvest
ok chrome@112 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info (full) -> first error should have a custom parameter set with the expected value
# chrome@112 (windows 10) -> set custom attribute before page load after loader before info (spa)
# chrome@112 (windows 10) -> set custom attribute before page load after loader before info (spa) (retry 1)
ok chrome@112 (windows 10) -> pageHide event for rum agent collects cls attribute -> cls is doubleAttribute
# chrome@112 (windows 10) -> errors outside of interaction
ok chrome@112 (windows 10) -> errors outside of interaction -> should be only one error
ok chrome@112 (windows 10) -> errors outside of interaction -> should be equal
ok chrome@112 (windows 10) -> errors outside of interaction -> should not have interaction id
ok chrome@112 (windows 10) -> NPM agent src -- browser-agent -- sends RUM call -> RUM call was sent
# chrome@112 (windows 10) -> spa loader: LCP is not collected on hidden page
ok chrome@112 (windows 10) -> NPM agent src -- custom-agent-pro -- sends RUM call -> RUM call was sent
# chrome@112 (windows 10) -> rum loader: LCP is not collected on hidden page
ok chrome@112 (windows 10) -> query param -> ref param contains the redirected URL
# chrome@112 (windows 10) -> agent tracks resources seen
# chrome@112 (windows 10) -> fetch request using object URL on same origin has AJAX request with DT payload
ok chrome@112 (windows 10) -> fetch request using object URL on same origin has AJAX request with DT payload -> expected one child node
ok chrome@112 (windows 10) -> fetch request using object URL on same origin has AJAX request with DT payload -> should be a non-empty guid string
ok chrome@112 (windows 10) -> fetch request using object URL on same origin has AJAX request with DT payload -> should be a non-empty traceId string
ok chrome@112 (windows 10) -> captures title -> should be equivalent
# chrome@112 (windows 10) -> capturing fetch in SPA interactions
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> initial page load should be tracked with an interaction
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> The interaction does not include a route change.
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> interaction has id attribute
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> interaction has nodeId attribute
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> interaction end time should be >= start
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> interaaction callback end should be >= interaction start
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> interaction callback end should be <= interaction end
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> expected one child node
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> has nodeId attribute
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> should be an ajax node
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> should not have nested children
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> should be a POST request
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> should have a 200 status
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> should have a correct hostname
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> port should be in expected range
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> should have correct requestBodySize
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> should have correct responseBodySize
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> should indicate it was requested with fetch
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> estimated ixn start after test start
ok chrome@112 (windows 10) -> overwrite strict window.addEventListener does not break agent -> Correctly added an event listener
# chrome@112 (windows 10) -> fetch request on different origin has no AJAX request with DT payload
ok chrome@112 (windows 10) -> fetch request on different origin has no AJAX request with DT payload -> expected one child node
ok chrome@112 (windows 10) -> fetch request on different origin has no AJAX request with DT payload -> should not have a guid
ok chrome@112 (windows 10) -> fetch request on different origin has no AJAX request with DT payload -> should not have a traceId
ok chrome@112 (windows 10) -> RUM transactionName and tNamePlain -> tNamePlain excluded
# chrome@112 (windows 10) -> same error in multiple interactions
ok chrome@112 (windows 10) -> same error in multiple interactions -> interaction 1 id should not be null
ok chrome@112 (windows 10) -> same error in multiple interactions -> interaction 2 id should not be null
ok chrome@112 (windows 10) -> same error in multiple interactions -> should have 2 unique errors
ok chrome@112 (windows 10) -> same error in multiple interactions -> should be equal
ok chrome@112 (windows 10) -> same error in multiple interactions -> should be equal
ok chrome@112 (windows 10) -> RUM perf times should not be negative -> All perf values are positive
# chrome@112 (windows 10) -> fetch request using string URL with one parameter on same origin has AJAX request with DT payload
ok chrome@112 (windows 10) -> fetch request using string URL with one parameter on same origin has AJAX request with DT payload -> expected one child node
ok chrome@112 (windows 10) -> fetch request using string URL with one parameter on same origin has AJAX request with DT payload -> should be a non-empty guid string
ok chrome@112 (windows 10) -> fetch request using string URL with one parameter on same origin has AJAX request with DT payload -> should be a non-empty traceId string
ok chrome@112 (windows 10) -> captures value -> should be equivalent
# chrome@112 (windows 10) -> empty fetch does not break the agent
ok chrome@112 (windows 10) -> sends interaction id and nodeId -> should be an custom node
# chrome@112 (windows 10) -> hash change during page load
ok chrome@112 (windows 10) -> hash change during page load -> should be truthy
ok chrome@112 (windows 10) -> string error in custom tracer -> error will be reported once
# chrome@112 (windows 10) -> JSONP on initial page load
ok chrome@112 (windows 10) -> JSONP on initial page load -> interaction end time should be >= start
ok chrome@112 (windows 10) -> JSONP on initial page load -> interaaction callback end should be >= interaction start
ok chrome@112 (windows 10) -> JSONP on initial page load -> interaction callback end should be <= interaction end
ok chrome@112 (windows 10) -> JSONP on initial page load -> expected one child node
ok chrome@112 (windows 10) -> JSONP on initial page load -> should be an ajax node
ok chrome@112 (windows 10) -> JSONP on initial page load -> should be a GET request
ok chrome@112 (windows 10) -> JSONP on initial page load -> should have a 200 status
ok chrome@112 (windows 10) -> JSONP on initial page load -> should have a correct hostname
ok chrome@112 (windows 10) -> JSONP on initial page load -> port should be in expected range
ok chrome@112 (windows 10) -> JSONP on initial page load -> should have correct requestBodySize
ok chrome@112 (windows 10) -> JSONP on initial page load -> should have correct responseBodySize
ok chrome@112 (windows 10) -> JSONP on initial page load -> should indicate it was requested with JSONP
# chrome@112 (windows 10) -> second: 1
ok chrome@112 (windows 10) -> second: 1 -> expected at least one child node
ok chrome@112 (windows 10) -> second: 1 -> xhr must have a child node of tracer
ok chrome@112 (windows 10) -> second: 1 -> tracer should be named tacoTimer
ok chrome@112 (windows 10) -> using SPA API with the lite loader -> callbacks passed to SPA API functions fired
# chrome@112 (windows 10) -> spa page urls include the hash fragment
ok chrome@112 (windows 10) -> node in the middle of tree branch -> there should be no children
# chrome@112 (windows 10) -> First paint for supported browsers
ok chrome@112 (windows 10) -> error on the initial page load -> should not have parent id
# chrome@112 (windows 10) -> First contentful paint for supported browsers
ok chrome@112 (windows 10) -> Obfuscate All Events -> Timings query -- fakeid was obfuscated
# chrome@112 (windows 10) -> JSONP with non-JSON response
ok chrome@112 (windows 10) -> JSONP with non-JSON response -> should have a 200 status
ok chrome@112 (windows 10) -> JSONP with non-JSON response -> should have correct requestBodySize
ok chrome@112 (windows 10) -> JSONP with non-JSON response -> should have correct responseBodySize
ok chrome@112 (windows 10) -> DT payload is NOT added when the feature is not enabled (default) -> should not have a timestamp
# chrome@112 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event
ok chrome@112 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event -> initial page load should be tracked with an interaction
ok chrome@112 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event -> expect one child node
ok chrome@112 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event -> expect one custom end node
ok chrome@112 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event -> The interaction does not include a route change.
ok chrome@112 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event -> interaction end time should be >= start
ok chrome@112 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event -> interaaction callback end should be >= interaction start
ok chrome@112 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event -> interaction callback end should be <= interaction end
ok chrome@112 (windows 10) -> First paint for spa agent -> firstPaint is a positive value
# chrome@112 (windows 10) -> capturing SPA interactions
ok chrome@112 (windows 10) -> capturing SPA interactions -> initial page load should be tracked with an interaction
ok chrome@112 (windows 10) -> capturing SPA interactions -> expect 2 xhr children
ok chrome@112 (windows 10) -> capturing SPA interactions -> first child should be an ajax
ok chrome@112 (windows 10) -> capturing SPA interactions -> second child should be an ajax
ok chrome@112 (windows 10) -> errors in discarded SPA interactions -> should not have parent node id
# chrome@112 (windows 10) -> two JSONP events
ok chrome@112 (windows 10) -> two JSONP events -> interaction end time should be >= start
ok chrome@112 (windows 10) -> two JSONP events -> interaaction callback end should be >= interaction start
ok chrome@112 (windows 10) -> two JSONP events -> interaction callback end should be <= interaction end
ok chrome@112 (windows 10) -> two JSONP events -> expected two child nodes
ok chrome@112 (windows 10) -> two JSONP events -> should be an ajax node
ok chrome@112 (windows 10) -> two JSONP events -> expected one child node
ok chrome@112 (windows 10) -> two JSONP events -> child must be a custom tracer
ok chrome@112 (windows 10) -> two JSONP events -> tracer should be named tacoTimer
ok chrome@112 (windows 10) -> two JSONP events -> should not have nested children
ok chrome@112 (windows 10) -> two JSONP events -> should be an ajax node
ok chrome@112 (windows 10) -> two JSONP events -> expected one child node
ok chrome@112 (windows 10) -> two JSONP events -> child must be a custom tracer
ok chrome@112 (windows 10) -> two JSONP events -> tracer should be named tacoTimer
ok chrome@112 (windows 10) -> fetch request using string URL with two parameters on same origin has AJAX request with DT payload -> should be a non-zero timestamp
# chrome@112 (windows 10) -> JSONP with error
ok chrome@112 (windows 10) -> JSONP with error -> xhr node should exist
ok chrome@112 (windows 10) -> JSONP with error -> should have a 0 status
ok chrome@112 (windows 10) -> JSONP with error -> should have correct requestBodySize
ok chrome@112 (windows 10) -> JSONP with error -> should have correct responseBodySize
ok chrome@112 (windows 10) -> rum loader: LCP is not collected on hidden page -> did NOT find a LCP timing
# chrome@112 (windows 10) -> onreadystatechange only called once with zone.js
ok chrome@112 (windows 10) -> onreadystatechange only called once with zone.js -> initial page load should be tracked with an interaction
ok chrome@112 (windows 10) -> onreadystatechange only called once with zone.js -> expect counts child from API
ok chrome@112 (windows 10) -> onreadystatechange only called once with zone.js -> The interaction does not include a route change.
ok chrome@112 (windows 10) -> onreadystatechange only called once with zone.js -> should be equal
ok chrome@112 (windows 10) -> onreadystatechange only called once with zone.js -> state 1 and 3 may be called more than once
ok chrome@112 (windows 10) -> onreadystatechange only called once with zone.js -> state 1 and 3 may be called more than once
ok chrome@112 (windows 10) -> onreadystatechange only called once with zone.js -> state 2 and 4 should be called exactly once
ok chrome@112 (windows 10) -> onreadystatechange only called once with zone.js -> state 1 and 3 may be called more than once
ok chrome@112 (windows 10) -> Disabled timings feature -> no events harvest
# chrome@112 (windows 10) -> incorrect timer
ok chrome@112 (windows 10) -> error in xhr -> error should have been reported only once
# chrome@112 (windows 10) -> navTiming on initialPageLoad
ok chrome@112 (windows 10) -> navTiming on initialPageLoad -> initial page load should be tracked with an interaction
ok chrome@112 (windows 10) -> navTiming on initialPageLoad -> expect no child nodes
ok chrome@112 (windows 10) -> navTiming on initialPageLoad -> The interaction does not include a route change.
ok chrome@112 (windows 10) -> navTiming on initialPageLoad -> should be triggered by click
ok chrome@112 (windows 10) -> capturing SPA interactions -> estimated ixn start before receipt time
# chrome@112 (windows 10) -> jQuery
ok chrome@112 (windows 10) -> jQuery -> interaction end time should be >= start
ok chrome@112 (windows 10) -> jQuery -> interaaction callback end should be >= interaction start
ok chrome@112 (windows 10) -> jQuery -> interaction callback end should be <= interaction end
ok chrome@112 (windows 10) -> jQuery -> expected one child node
ok chrome@112 (windows 10) -> jQuery -> should be an ajax node
ok chrome@112 (windows 10) -> jQuery -> should be a GET request
ok chrome@112 (windows 10) -> jQuery -> should have a 200 status
ok chrome@112 (windows 10) -> jQuery -> should have a correct hostname
ok chrome@112 (windows 10) -> jQuery -> port should be in expected range
ok chrome@112 (windows 10) -> jQuery -> should have correct requestBodySize
ok chrome@112 (windows 10) -> jQuery -> should have correct responseBodySize
ok chrome@112 (windows 10) -> jQuery -> should indicate it was requested with JSONP
ok chrome@112 (windows 10) -> jQuery -> expected one child node
ok chrome@112 (windows 10) -> jQuery -> child must be a custom tracer
ok chrome@112 (windows 10) -> jQuery -> tracer should be named tacoTimer
ok chrome@112 (windows 10) -> multiple custom interactions have correct customEnd value -> interaction custom end time is equal to or greater than interaction end time
# chrome@112 (windows 10) -> route change interactions should not contain paint metrics values
ok chrome@112 (windows 10) -> route change interactions should not contain paint metrics values -> should be route change interaction
ok chrome@112 (windows 10) -> route change interactions should not contain paint metrics values -> firstPaint should not exist
ok chrome@112 (windows 10) -> promise wrapper should support instanceof comparison -> async function returned promise is an instance of global Promise
# chrome@112 (windows 10) -> MooTools
ok chrome@112 (windows 10) -> MooTools -> interaction end time should be >= start
ok chrome@112 (windows 10) -> MooTools -> interaaction callback end should be >= interaction start
ok chrome@112 (windows 10) -> MooTools -> interaction callback end should be <= interaction end
ok chrome@112 (windows 10) -> MooTools -> expected one child node
ok chrome@112 (windows 10) -> MooTools -> should be an ajax node
ok chrome@112 (windows 10) -> MooTools -> should be a GET request
ok chrome@112 (windows 10) -> MooTools -> should have a 200 status
ok chrome@112 (windows 10) -> MooTools -> should have a correct hostname
ok chrome@112 (windows 10) -> MooTools -> port should be in expected range
ok chrome@112 (windows 10) -> MooTools -> should have correct requestBodySize
ok chrome@112 (windows 10) -> MooTools -> should have correct responseBodySize
ok chrome@112 (windows 10) -> MooTools -> should indicate it was requested with JSONP
ok chrome@112 (windows 10) -> MooTools -> expected one child node
ok chrome@112 (windows 10) -> MooTools -> child must be a custom tracer
ok chrome@112 (windows 10) -> MooTools -> tracer should be named tacoTimer
ok chrome@112 (windows 10) -> fetch request using string URL with one parameter on same origin has AJAX request with DT payload -> should be a non-zero timestamp
# chrome@112 (windows 10) -> ensure scroll listener IS passive if supported
ok chrome@112 (windows 10) -> spa loader: LCP is not collected on hidden page -> did NOT find a LCP timing
# chrome@112 (windows 10) -> DT payload is NOT added when the feature is not enabled (default)
ok chrome@112 (windows 10) -> DT payload is NOT added when the feature is not enabled (default) -> expected one child node
ok chrome@112 (windows 10) -> DT payload is NOT added when the feature is not enabled (default) -> should not have a guid
ok chrome@112 (windows 10) -> DT payload is NOT added when the feature is not enabled (default) -> should not have a traceId
ok chrome@112 (windows 10) -> set custom attribute before page load after loader before info (spa) (retry 1) -> first error should have a custom parameter set with the expected value
# chrome@112 (windows 10) -> XHR request on same origin has AJAX request with DT payload
ok chrome@112 (windows 10) -> XHR request on same origin has AJAX request with DT payload -> expected one child node
ok chrome@112 (windows 10) -> XHR request on same origin has AJAX request with DT payload -> should be a non-empty guid string
ok chrome@112 (windows 10) -> XHR request on same origin has AJAX request with DT payload -> should be a non-empty traceId string
ok chrome@112 (windows 10) -> error in root node -> should not have parent id
# chrome@112 (windows 10) -> basic
ok chrome@112 (windows 10) -> basic -> interaction end time should be >= start
ok chrome@112 (windows 10) -> basic -> interaaction callback end should be >= interaction start
ok chrome@112 (windows 10) -> basic -> interaction callback end should be <= interaction end
ok chrome@112 (windows 10) -> basic -> expected one child node
ok chrome@112 (windows 10) -> basic -> should be an ajax node
ok chrome@112 (windows 10) -> basic -> should be a GET request
ok chrome@112 (windows 10) -> basic -> should have a 200 status
ok chrome@112 (windows 10) -> basic -> should have a correct hostname
ok chrome@112 (windows 10) -> basic -> port should be in expected range
ok chrome@112 (windows 10) -> basic -> should have correct requestBodySize
ok chrome@112 (windows 10) -> basic -> should have correct responseBodySize
ok chrome@112 (windows 10) -> basic -> should indicate it was requested with JSONP
ok chrome@112 (windows 10) -> basic -> expected one child node
ok chrome@112 (windows 10) -> basic -> child must be a custom tracer
ok chrome@112 (windows 10) -> basic -> tracer should be named tacoTimer
ok chrome@112 (windows 10) -> errors outside of interaction -> should not have parent node id
# chrome@112 (windows 10) -> XHR request on different origin has no AJAX request with DT payload
ok chrome@112 (windows 10) -> XHR request on different origin has no AJAX request with DT payload -> expected one child node
ok chrome@112 (windows 10) -> XHR request on different origin has no AJAX request with DT payload -> should not have a guid
ok chrome@112 (windows 10) -> XHR request on different origin has no AJAX request with DT payload -> should not have a traceId
ok chrome@112 (windows 10) -> error in custom tracer -> error should have been reported only once
# chrome@112 (windows 10) -> Angular v1.x
ok chrome@112 (windows 10) -> Angular v1.x -> interaction end time should be >= start
ok chrome@112 (windows 10) -> Angular v1.x -> interaaction callback end should be >= interaction start
ok chrome@112 (windows 10) -> Angular v1.x -> interaction callback end should be <= interaction end
ok chrome@112 (windows 10) -> Angular v1.x -> expected one child node
ok chrome@112 (windows 10) -> Angular v1.x -> should be an ajax node
ok chrome@112 (windows 10) -> Angular v1.x -> should be a GET request
ok chrome@112 (windows 10) -> Angular v1.x -> should have a 200 status
ok chrome@112 (windows 10) -> Angular v1.x -> should have a correct hostname
ok chrome@112 (windows 10) -> Angular v1.x -> port should be in expected range
ok chrome@112 (windows 10) -> Angular v1.x -> should have correct requestBodySize
ok chrome@112 (windows 10) -> Angular v1.x -> should have correct responseBodySize
ok chrome@112 (windows 10) -> Angular v1.x -> should indicate it was requested with JSONP
ok chrome@112 (windows 10) -> Angular v1.x -> expected one child node
ok chrome@112 (windows 10) -> Angular v1.x -> child must be a custom tracer
ok chrome@112 (windows 10) -> Angular v1.x -> tracer should be named tacoTimer
ok chrome@112 (windows 10) -> First paint for rum agent -> firstPaint is a positive value
# chrome@112 (windows 10) -> interactions wait for external scripts to complete
ok chrome@112 (windows 10) -> interactions wait for external scripts to complete -> start is present
ok chrome@112 (windows 10) -> interactions wait for external scripts to complete -> end is present
ok chrome@112 (windows 10) -> First contentful paint for spa agent -> firstContentfulPaint is a positive value
# chrome@112 (windows 10) -> ajax call in loaded script extends interaction
ok chrome@112 (windows 10) -> ajax call in loaded script extends interaction -> should have one child for ajax
ok chrome@112 (windows 10) -> ajax call in loaded script extends interaction -> should be equal
ok chrome@112 (windows 10) -> ajax call in loaded script extends interaction -> start is present
ok chrome@112 (windows 10) -> ajax call in loaded script extends interaction -> end is present
ok chrome@112 (windows 10) -> First contentful paint for supported browsers -> firstContentfulPaint has positive value
# chrome@112 (windows 10) -> posts session traces
ok chrome@112 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event -> expected one child node
# chrome@112 (windows 10) -> posts session traces when xhr is runtime patched
ok chrome@112 (windows 10) -> posts session traces when xhr is runtime patched -> Got start time 1682813340953
ok chrome@112 (windows 10) -> fetch request using object URL on same origin has AJAX request with DT payload -> should be a non-zero timestamp
# chrome@112 (windows 10) -> capturing SPA interactions with zone.js
ok chrome@112 (windows 10) -> capturing SPA interactions with zone.js -> initial page load should be tracked with an interaction
ok chrome@112 (windows 10) -> capturing SPA interactions with zone.js -> expect no child nodes
ok chrome@112 (windows 10) -> capturing SPA interactions with zone.js -> The interaction does not include a route change.
ok chrome@112 (windows 10) -> capturing SPA interactions with zone.js -> interaction end time should be >= start
ok chrome@112 (windows 10) -> capturing SPA interactions with zone.js -> expected one child node
ok chrome@112 (windows 10) -> capturing SPA interactions with zone.js -> estimated ixn start after test start
ok chrome@112 (windows 10) -> First contentful paint for rum agent -> firstContentfulPaint is a positive value
# chrome@112 (windows 10) -> errored script
ok chrome@112 (windows 10) -> errored script -> start is present
ok chrome@112 (windows 10) -> errored script -> end is present
ok chrome@112 (windows 10) -> two JSONP events -> should not have nested children
# chrome@112 (windows 10) -> Loading RequireJS does not cause errors.
ok chrome@112 (windows 10) -> capturing SPA interactions using loader_config data -> estimated ixn start before receipt time
# chrome@112 (windows 10) -> JSONP timings
ok chrome@112 (windows 10) -> JSONP timings -> xhr node should exist
ok chrome@112 (windows 10) -> JSONP timings -> asyncTime is bigger than 1s
ok chrome@112 (windows 10) -> JSONP timings -> syncTime is bigger than 1s
ok chrome@112 (windows 10) -> JSONP timings -> total duration is bigger than async time
ok chrome@112 (windows 10) -> JSONP timings -> total duration is bigger than sync time
ok chrome@112 (windows 10) -> MooTools -> should not have nested children
# chrome@112 (windows 10) -> classic - finished records a PageAction
ok chrome@112 (windows 10) -> classic - finished records a PageAction -> exactly 1 PageAction was submitted
ok chrome@112 (windows 10) -> capturing fetch in SPA interactions -> estimated ixn start before receipt time
# chrome@112 (windows 10) -> session trace resources
ok chrome@112 (windows 10) -> session trace resources -> server responded with 200
ok chrome@112 (windows 10) -> session trace resources -> server responded with 200
# chrome@112 (windows 10) -> browser/spa/fetch-body-propagation.browser.js (retry 2)
# chrome@112 (windows 10) -> Response.arrayBuffer
ok chrome@112 (windows 10) -> Response.arrayBuffer -> interaction should be null at first
ok chrome@112 (windows 10) -> Response.arrayBuffer -> resTime should be after we got response
ok chrome@112 (windows 10) -> Response.arrayBuffer -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> Response.arrayBuffer -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> Response.arrayBuffer -> node should have children
ok chrome@112 (windows 10) -> Response.arrayBuffer -> type should match
ok chrome@112 (windows 10) -> Response.arrayBuffer -> node should have expected number of children
ok chrome@112 (windows 10) -> Response.arrayBuffer -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> Response.arrayBuffer -> interaction node has end time >= start
ok chrome@112 (windows 10) -> Response.arrayBuffer -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> Response.arrayBuffer -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> Response.arrayBuffer -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Response.arrayBuffer -> isFetch in attrs should match
ok chrome@112 (windows 10) -> Response.arrayBuffer -> node should have children
ok chrome@112 (windows 10) -> Response.arrayBuffer -> type should match
ok chrome@112 (windows 10) -> Response.arrayBuffer -> node should have expected number of children
ok chrome@112 (windows 10) -> Response.arrayBuffer -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> Response.arrayBuffer -> ajax node has end time >= start
ok chrome@112 (windows 10) -> Response.arrayBuffer -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> Response.arrayBuffer -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> Response.arrayBuffer -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Response.arrayBuffer -> name in attrs should match
ok chrome@112 (windows 10) -> Response.arrayBuffer -> node should have children
ok chrome@112 (windows 10) -> Response.arrayBuffer -> type should match
ok chrome@112 (windows 10) -> Response.arrayBuffer -> node should have expected number of children
ok chrome@112 (windows 10) -> Response.arrayBuffer -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Response.arrayBuffer -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Response.arrayBuffer -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Response.arrayBuffer -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Response.arrayBuffer -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Response.arrayBuffer -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> Response.arrayBuffer -> should have correct end Time
# chrome@112 (windows 10) -> Response.blob
ok chrome@112 (windows 10) -> Response.blob -> interaction should be null at first
ok chrome@112 (windows 10) -> Response.blob -> resTime should be after we got response
ok chrome@112 (windows 10) -> Response.blob -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> Response.blob -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> Response.blob -> node should have children
ok chrome@112 (windows 10) -> Response.blob -> type should match
ok chrome@112 (windows 10) -> Response.blob -> node should have expected number of children
ok chrome@112 (windows 10) -> Response.blob -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> Response.blob -> interaction node has end time >= start
ok chrome@112 (windows 10) -> Response.blob -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> Response.blob -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> Response.blob -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Response.blob -> isFetch in attrs should match
ok chrome@112 (windows 10) -> Response.blob -> node should have children
ok chrome@112 (windows 10) -> Response.blob -> type should match
ok chrome@112 (windows 10) -> Response.blob -> node should have expected number of children
ok chrome@112 (windows 10) -> Response.blob -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> Response.blob -> ajax node has end time >= start
ok chrome@112 (windows 10) -> Response.blob -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> Response.blob -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> Response.blob -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Response.blob -> name in attrs should match
ok chrome@112 (windows 10) -> Response.blob -> node should have children
ok chrome@112 (windows 10) -> Response.blob -> type should match
ok chrome@112 (windows 10) -> Response.blob -> node should have expected number of children
ok chrome@112 (windows 10) -> Response.blob -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Response.blob -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Response.blob -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Response.blob -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Response.blob -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Response.blob -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> Response.blob -> should have correct end Time
# chrome@112 (windows 10) -> Response.json
ok chrome@112 (windows 10) -> Response.json -> interaction should be null at first
ok chrome@112 (windows 10) -> Response.json -> resTime should be after we got response
ok chrome@112 (windows 10) -> Response.json -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> Response.json -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> Response.json -> node should have children
ok chrome@112 (windows 10) -> Response.json -> type should match
ok chrome@112 (windows 10) -> Response.json -> node should have expected number of children
ok chrome@112 (windows 10) -> Response.json -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> Response.json -> interaction node has end time >= start
ok chrome@112 (windows 10) -> Response.json -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> Response.json -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> Response.json -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Response.json -> isFetch in attrs should match
ok chrome@112 (windows 10) -> Response.json -> node should have children
ok chrome@112 (windows 10) -> Response.json -> type should match
ok chrome@112 (windows 10) -> Response.json -> node should have expected number of children
ok chrome@112 (windows 10) -> Response.json -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> Response.json -> ajax node has end time >= start
ok chrome@112 (windows 10) -> Response.json -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> Response.json -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> Response.json -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Response.json -> name in attrs should match
ok chrome@112 (windows 10) -> Response.json -> node should have children
ok chrome@112 (windows 10) -> Response.json -> type should match
ok chrome@112 (windows 10) -> Response.json -> node should have expected number of children
ok chrome@112 (windows 10) -> Response.json -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Response.json -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Response.json -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Response.json -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Response.json -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Response.json -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> Response.json -> should have correct end Time
# chrome@112 (windows 10) -> Response.text
ok chrome@112 (windows 10) -> Response.text -> interaction should be null at first
ok chrome@112 (windows 10) -> Response.text -> resTime should be after we got response
ok chrome@112 (windows 10) -> Response.text -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> Response.text -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> Response.text -> node should have children
ok chrome@112 (windows 10) -> Response.text -> type should match
ok chrome@112 (windows 10) -> Response.text -> node should have expected number of children
ok chrome@112 (windows 10) -> Response.text -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> Response.text -> interaction node has end time >= start
ok chrome@112 (windows 10) -> Response.text -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> Response.text -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> Response.text -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Response.text -> isFetch in attrs should match
ok chrome@112 (windows 10) -> Response.text -> node should have children
ok chrome@112 (windows 10) -> Response.text -> type should match
ok chrome@112 (windows 10) -> Response.text -> node should have expected number of children
ok chrome@112 (windows 10) -> Response.text -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> Response.text -> ajax node has end time >= start
ok chrome@112 (windows 10) -> Response.text -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> Response.text -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> Response.text -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Response.text -> name in attrs should match
ok chrome@112 (windows 10) -> Response.text -> node should have children
ok chrome@112 (windows 10) -> Response.text -> type should match
ok chrome@112 (windows 10) -> Response.text -> node should have expected number of children
ok chrome@112 (windows 10) -> Response.text -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Response.text -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Response.text -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Response.text -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Response.text -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Response.text -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> Response.text -> should have correct end Time
# chrome@112 (windows 10) -> Exceeding max SPA nodes
ok chrome@112 (windows 10) -> Exceeding max SPA nodes -> interaction should be null at first
# chrome@112 (windows 10) -> Response.formData
ok chrome@112 (windows 10) -> Response.formData -> interaction should be null at first
ok chrome@112 (windows 10) -> Response.formData -> resTime should be after res was received
ok chrome@112 (windows 10) -> Response.formData -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> Response.formData -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> Response.formData -> node should have children
ok chrome@112 (windows 10) -> Response.formData -> type should match
ok chrome@112 (windows 10) -> Response.formData -> node should have expected number of children
ok chrome@112 (windows 10) -> Response.formData -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> Response.formData -> interaction node has end time >= start
ok chrome@112 (windows 10) -> Response.formData -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> Response.formData -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> Response.formData -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Response.formData -> isFetch in attrs should match
ok chrome@112 (windows 10) -> Response.formData -> node should have children
ok chrome@112 (windows 10) -> Response.formData -> type should match
ok chrome@112 (windows 10) -> Response.formData -> node should have expected number of children
ok chrome@112 (windows 10) -> Response.formData -> ajax node has non-zero start time
ok chrome@112 (windows 10) -> Response.formData -> ajax node has end time >= start
ok chrome@112 (windows 10) -> Response.formData -> ajax node has a callback time >= 0
ok chrome@112 (windows 10) -> Response.formData -> ajax node has a callback end time >= start
ok chrome@112 (windows 10) -> Response.formData -> ajax jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Response.formData -> name in attrs should match
ok chrome@112 (windows 10) -> Response.formData -> node should have children
ok chrome@112 (windows 10) -> Response.formData -> type should match
ok chrome@112 (windows 10) -> Response.formData -> node should have expected number of children
ok chrome@112 (windows 10) -> Response.formData -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Response.formData -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Response.formData -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Response.formData -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Response.formData -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Response.formData -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> Response.formData -> should have correct end Time
# chrome@112 (windows 10) -> Request.arrayBuffer
ok chrome@112 (windows 10) -> Request.arrayBuffer -> interaction should be null at first
ok chrome@112 (windows 10) -> Request.arrayBuffer -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> Request.arrayBuffer -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> Request.arrayBuffer -> node should have children
ok chrome@112 (windows 10) -> Request.arrayBuffer -> type should match
ok chrome@112 (windows 10) -> Request.arrayBuffer -> node should have expected number of children
ok chrome@112 (windows 10) -> Request.arrayBuffer -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> Request.arrayBuffer -> interaction node has end time >= start
ok chrome@112 (windows 10) -> Request.arrayBuffer -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> Request.arrayBuffer -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> Request.arrayBuffer -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Request.arrayBuffer -> name in attrs should match
ok chrome@112 (windows 10) -> Request.arrayBuffer -> node should have children
ok chrome@112 (windows 10) -> Request.arrayBuffer -> type should match
ok chrome@112 (windows 10) -> Request.arrayBuffer -> node should have expected number of children
ok chrome@112 (windows 10) -> Request.arrayBuffer -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Request.arrayBuffer -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Request.arrayBuffer -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Request.arrayBuffer -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Request.arrayBuffer -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Request.arrayBuffer -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> Request.arrayBuffer -> should have correct end Time
# chrome@112 (windows 10) -> Request.blob
ok chrome@112 (windows 10) -> Request.blob -> interaction should be null at first
ok chrome@112 (windows 10) -> Request.blob -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> Request.blob -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> Request.blob -> node should have children
ok chrome@112 (windows 10) -> Request.blob -> type should match
ok chrome@112 (windows 10) -> Request.blob -> node should have expected number of children
ok chrome@112 (windows 10) -> Request.blob -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> Request.blob -> interaction node has end time >= start
ok chrome@112 (windows 10) -> Request.blob -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> Request.blob -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> Request.blob -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Request.blob -> name in attrs should match
ok chrome@112 (windows 10) -> Request.blob -> node should have children
ok chrome@112 (windows 10) -> Request.blob -> type should match
ok chrome@112 (windows 10) -> Request.blob -> node should have expected number of children
ok chrome@112 (windows 10) -> Request.blob -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Request.blob -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Request.blob -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Request.blob -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Request.blob -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Request.blob -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> Request.blob -> should have correct end Time
# chrome@112 (windows 10) -> Request.json
ok chrome@112 (windows 10) -> Request.json -> interaction should be null at first
ok chrome@112 (windows 10) -> Request.json -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> Request.json -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> Request.json -> node should have children
ok chrome@112 (windows 10) -> Request.json -> type should match
ok chrome@112 (windows 10) -> Request.json -> node should have expected number of children
ok chrome@112 (windows 10) -> Request.json -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> Request.json -> interaction node has end time >= start
ok chrome@112 (windows 10) -> Request.json -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> Request.json -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> Request.json -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Request.json -> name in attrs should match
ok chrome@112 (windows 10) -> Request.json -> node should have children
ok chrome@112 (windows 10) -> Request.json -> type should match
ok chrome@112 (windows 10) -> Request.json -> node should have expected number of children
ok chrome@112 (windows 10) -> Request.json -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Request.json -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Request.json -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Request.json -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Request.json -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Request.json -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> Request.json -> should have correct end Time
# chrome@112 (windows 10) -> Request.text
ok chrome@112 (windows 10) -> Request.text -> interaction should be null at first
ok chrome@112 (windows 10) -> Request.text -> interaction should be finished and have an end time
ok chrome@112 (windows 10) -> Request.text -> interaction should be null outside of async chain
ok chrome@112 (windows 10) -> Request.text -> node should have children
ok chrome@112 (windows 10) -> Request.text -> type should match
ok chrome@112 (windows 10) -> Request.text -> node should have expected number of children
ok chrome@112 (windows 10) -> Request.text -> interaction node has non-zero start time
ok chrome@112 (windows 10) -> Request.text -> interaction node has end time >= start
ok chrome@112 (windows 10) -> Request.text -> interaction node has a callback time >= 0
ok chrome@112 (windows 10) -> Request.text -> interaction node has a callback end time >= start
ok chrome@112 (windows 10) -> Request.text -> interaction jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Request.text -> name in attrs should match
ok chrome@112 (windows 10) -> Request.text -> node should have children
ok chrome@112 (windows 10) -> Request.text -> type should match
ok chrome@112 (windows 10) -> Request.text -> node should have expected number of children
ok chrome@112 (windows 10) -> Request.text -> customTracer node has non-zero start time
ok chrome@112 (windows 10) -> Request.text -> customTracer node has end time >= start
ok chrome@112 (windows 10) -> Request.text -> customTracer node has a callback time >= 0
ok chrome@112 (windows 10) -> Request.text -> customTracer node has a callback end time >= start
ok chrome@112 (windows 10) -> Request.text -> customTracer jsEnd - jsTime <= start
ok chrome@112 (windows 10) -> Request.text -> root node should have an end time >= than its start time + all sync js time
ok chrome@112 (windows 10) -> Request.text -> should have correct end Time
# chrome@112 (windows 10) -> tests 249
# chrome@112 (windows 10) -> pass  249
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> basic -> should not have nested children
# chrome@112 (windows 10) -> classic - referrer attr is sent in the query string & does not include query params
ok chrome@112 (windows 10) -> classic - referrer attr is sent in the query string & does not include query params -> The query string should include the ref attribute.
ok chrome@112 (windows 10) -> XHR request on different origin has no AJAX request with DT payload -> should not have a timestamp
# chrome@112 (windows 10) -> classic - session tracking (enabled by default) is in query string attributes
ok chrome@112 (windows 10) -> classic - session tracking (enabled by default) is in query string attributes -> The cookie flag ('ck') should equal 0.
ok chrome@112 (windows 10) -> Angular v1.x -> should not have nested children
# chrome@112 (windows 10) -> classic - Obfuscate All Events
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> AJAX payload exists
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> AJAX -- pii was obfuscated
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> AJAX -- bam-test was obfuscated
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> AJAX -- fakeid was obfuscated
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> Errors payload exists
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> Errors -- pii was obfuscated
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> Errors -- bam-test was obfuscated
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> Errors -- fakeid was obfuscated
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> INS body payload exists
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> INS body -- pii was obfuscated
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> INS body -- bam-test was obfuscated
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> INS body -- fakeid was obfuscated
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> Errors query payload exists
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> Errors query -- pii was obfuscated
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> Errors query -- bam-test was obfuscated
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> Errors query -- fakeid was obfuscated
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> INS query payload exists
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> INS query -- pii was obfuscated
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> INS query -- bam-test was obfuscated
ok chrome@112 (windows 10) -> does not capture body text -> expected no child nodes
# chrome@112 (windows 10) -> events are retried when collector returns 429
ok chrome@112 (windows 10) -> events are retried when collector returns 429 -> server responded with 429
ok chrome@112 (windows 10) -> events are retried when collector returns 429 -> got two events harvest requests
ok chrome@112 (windows 10) -> events are retried when collector returns 429 -> server responded with 200
ok chrome@112 (windows 10) -> capturing SPA interactions with zone.js -> estimated ixn start before receipt time
# chrome@112 (windows 10) -> module - referrer attr is sent in the query string & does not include query params
ok chrome@112 (windows 10) -> module - referrer attr is sent in the query string & does not include query params -> The query string should include the ref attribute.
ok chrome@112 (windows 10) -> JSONP with non-JSON response -> should indicate it was requested with JSONP
# chrome@112 (windows 10) -> session trace resources
ok chrome@112 (windows 10) -> session trace resources -> server responded with 200
ok chrome@112 (windows 10) -> session trace resources -> got two harvest requests
ok chrome@112 (windows 10) -> session trace resources -> server responded with 200
ok chrome@112 (windows 10) -> session trace resources -> there is at least one resource node
ok chrome@112 (windows 10) -> errored script -> ajax in script should increase duration of the interaction
# chrome@112 (windows 10) -> module - session tracking (enabled by default) is in query string attributes
ok chrome@112 (windows 10) -> module - session tracking (enabled by default) is in query string attributes -> The cookie flag ('ck') should equal 0.
ok chrome@112 (windows 10) -> click interaction: attributes captured in discarded interaction are still collected (retry 1) -> first error should have a custom parameter set with the expected value
# chrome@112 (windows 10) -> PageAction submission
ok chrome@112 (windows 10) -> PageAction submission -> should have 1 event
ok chrome@112 (windows 10) -> PageAction submission -> event has correct action name
ok chrome@112 (windows 10) -> PageAction submission -> event has free tacos
ok chrome@112 (windows 10) -> PageAction submission -> harvest time (31866) should always be bigger than event time (1893)
ok chrome@112 (windows 10) -> RUM -> The agent was unconfigured, so no rum event fired!
# chrome@112 (windows 10) -> response size
# chrome@112 (windows 10) -> response size (retry 1)
# chrome@112 (windows 10) -> with request that returns content-length header
ok chrome@112 (windows 10) -> with request that returns content-length header -> should have correct responseBodySize
# chrome@112 (windows 10) -> with request without content-length header
ok chrome@112 (windows 10) -> capturing SPA interactions -> The interaction does not include a route change.
# chrome@112 (windows 10) -> jspdf generation should not cause error
ok chrome@112 (windows 10) -> agent either runs or fails gracefully -> window.someOutput was able to run (true), even though errorsSeen was false
# chrome@112 (windows 10) -> precedence
ok chrome@112 (windows 10) -> precedence -> should have 1 event
ok chrome@112 (windows 10) -> precedence -> event has correct action name
ok chrome@112 (windows 10) -> precedence -> defaults has correct precedence
ok chrome@112 (windows 10) -> precedence -> att has correct precedence
ok chrome@112 (windows 10) -> precedence -> attributes has correct precedence
ok chrome@112 (windows 10) -> XHR request on same origin has AJAX request with DT payload -> should be a non-zero timestamp
# chrome@112 (windows 10) -> classic - no query param when release is not set
ok chrome@112 (windows 10) -> DT payload is NOT added when the feature is not enabled (default) -> should not have a timestamp
# chrome@112 (windows 10) -> classic - release api limits the length of tags
ok chrome@112 (windows 10) -> classic - release api limits the length of tags -> twoHundredCharacterString should be 200 characters but is 200
ok chrome@112 (windows 10) -> ensure scroll listener IS passive if supported -> should be truthy
# chrome@112 (windows 10) -> classic - release api adds tags to jserrors (with tags limit)
ok chrome@112 (windows 10) -> posts session traces -> stn body contains no negative timings
# chrome@112 (windows 10) -> module - release api limits the length of tags
ok chrome@112 (windows 10) -> module - release api limits the length of tags -> twoHundredCharacterString should be 200 characters but is 200
ok chrome@112 (windows 10) -> posts session traces when xhr is runtime patched -> No ptid on first harvest
# chrome@112 (windows 10) -> module - no query param when release is not set
ok chrome@112 (windows 10) -> ajax call in loaded script extends interaction -> interaction end should be same or higher than the delayed ajax
# chrome@112 (windows 10) -> module - release api adds tags to jserrors (with tags limit)
ok chrome@112 (windows 10) -> fetch request on different origin has no AJAX request with DT payload -> should not have a timestamp
# chrome@112 (windows 10) -> session trace ajax deny list
ok chrome@112 (windows 10) -> session trace ajax deny list -> server responded with 200
ok chrome@112 (windows 10) -> session trace ajax deny list -> server responded with 200
ok chrome@112 (windows 10) -> agent set nav cookie when page is unloading -> received ins harvest
# chrome@112 (windows 10) -> rum loader: LCP is not collected after pageHide
# chrome@112 (windows 10) -> rum loader: LCP is not collected after pageHide (retry 2)
ok chrome@112 (windows 10) -> rum loader: LCP is not collected after pageHide (retry 2) -> found an LCP timing
ok chrome@112 (windows 10) -> rum loader: LCP is not collected after pageHide (retry 2) -> LCP has attributes
ok chrome@112 (windows 10) -> hash change during page load -> initial page load should be tracked with an interaction
# chrome@112 (windows 10) -> session traces are retried when collector returns 429 during first harvest
ok chrome@112 (windows 10) -> session traces are retried when collector returns 429 during first harvest -> server responded with 429
ok chrome@112 (windows 10) -> session traces are retried when collector returns 429 during first harvest -> got two harvest requests
ok chrome@112 (windows 10) -> session traces are retried when collector returns 429 during first harvest -> second try has more nodes than first
ok chrome@112 (windows 10) -> session traces are retried when collector returns 429 during first harvest -> all nodes have been resent
ok chrome@112 (windows 10) -> same error in multiple interactions -> should be linked to two different browser interactions
# chrome@112 (windows 10) -> errors get to session traces
ok chrome@112 (windows 10) -> errors get to session traces -> Has an error
ok chrome@112 (windows 10) -> errors get to session traces -> should be equal
ok chrome@112 (windows 10) -> empty fetch does not break the agent -> events received
# chrome@112 (windows 10) -> captures callbacks even when window.Event overwritten
ok chrome@112 (windows 10) -> JSONP timings -> end is bigger than start
# chrome@112 (windows 10) -> classic - a reference error generates and sends an error object
ok chrome@112 (windows 10) -> classic - a reference error generates and sends an error object -> Should have 1 error obj
ok chrome@112 (windows 10) -> classic - a reference error generates and sends an error object -> Should have seen 1 error
ok chrome@112 (windows 10) -> classic - a reference error generates and sends an error object -> Should have a valid timestamp
ok chrome@112 (windows 10) -> classic - a reference error generates and sends an error object -> Should be ReferenceError class
ok chrome@112 (windows 10) -> classic - a reference error generates and sends an error object -> Should have message
ok chrome@112 (windows 10) -> classic - a reference error generates and sends an error object -> Should have a stack trace
ok chrome@112 (windows 10) -> NPM agent src -- custom-agent-spa -- sends RUM call -> RUM call was sent
# chrome@112 (windows 10) -> spa loader: LCP is not collected after pageHide
# chrome@112 (windows 10) -> spa loader: LCP is not collected after pageHide (retry 2)
ok chrome@112 (windows 10) -> spa loader: LCP is not collected after pageHide (retry 2) -> found an LCP timing
ok chrome@112 (windows 10) -> spa loader: LCP is not collected after pageHide (retry 2) -> LCP has attributes
ok chrome@112 (windows 10) -> session trace resources -> XMLHttpRequest nodes not captured when ajax instrumentation is disabled
# chrome@112 (windows 10) -> classic - unhandledPromise generates and sends an error object
ok chrome@112 (windows 10) -> classic - finished records a PageAction -> PageAction has actionName = finished
# chrome@112 (windows 10) -> classic - a thrown error generates and sends an error object
ok chrome@112 (windows 10) -> classic - a thrown error generates and sends an error object -> Should have 1 error obj
ok chrome@112 (windows 10) -> classic - a thrown error generates and sends an error object -> Should have seen 1 error
ok chrome@112 (windows 10) -> classic - a thrown error generates and sends an error object -> Should have a valid timestamp
ok chrome@112 (windows 10) -> classic - a thrown error generates and sends an error object -> Should be Error class
ok chrome@112 (windows 10) -> classic - a thrown error generates and sends an error object -> Should have message
ok chrome@112 (windows 10) -> classic - a thrown error generates and sends an error object -> Should have a stack trace
ok chrome@112 (windows 10) -> route change interactions should not contain paint metrics values -> firstContentfulPaint should not exist
# chrome@112 (windows 10) -> module - Distributed Tracing info is added to XHR & fetch ajax events
# chrome@112 (windows 10) -> classic - RangeError generates and sends an error object
ok chrome@112 (windows 10) -> classic - RangeError generates and sends an error object -> Should have 1 error obj
ok chrome@112 (windows 10) -> classic - RangeError generates and sends an error object -> Should have seen 1 error
ok chrome@112 (windows 10) -> classic - RangeError generates and sends an error object -> Should have a valid timestamp
ok chrome@112 (windows 10) -> classic - RangeError generates and sends an error object -> Should be RangeError class
ok chrome@112 (windows 10) -> classic - RangeError generates and sends an error object -> Should have message
ok chrome@112 (windows 10) -> classic - RangeError generates and sends an error object -> Should have a stack trace
ok chrome@112 (windows 10) -> ok -> unit tests passed for browser/spa/fetch-body-propagation.browser.js
# chrome@112 (windows 10) -> classic - SyntaxError generates and sends an error object
ok chrome@112 (windows 10) -> classic - SyntaxError generates and sends an error object -> Should have 1 error obj
ok chrome@112 (windows 10) -> classic - SyntaxError generates and sends an error object -> Should have seen 1 error
ok chrome@112 (windows 10) -> classic - SyntaxError generates and sends an error object -> Should have a valid timestamp
ok chrome@112 (windows 10) -> classic - SyntaxError generates and sends an error object -> Should be SyntaxError class
ok chrome@112 (windows 10) -> classic - SyntaxError generates and sends an error object -> Should have message
ok chrome@112 (windows 10) -> classic - SyntaxError generates and sends an error object -> Should have a stack trace
ok chrome@112 (windows 10) -> First paint for supported browsers -> firstPaint has positive value
# chrome@112 (windows 10) -> posts session traces
ok chrome@112 (windows 10) -> posts session traces -> Got start time 1682813341394
ok chrome@112 (windows 10) -> posts session traces -> No ptid on first harvest
ok chrome@112 (windows 10) -> posts session traces -> custom javascript attributes (on stn first post)
ok chrome@112 (windows 10) -> posts session traces -> ptid on second harvest 123-456
ok chrome@112 (windows 10) -> incorrect timer -> got route change harvest call
# chrome@112 (windows 10) -> classic - Distributed Tracing info is added to XHR & fetch ajax events
# chrome@112 (windows 10) -> classic - Distributed Tracing info is added to XHR & fetch ajax events (retry 1)
ok chrome@112 (windows 10) -> classic - Distributed Tracing info is added to XHR & fetch ajax events (retry 1) -> should be a non-empty guid string
ok chrome@112 (windows 10) -> classic - Distributed Tracing info is added to XHR & fetch ajax events (retry 1) -> should be a non-empty traceId string
ok chrome@112 (windows 10) -> classic - Distributed Tracing info is added to XHR & fetch ajax events (retry 1) -> should be a non-zero timestamp
ok chrome@112 (windows 10) -> classic - Distributed Tracing info is added to XHR & fetch ajax events (retry 1) -> should be a non-empty guid string
ok chrome@112 (windows 10) -> classic - Distributed Tracing info is added to XHR & fetch ajax events (retry 1) -> should be a non-empty traceId string
ok chrome@112 (windows 10) -> classic - Obfuscate All Events -> INS query -- fakeid was obfuscated
# chrome@112 (windows 10) -> classic - max call stack size generates and sends an error object
ok chrome@112 (windows 10) -> classic - referrer attr is sent in the query string & does not include query params -> url in ref query param does not contain query parameters
# chrome@112 (windows 10) -> classic - TypeError generates and sends an error object
ok chrome@112 (windows 10) -> classic - TypeError generates and sends an error object -> Should have 1 error obj
ok chrome@112 (windows 10) -> classic - TypeError generates and sends an error object -> Should have seen 1 error
ok chrome@112 (windows 10) -> classic - TypeError generates and sends an error object -> Should have a valid timestamp
ok chrome@112 (windows 10) -> classic - TypeError generates and sends an error object -> Should be TypeError class
ok chrome@112 (windows 10) -> classic - TypeError generates and sends an error object -> Should have message
ok chrome@112 (windows 10) -> classic - TypeError generates and sends an error object -> Should have a stack trace
ok chrome@112 (windows 10) -> classic - session tracking (enabled by default) is in query string attributes -> The session id attr 's' should exist and have a truthy value.
# chrome@112 (windows 10) -> classic - URIError generates and sends an error object
ok chrome@112 (windows 10) -> classic - URIError generates and sends an error object -> Should have 1 error obj
ok chrome@112 (windows 10) -> classic - URIError generates and sends an error object -> Should have seen 1 error
ok chrome@112 (windows 10) -> classic - URIError generates and sends an error object -> Should have a valid timestamp
ok chrome@112 (windows 10) -> classic - URIError generates and sends an error object -> Should be URIError class
ok chrome@112 (windows 10) -> classic - URIError generates and sends an error object -> Should have message
ok chrome@112 (windows 10) -> classic - URIError generates and sends an error object -> Should have a stack trace
ok chrome@112 (windows 10) -> onreadystatechange only called once with zone.js -> state 2 and 4 should be called exactly once
# chrome@112 (windows 10) -> classic - capturing large payload of XHR ajax events
# chrome@112 (windows 10) -> classic - capturing large payload of XHR ajax events (retry 1)
ok chrome@112 (windows 10) -> events are retried when collector returns 429 -> post body in retry harvest should be the same as in the first harvest
# chrome@112 (windows 10) -> module - a reference error generates and sends an error object
ok chrome@112 (windows 10) -> module - a reference error generates and sends an error object -> Should have 1 error obj
ok chrome@112 (windows 10) -> module - a reference error generates and sends an error object -> Should have seen 1 error
ok chrome@112 (windows 10) -> module - a reference error generates and sends an error object -> Should have a valid timestamp
ok chrome@112 (windows 10) -> module - a reference error generates and sends an error object -> Should be ReferenceError class
ok chrome@112 (windows 10) -> module - a reference error generates and sends an error object -> Should have message
ok chrome@112 (windows 10) -> module - a reference error generates and sends an error object -> Should have a stack trace
ok chrome@112 (windows 10) -> module - referrer attr is sent in the query string & does not include query params -> url in ref query param does not contain query parameters
# chrome@112 (windows 10) -> module - a thrown error generates and sends an error object
ok chrome@112 (windows 10) -> module - a thrown error generates and sends an error object -> Should have 1 error obj
ok chrome@112 (windows 10) -> module - a thrown error generates and sends an error object -> Should have seen 1 error
ok chrome@112 (windows 10) -> module - a thrown error generates and sends an error object -> Should have a valid timestamp
ok chrome@112 (windows 10) -> module - a thrown error generates and sends an error object -> Should be Error class
ok chrome@112 (windows 10) -> module - a thrown error generates and sends an error object -> Should have message
ok chrome@112 (windows 10) -> module - a thrown error generates and sends an error object -> Should have a stack trace
ok chrome@112 (windows 10) -> session trace resources -> expected resource was found
# chrome@112 (windows 10) -> module - unhandledPromise generates and sends an error object
ok chrome@112 (windows 10) -> JSONP with error -> should indicate it was requested with JSONP
# chrome@112 (windows 10) -> classic - capturing XHR and fetch ajax events
# chrome@112 (windows 10) -> classic - capturing XHR and fetch ajax events (retry 1)
ok chrome@112 (windows 10) -> classic - capturing XHR and fetch ajax events (retry 1) -> XHR is harvested
ok chrome@112 (windows 10) -> module - session tracking (enabled by default) is in query string attributes -> The session id attr 's' should exist and have a truthy value.
# chrome@112 (windows 10) -> module - RangeError generates and sends an error object
ok chrome@112 (windows 10) -> module - RangeError generates and sends an error object -> Should have 1 error obj
ok chrome@112 (windows 10) -> module - RangeError generates and sends an error object -> Should have seen 1 error
ok chrome@112 (windows 10) -> module - RangeError generates and sends an error object -> Should have a valid timestamp
ok chrome@112 (windows 10) -> module - RangeError generates and sends an error object -> Should be RangeError class
ok chrome@112 (windows 10) -> module - RangeError generates and sends an error object -> Should have message
ok chrome@112 (windows 10) -> module - RangeError generates and sends an error object -> Should have a stack trace
ok chrome@112 (windows 10) -> navTiming on initialPageLoad -> should not have navTiming
# chrome@112 (windows 10) -> module - capturing XHR and fetch ajax events
# chrome@112 (windows 10) -> module - capturing XHR and fetch ajax events (retry 1)
ok chrome@112 (windows 10) -> module - capturing XHR and fetch ajax events (retry 1) -> XHR is harvested
ok chrome@112 (windows 10) -> jQuery -> should not have nested children
# chrome@112 (windows 10) -> module - capturing large payload of XHR ajax events
# chrome@112 (windows 10) -> module - capturing large payload of XHR ajax events (retry 1)
ok chrome@112 (windows 10) -> PageAction submission -> estimated event time (595576873) < receipt time (595606846)
# chrome@112 (windows 10) -> module - SyntaxError generates and sends an error object
ok chrome@112 (windows 10) -> module - SyntaxError generates and sends an error object -> Should have 1 error obj
ok chrome@112 (windows 10) -> module - SyntaxError generates and sends an error object -> Should have seen 1 error
ok chrome@112 (windows 10) -> module - SyntaxError generates and sends an error object -> Should have a valid timestamp
ok chrome@112 (windows 10) -> module - SyntaxError generates and sends an error object -> Should be SyntaxError class
ok chrome@112 (windows 10) -> module - SyntaxError generates and sends an error object -> Should have message
ok chrome@112 (windows 10) -> module - SyntaxError generates and sends an error object -> Should have a stack trace
ok chrome@112 (windows 10) -> First paint for supported browsers -> firstPaint has a positive value
# chrome@112 (windows 10) -> child nodes in SPA interaction does not exceed set limit
ok chrome@112 (windows 10) -> child nodes in SPA interaction does not exceed set limit -> initial page load should be tracked with an interaction
ok chrome@112 (windows 10) -> child nodes in SPA interaction does not exceed set limit -> expect no child nodes
ok chrome@112 (windows 10) -> child nodes in SPA interaction does not exceed set limit -> The interaction does not include a route change.
ok chrome@112 (windows 10) -> with request without content-length header -> should have correct responseBodySize
# chrome@112 (windows 10) -> module - TypeError generates and sends an error object
ok chrome@112 (windows 10) -> module - TypeError generates and sends an error object -> Should have 1 error obj
ok chrome@112 (windows 10) -> module - TypeError generates and sends an error object -> Should have seen 1 error
ok chrome@112 (windows 10) -> module - TypeError generates and sends an error object -> Should have a valid timestamp
ok chrome@112 (windows 10) -> module - TypeError generates and sends an error object -> Should be TypeError class
ok chrome@112 (windows 10) -> module - TypeError generates and sends an error object -> Should have message
ok chrome@112 (windows 10) -> module - TypeError generates and sends an error object -> Should have a stack trace
ok chrome@112 (windows 10) -> jspdf generation should not cause error -> Did not generate "error" payload
# chrome@112 (windows 10) -> module - URIError generates and sends an error object
ok chrome@112 (windows 10) -> module - URIError generates and sends an error object -> Should have 1 error obj
ok chrome@112 (windows 10) -> module - URIError generates and sends an error object -> Should have seen 1 error
ok chrome@112 (windows 10) -> module - URIError generates and sends an error object -> Should have a valid timestamp
ok chrome@112 (windows 10) -> module - URIError generates and sends an error object -> Should be URIError class
ok chrome@112 (windows 10) -> module - URIError generates and sends an error object -> Should have message
ok chrome@112 (windows 10) -> module - URIError generates and sends an error object -> Should have a stack trace
ok chrome@112 (windows 10) -> precedence -> custom member of attributes passed through
# chrome@112 (windows 10) -> module - max call stack size generates and sends an error object
ok chrome@112 (windows 10) -> classic - a thrown error generates and sends an error object -> Should have correct custom attributes
# chrome@112 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing
ok chrome@112 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> supportability metrics are sent on close
ok chrome@112 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> metrics included api calls as expected
ok chrome@112 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> metrics(-jserror) harvest is a POST
ok chrome@112 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> jserrors are sent on close
ok chrome@112 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> should have 1 error obj
ok chrome@112 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> should have correct message
ok chrome@112 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> jserrors harvest is a POST
ok chrome@112 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> ajax event is sent on close
ok chrome@112 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> events harvest is a POST
ok chrome@112 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> page actions are sent on close
ok chrome@112 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> should have 1 action obj
ok chrome@112 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> should have correct actionName
ok chrome@112 (windows 10) -> classic - release api adds tags to jserrors (with tags limit) -> {"num1":"1","num2":"2","num3":"3","num4":"4","num5":"5","num6":"6","num7":"7","num8":"8","num9":"9","num10":"10"} is expected but got {"num1":"1","num2":"2","num3":"3","num4":"4","num5":"5","num6":"6","num7":"7","num8":"8","num9":"9","num10":"10"}
# chrome@112 (windows 10) -> classic - disabled jserrors should not generate errors
ok chrome@112 (windows 10) -> module - release api limits the length of tags -> {"one":"201","three":"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq","yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq":"2"} is expected but got {"one":"201","yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq":"2","three":"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq"}
# chrome@112 (windows 10) -> module - disabled jserrors should not generate errors
ok chrome@112 (windows 10) -> module - a thrown error generates and sends an error object -> Should have correct custom attributes
# chrome@112 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric
ok chrome@112 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> CustomMetrics object(s) were generated
ok chrome@112 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> API/noticeError/called count was incremented by 1
ok chrome@112 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> API/setPageViewName/called count was incremented by 1 until reached 5
ok chrome@112 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> API/setCustomAttribute/called count was incremented by 1
ok chrome@112 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> API/setUserId/called count was incremented by 1
ok chrome@112 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> API/setErrorHandler/called count was incremented by 1
ok chrome@112 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> API/finished/called count was incremented by 1
ok chrome@112 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> API/addToTrace/called count was incremented by 1
ok chrome@112 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> API/addRelease/called count was incremented by 1
ok chrome@112 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> Saw all asyncApiFns
ok chrome@112 (windows 10) -> classic - release api limits the length of tags -> {"one":"201","three":"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq","yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq":"2"} is expected but got {"one":"201","yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq":"2","three":"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq"}
# chrome@112 (windows 10) -> module - a circular reference error generates and sends an error object
ok chrome@112 (windows 10) -> module - a circular reference error generates and sends an error object -> exactly one error
ok chrome@112 (windows 10) -> classic - RangeError generates and sends an error object -> Should have correct custom attributes
# chrome@112 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing
ok chrome@112 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> supportability metrics are sent on close
ok chrome@112 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> metrics included api calls as expected
ok chrome@112 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> metrics(-jserror) harvest is a POST
ok chrome@112 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> jserrors are sent on close
ok chrome@112 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> should have 1 error obj
ok chrome@112 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> should have correct message
ok chrome@112 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> jserrors harvest is a POST
ok chrome@112 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> ajax event is sent on close
ok chrome@112 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> events harvest is a POST
ok chrome@112 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> page actions are sent on close
ok chrome@112 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> should have 1 action obj
ok chrome@112 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> should have correct actionName
ok chrome@112 (windows 10) -> classic - no query param when release is not set -> should not have ri query param
# chrome@112 (windows 10) -> classic - a circular reference error generates and sends an error object
ok chrome@112 (windows 10) -> classic - a circular reference error generates and sends an error object -> exactly one error
ok chrome@112 (windows 10) -> module - unhandledPromise generates and sends an error object -> undefined
# chrome@112 (windows 10) -> classic - a valid obfuscationRule creates detected supportability metric
ok chrome@112 (windows 10) -> classic - a valid obfuscationRule creates detected supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> classic - a valid obfuscationRule creates detected supportability metric -> Generic/Version/1.231.0/Detected contains correct name
ok chrome@112 (windows 10) -> classic - a valid obfuscationRule creates detected supportability metric -> Generic/LoaderType/worker/Detected contains correct name
ok chrome@112 (windows 10) -> classic - a valid obfuscationRule creates detected supportability metric -> Generic/DistMethod/CDN/Detected contains correct name
ok chrome@112 (windows 10) -> classic - a valid obfuscationRule creates detected supportability metric -> Generic/Obfuscate/Detected contains correct name
ok chrome@112 (windows 10) -> classic - a valid obfuscationRule creates detected supportability metric -> API/addPageAction/called contains correct name
ok chrome@112 (windows 10) -> classic - a valid obfuscationRule creates detected supportability metric -> API/setCustomAttribute/called contains correct name
ok chrome@112 (windows 10) -> classic - a valid obfuscationRule creates detected supportability metric -> Generic/Resources/Non-Ajax/Internal contains correct name
ok chrome@112 (windows 10) -> classic - a valid obfuscationRule creates detected supportability metric -> PageSession/Endpoint/1/BytesSent contains correct name
ok chrome@112 (windows 10) -> classic - capturing XHR and fetch ajax events (retry 1) -> fetch is harvested
# chrome@112 (windows 10) -> classic - invalid obfuscation rule #1 creates invalid supportability metric
ok chrome@112 (windows 10) -> classic - invalid obfuscation rule #1 creates invalid supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> module - RangeError generates and sends an error object -> Should have correct custom attributes
# chrome@112 (windows 10) -> classic - invalid obfuscation rule #2 creates invalid supportability metric
ok chrome@112 (windows 10) -> classic - invalid obfuscation rule #2 creates invalid supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> module - capturing large payload of XHR ajax events (retry 1) -> should be truthy
# chrome@112 (windows 10) -> classic - workers creation generates sm
ok chrome@112 (windows 10) -> classic - workers creation generates sm -> 7 SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> classic - workers creation generates sm -> nested classic worker is available
ok chrome@112 (windows 10) -> classic - workers creation generates sm -> nested module worker is available
ok chrome@112 (windows 10) -> classic - workers creation generates sm -> nested classic or module sharedworker is not avail
ok chrome@112 (windows 10) -> classic - workers creation generates sm -> sharedworker supportability should not be emitted by or within a worker
ok chrome@112 (windows 10) -> classic - workers creation generates sm -> nested classic or module serviceworker is not avail
ok chrome@112 (windows 10) -> module - capturing XHR and fetch ajax events (retry 1) -> fetch is harvested
# chrome@112 (windows 10) -> classic - invalid obfuscation rule #3 creates invalid supportability metric
ok chrome@112 (windows 10) -> classic - invalid obfuscation rule #3 creates invalid supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> module - SyntaxError generates and sends an error object -> Should have correct custom attributes
# chrome@112 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric
ok chrome@112 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> CustomMetrics object(s) were generated
ok chrome@112 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> API/noticeError/called count was incremented by 1
ok chrome@112 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> API/setPageViewName/called count was incremented by 1 until reached 5
ok chrome@112 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> API/setCustomAttribute/called count was incremented by 1
ok chrome@112 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> API/setUserId/called count was incremented by 1
ok chrome@112 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> API/setErrorHandler/called count was incremented by 1
ok chrome@112 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> API/finished/called count was incremented by 1
ok chrome@112 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> API/addToTrace/called count was incremented by 1
ok chrome@112 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> API/addRelease/called count was incremented by 1
ok chrome@112 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> Saw all asyncApiFns
ok chrome@112 (windows 10) -> module - TypeError generates and sends an error object -> Should have correct custom attributes
# chrome@112 (windows 10) -> module - invalid obfuscation rule #1 creates invalid supportability metric
ok chrome@112 (windows 10) -> module - invalid obfuscation rule #1 creates invalid supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> child nodes in SPA interaction does not exceed set limit -> interaction should have no more than 128 child nodes
# chrome@112 (windows 10) -> module - a valid obfuscationRule creates detected supportability metric
ok chrome@112 (windows 10) -> module - a valid obfuscationRule creates detected supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> module - a valid obfuscationRule creates detected supportability metric -> Generic/Version/1.231.0/Detected contains correct name
ok chrome@112 (windows 10) -> module - a valid obfuscationRule creates detected supportability metric -> Generic/LoaderType/worker/Detected contains correct name
ok chrome@112 (windows 10) -> module - a valid obfuscationRule creates detected supportability metric -> Generic/DistMethod/CDN/Detected contains correct name
ok chrome@112 (windows 10) -> module - a valid obfuscationRule creates detected supportability metric -> Generic/Obfuscate/Detected contains correct name
ok chrome@112 (windows 10) -> module - a valid obfuscationRule creates detected supportability metric -> API/addPageAction/called contains correct name
ok chrome@112 (windows 10) -> module - a valid obfuscationRule creates detected supportability metric -> API/setCustomAttribute/called contains correct name
ok chrome@112 (windows 10) -> module - a valid obfuscationRule creates detected supportability metric -> Generic/Resources/Non-Ajax/Internal contains correct name
ok chrome@112 (windows 10) -> module - a valid obfuscationRule creates detected supportability metric -> Generic/Resources/Ajax/Internal contains correct name
ok chrome@112 (windows 10) -> module - max call stack size generates and sends an error object -> This browser version does not throw errors in worker when max stack size is reached
# chrome@112 (windows 10) -> module - invalid obfuscation rule #3 creates invalid supportability metric
ok chrome@112 (windows 10) -> module - invalid obfuscation rule #3 creates invalid supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> module - URIError generates and sends an error object -> Should have correct custom attributes
# chrome@112 (windows 10) -> module - invalid obfuscation rule #2 creates invalid supportability metric
ok chrome@112 (windows 10) -> module - invalid obfuscation rule #2 creates invalid supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> errors get to session traces -> Has an Ajax
# chrome@112 (windows 10) -> module - no headers are added on different origin by default
# chrome@112 (windows 10) -> module - when fetch is called with one string argument
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> tracestate header should not be present
# chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@112 (windows 10) -> module - when fetch is called with a Request argument
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> tracestate header should not be present
# chrome@112 (windows 10) -> module - when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> module - release api adds tags to jserrors (with tags limit) -> {"num1":"1","num2":"2","num3":"3","num4":"4","num5":"5","num6":"6","num7":"7","num8":"8","num9":"9","num10":"10"} is expected but got {"num1":"1","num2":"2","num3":"3","num4":"4","num5":"5","num6":"6","num7":"7","num8":"8","num9":"9","num10":"10"}
# chrome@112 (windows 10) -> classic - no headers are added on different origin when the origin is not allowed
# chrome@112 (windows 10) -> classic - when fetch is called with one string argument
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> tracestate header should not be present
# chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@112 (windows 10) -> classic - when fetch is called with a Request argument
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> tracestate header should not be present
# chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> classic - invalid obfuscation rule #2 creates invalid supportability metric -> an invalid regex rule detected
# chrome@112 (windows 10) -> classic - addPageAction sends PA event
ok chrome@112 (windows 10) -> classic - addPageAction sends PA event -> first PageAction submission is a POST
ok chrome@112 (windows 10) -> classic - addPageAction sends PA event -> query string does not include ins parameter
ok chrome@112 (windows 10) -> classic - addPageAction sends PA event -> should have 1 event
ok chrome@112 (windows 10) -> classic - addPageAction sends PA event -> event has correct action name
ok chrome@112 (windows 10) -> classic - addPageAction sends PA event -> event has free tacos
ok chrome@112 (windows 10) -> classic - addPageAction sends PA event -> harvest time (1338) should always be bigger than event time (1337)
ok chrome@112 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> ins harvest is a POST
# chrome@112 (windows 10) -> module - workers creation generates sm
ok chrome@112 (windows 10) -> module - workers creation generates sm -> 7 SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> module - workers creation generates sm -> nested classic worker is available
ok chrome@112 (windows 10) -> module - workers creation generates sm -> nested module worker is available
ok chrome@112 (windows 10) -> module - workers creation generates sm -> nested classic or module sharedworker is not avail
ok chrome@112 (windows 10) -> module - workers creation generates sm -> sharedworker supportability should not be emitted by or within a worker
ok chrome@112 (windows 10) -> module - workers creation generates sm -> nested classic or module serviceworker is not avail
ok chrome@112 (windows 10) -> classic - invalid obfuscation rule #3 creates invalid supportability metric -> an invalid regex rule detected
# chrome@112 (windows 10) -> classic - addPageAction has precedence over custom attributes
ok chrome@112 (windows 10) -> classic - addPageAction has precedence over custom attributes -> should have 1 event
ok chrome@112 (windows 10) -> classic - addPageAction has precedence over custom attributes -> event has correct action name
ok chrome@112 (windows 10) -> classic - addPageAction has precedence over custom attributes -> defaults has correct precedence
ok chrome@112 (windows 10) -> classic - addPageAction has precedence over custom attributes -> att has correct precedence
ok chrome@112 (windows 10) -> classic - addPageAction has precedence over custom attributes -> attributes has correct precedence
ok chrome@112 (windows 10) -> captures callbacks even when window.Event overwritten -> 36 timer nodes seen in session trace, want >= 31
# chrome@112 (windows 10) -> module - no headers are added on different origin when the origin is not allowed
# chrome@112 (windows 10) -> module - when fetch is called with one string argument
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> tracestate header should not be present
# chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@112 (windows 10) -> module - when fetch is called with a Request argument
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> tracestate header should not be present
# chrome@112 (windows 10) -> module - when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> session traces are retried when collector returns 429 during first harvest -> server responded with 200
# chrome@112 (windows 10) -> classic - newrelic header is not added on different origin when explicitly disabled in configuration
# chrome@112 (windows 10) -> classic - when fetch is called with one string argument
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> tracestate header should not be present
# chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@112 (windows 10) -> classic - when fetch is called with a Request argument
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> tracestate header should not be present
# chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> module - no query param when release is not set -> should not have ri query param
# chrome@112 (windows 10) -> classic - no headers are added on different origin by default
# chrome@112 (windows 10) -> classic - when fetch is called with one string argument
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> tracestate header should not be present
# chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@112 (windows 10) -> classic - when fetch is called with a Request argument
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> tracestate header should not be present
# chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> classic - max call stack size generates and sends an error object -> This browser version does not throw errors in worker when max stack size is reached
# chrome@112 (windows 10) -> module - an error has a custom attribute if setCustomAttribute() is called
ok chrome@112 (windows 10) -> module - an error has a custom attribute if setCustomAttribute() is called -> exactly one error
ok chrome@112 (windows 10) -> module - an error has a custom attribute if setCustomAttribute() is called -> has the expected message
ok chrome@112 (windows 10) -> classic - a reference error generates and sends an error object -> Should have correct custom attributes
# chrome@112 (windows 10) -> module - default headers on different origin when the origin is allowed
# chrome@112 (windows 10) -> module - when fetch is called with one string argument
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> newrelic header should be present
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> should be equivalent
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> tracestate header should not be present
# chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> newrelic header should be present
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equivalent
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@112 (windows 10) -> module - when fetch is called with a Request argument
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> newrelic header should be present
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> should be equivalent
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> tracestate header should not be present
# chrome@112 (windows 10) -> module - when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> newrelic header should be present
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> should be equivalent
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> spa loader: LCP is not collected after pageHide (retry 2) -> LCP captured the pre-pageHide attribute
# chrome@112 (windows 10) -> module - trace context headers are added on different origin when explicitly enabled in configuration
# chrome@112 (windows 10) -> module - when fetch is called with one string argument
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> newrelic header should be present
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> should be equivalent
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> traceparent header should be present
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> tracestate header should be present
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> parent header should have four parts
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> first part should be format version set to 00
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> trace ID is there
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> span ID is there
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> key should be in the right format
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> state header should have nine parts
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> version is set to 0
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> third part is set to account ID
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> span ID is there
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> priority is not set
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> timestamp is there
# chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> newrelic header should be present
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equivalent
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> traceparent header should be present
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> tracestate header should be present
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> parent header should have four parts
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> first part should be format version set to 00
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> trace ID is there
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> span ID is there
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> key should be in the right format
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> state header should have nine parts
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> version is set to 0
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> third part is set to account ID
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> span ID is there
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> priority is not set
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> timestamp is there
# chrome@112 (windows 10) -> module - when fetch is called with a Request argument
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> newrelic header should be present
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> should be equivalent
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> traceparent header should be present
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> tracestate header should be present
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> parent header should have four parts
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> first part should be format version set to 00
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> trace ID is there
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> span ID is there
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> key should be in the right format
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> state header should have nine parts
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> version is set to 0
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> third part is set to account ID
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> span ID is there
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> priority is not set
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> timestamp is there
# chrome@112 (windows 10) -> module - when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> newrelic header should be present
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> should be equivalent
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> traceparent header should be present
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> tracestate header should be present
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> parent header should have four parts
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> first part should be format version set to 00
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> trace ID is there
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> span ID is there
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> key should be in the right format
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> state header should have nine parts
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> version is set to 0
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> third part is set to account ID
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> span ID is there
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> priority is not set
ok chrome@112 (windows 10) -> session trace ajax deny list -> XMLHttpRequest nodes captured even with ajax deny list
# chrome@112 (windows 10) -> classic - default headers on different origin when the origin is allowed
# chrome@112 (windows 10) -> classic - when fetch is called with one string argument
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> newrelic header should be present
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> should be equivalent
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> tracestate header should not be present
# chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> newrelic header should be present
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equivalent
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@112 (windows 10) -> classic - when fetch is called with a Request argument
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> newrelic header should be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> should be equivalent
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> tracestate header should not be present
# chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> newrelic header should be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equivalent
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@112 (windows 10) -> classic - does not set CAT headers on outbound XHRs to different origin
ok chrome@112 (windows 10) -> classic - Distributed Tracing info is added to XHR & fetch ajax events (retry 1) -> should be a non-zero timestamp
# chrome@112 (windows 10) -> classic - an error has a custom attribute if setCustomAttribute() is called
ok chrome@112 (windows 10) -> classic - an error has a custom attribute if setCustomAttribute() is called -> exactly one error
ok chrome@112 (windows 10) -> classic - an error has a custom attribute if setCustomAttribute() is called -> has the expected message
ok chrome@112 (windows 10) -> rum loader: LCP is not collected after pageHide (retry 2) -> LCP captured the pre-pageHide attribute
# chrome@112 (windows 10) -> classic - trace context headers are added on different origin when explicitly enabled in configuration
# chrome@112 (windows 10) -> classic - when fetch is called with one string argument
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> newrelic header should be present
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> should be equivalent
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> traceparent header should be present
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> tracestate header should be present
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> parent header should have four parts
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> first part should be format version set to 00
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> trace ID is there
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> span ID is there
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> key should be in the right format
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> state header should have nine parts
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> version is set to 0
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> third part is set to account ID
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> span ID is there
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> priority is not set
ok chrome@112 (windows 10) -> classic - when fetch is called with one string argument -> timestamp is there
# chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> newrelic header should be present
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equivalent
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> traceparent header should be present
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> tracestate header should be present
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> parent header should have four parts
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> first part should be format version set to 00
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> trace ID is there
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> span ID is there
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> key should be in the right format
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> state header should have nine parts
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> version is set to 0
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> third part is set to account ID
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> span ID is there
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> priority is not set
ok chrome@112 (windows 10) -> classic - when fetch is called with URL string and options arguments -> timestamp is there
# chrome@112 (windows 10) -> classic - when fetch is called with a Request argument
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> newrelic header should be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> should be equivalent
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> traceparent header should be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> tracestate header should be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> parent header should have four parts
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> first part should be format version set to 00
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> trace ID is there
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> span ID is there
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> key should be in the right format
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> state header should have nine parts
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> version is set to 0
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> third part is set to account ID
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> span ID is there
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> priority is not set
ok chrome@112 (windows 10) -> classic - when fetch is called with a Request argument -> timestamp is there
# chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> newrelic header should be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equivalent
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> traceparent header should be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> tracestate header should be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> parent header should have four parts
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> first part should be format version set to 00
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> trace ID is there
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> span ID is there
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> key should be in the right format
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> state header should have nine parts
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> version is set to 0
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> third part is set to account ID
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> span ID is there
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> priority is not set
ok chrome@112 (windows 10) -> classic - unhandledPromise generates and sends an error object -> undefined
# chrome@112 (windows 10) -> module - newrelic header is not added on different origin when explicitly disabled in configuration
# chrome@112 (windows 10) -> module - when fetch is called with one string argument
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with one string argument -> tracestate header should not be present
# chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@112 (windows 10) -> module - when fetch is called with a Request argument
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with a Request argument -> tracestate header should not be present
# chrome@112 (windows 10) -> module - when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> module - a reference error generates and sends an error object -> Should have correct custom attributes
# chrome@112 (windows 10) -> module - an external JS import that throws an error generates and sends an error object
ok chrome@112 (windows 10) -> module - an external JS import that throws an error generates and sends an error object -> Should have 1 error obj
ok chrome@112 (windows 10) -> module - an external JS import that throws an error generates and sends an error object -> Should have seen 1 error
ok chrome@112 (windows 10) -> module - an external JS import that throws an error generates and sends an error object -> Should have a valid timestamp
ok chrome@112 (windows 10) -> module - an external JS import that throws an error generates and sends an error object -> Should be Error class
ok chrome@112 (windows 10) -> module - an external JS import that throws an error generates and sends an error object -> Should have correct message
ok chrome@112 (windows 10) -> module - an external JS import that throws an error generates and sends an error object -> Should have a stack trace
ok chrome@112 (windows 10) -> classic - URIError generates and sends an error object -> Should have correct custom attributes
# chrome@112 (windows 10) -> module - an error in eventListener is noticed and harvested
ok chrome@112 (windows 10) -> module - an error in eventListener is noticed and harvested -> exactly one error
ok chrome@112 (windows 10) -> module - an error in eventListener is noticed and harvested -> Should have seen 1 error
ok chrome@112 (windows 10) -> module - an error in eventListener is noticed and harvested -> Should have a valid timestamp
ok chrome@112 (windows 10) -> module - an error in eventListener is noticed and harvested -> Should be Error class
ok chrome@112 (windows 10) -> module - an error in eventListener is noticed and harvested -> Should have correct message
ok chrome@112 (windows 10) -> classic - capturing large payload of XHR ajax events (retry 1) -> should be truthy
# chrome@112 (windows 10) -> classic - an external JS import that throws an error generates and sends an error object
ok chrome@112 (windows 10) -> classic - an external JS import that throws an error generates and sends an error object -> Should have 1 error obj
ok chrome@112 (windows 10) -> classic - an external JS import that throws an error generates and sends an error object -> Should have seen 1 error
ok chrome@112 (windows 10) -> classic - an external JS import that throws an error generates and sends an error object -> Should have a valid timestamp
ok chrome@112 (windows 10) -> classic - an external JS import that throws an error generates and sends an error object -> Should be Error class
ok chrome@112 (windows 10) -> classic - an external JS import that throws an error generates and sends an error object -> Should have correct message
ok chrome@112 (windows 10) -> classic - an external JS import that throws an error generates and sends an error object -> Should have a stack trace
ok chrome@112 (windows 10) -> classic - TypeError generates and sends an error object -> Should have correct custom attributes
# chrome@112 (windows 10) -> classic - an error in eventListener is noticed and harvested
ok chrome@112 (windows 10) -> classic - an error in eventListener is noticed and harvested -> exactly one error
ok chrome@112 (windows 10) -> classic - an error in eventListener is noticed and harvested -> Should have seen 1 error
ok chrome@112 (windows 10) -> classic - an error in eventListener is noticed and harvested -> Should have a valid timestamp
ok chrome@112 (windows 10) -> classic - an error in eventListener is noticed and harvested -> Should be Error class
ok chrome@112 (windows 10) -> classic - an error in eventListener is noticed and harvested -> Should have correct message
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@112 (windows 10) -> module - does not set CAT headers on outbound XHRs to different origin
ok chrome@112 (windows 10) -> second: 1 -> should not have nested children
# chrome@112 (windows 10) -> retried first harvest captures ptid
ok chrome@112 (windows 10) -> retried first harvest captures ptid -> server responded with 429
ok chrome@112 (windows 10) -> retried first harvest captures ptid -> server responded with 200
ok chrome@112 (windows 10) -> retried first harvest captures ptid -> server responded with 200
ok chrome@112 (windows 10) -> spa page urls include the hash fragment -> the url should contain the hash fragment
# chrome@112 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest
ok chrome@112 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest -> server responded with 200
ok chrome@112 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest -> server responded with 429
ok chrome@112 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest -> got three harvest requests
ok chrome@112 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest -> second try has more nodes than first
ok chrome@112 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest -> all nodes have been resent
ok chrome@112 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest -> nodes from first successful harvest are not resent in second harvest
ok chrome@112 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest -> nodes from first successful harvest are not resent in third harvest
ok chrome@112 (windows 10) -> classic - invalid obfuscation rule #1 creates invalid supportability metric -> an invalid regex rule detected
# chrome@112 (windows 10) -> module - multiple matching errors are aggregated
ok chrome@112 (windows 10) -> module - multiple matching errors are aggregated -> Should have 1 error obj
ok chrome@112 (windows 10) -> classic - a circular reference error generates and sends an error object -> has the expected message
# chrome@112 (windows 10) -> module - noticeError works with string argument
ok chrome@112 (windows 10) -> module - noticeError works with string argument -> Should have 1 error obj
ok chrome@112 (windows 10) -> module - noticeError works with string argument -> Should have seen 1 error
ok chrome@112 (windows 10) -> module - noticeError works with string argument -> Should have a valid timestamp
ok chrome@112 (windows 10) -> module - noticeError works with string argument -> Should be Error class
ok chrome@112 (windows 10) -> module - noticeError works with string argument -> Should have correct message
ok chrome@112 (windows 10) -> module - noticeError works with string argument -> Should have a stack trace
ok chrome@112 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> ins harvest is a POST
# chrome@112 (windows 10) -> module - noticeError generates and sends an error object
ok chrome@112 (windows 10) -> module - noticeError generates and sends an error object -> Should have 1 error obj
ok chrome@112 (windows 10) -> module - noticeError generates and sends an error object -> Should have seen 1 error
ok chrome@112 (windows 10) -> module - noticeError generates and sends an error object -> Should have a valid timestamp
ok chrome@112 (windows 10) -> module - noticeError generates and sends an error object -> Should be Error class
ok chrome@112 (windows 10) -> module - noticeError generates and sends an error object -> Should have correct message
ok chrome@112 (windows 10) -> module - noticeError generates and sends an error object -> Should have a stack trace
ok chrome@112 (windows 10) -> classic - a valid obfuscationRule creates detected supportability metric -> PageSession/Endpoint/Ins/BytesSent contains correct name
# chrome@112 (windows 10) -> module - noticeError generates and sends an error object with custom params
ok chrome@112 (windows 10) -> module - noticeError generates and sends an error object with custom params -> Should have 1 error obj
ok chrome@112 (windows 10) -> module - noticeError generates and sends an error object with custom params -> Should have seen 1 error
ok chrome@112 (windows 10) -> module - noticeError generates and sends an error object with custom params -> Should have a valid timestamp
ok chrome@112 (windows 10) -> module - noticeError generates and sends an error object with custom params -> Should be Error class
ok chrome@112 (windows 10) -> module - noticeError generates and sends an error object with custom params -> Should have correct message
ok chrome@112 (windows 10) -> module - noticeError generates and sends an error object with custom params -> Should have a stack trace
ok chrome@112 (windows 10) -> classic - disabled jserrors should not generate errors -> Did not generate "error" payload
# chrome@112 (windows 10) -> classic - noticeError generates and sends an error object
ok chrome@112 (windows 10) -> classic - noticeError generates and sends an error object -> Should have 1 error obj
ok chrome@112 (windows 10) -> classic - noticeError generates and sends an error object -> Should have seen 1 error
ok chrome@112 (windows 10) -> classic - noticeError generates and sends an error object -> Should have a valid timestamp
ok chrome@112 (windows 10) -> classic - noticeError generates and sends an error object -> Should be Error class
ok chrome@112 (windows 10) -> classic - noticeError generates and sends an error object -> Should have correct message
ok chrome@112 (windows 10) -> classic - noticeError generates and sends an error object -> Should have a stack trace
ok chrome@112 (windows 10) -> module - disabled jserrors should not generate errors -> Did not generate "error" payload
# chrome@112 (windows 10) -> classic - noticeError works with string argument
ok chrome@112 (windows 10) -> classic - noticeError works with string argument -> Should have 1 error obj
ok chrome@112 (windows 10) -> classic - noticeError works with string argument -> Should have seen 1 error
ok chrome@112 (windows 10) -> classic - noticeError works with string argument -> Should have a valid timestamp
ok chrome@112 (windows 10) -> classic - noticeError works with string argument -> Should be Error class
ok chrome@112 (windows 10) -> classic - noticeError works with string argument -> Should have correct message
ok chrome@112 (windows 10) -> classic - noticeError works with string argument -> Should have a stack trace
ok chrome@112 (windows 10) -> module - a circular reference error generates and sends an error object -> has the expected message
# chrome@112 (windows 10) -> classic - multiple matching errors are aggregated
ok chrome@112 (windows 10) -> classic - multiple matching errors are aggregated -> Should have 1 error obj
ok chrome@112 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> a `Finished` Custom Metric (cm) was also generated
# chrome@112 (windows 10) -> module - addPageAction sends PA event
ok chrome@112 (windows 10) -> module - addPageAction sends PA event -> first PageAction submission is a POST
ok chrome@112 (windows 10) -> module - addPageAction sends PA event -> query string does not include ins parameter
ok chrome@112 (windows 10) -> module - addPageAction sends PA event -> should have 1 event
ok chrome@112 (windows 10) -> module - addPageAction sends PA event -> event has correct action name
ok chrome@112 (windows 10) -> module - addPageAction sends PA event -> event has free tacos
ok chrome@112 (windows 10) -> module - addPageAction sends PA event -> harvest time (6438) should always be bigger than event time (1431)
ok chrome@112 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> a `Finished` Custom Metric (cm) was also generated
# chrome@112 (windows 10) -> classic - noticeError generates and sends an error object with custom params
ok chrome@112 (windows 10) -> classic - noticeError generates and sends an error object with custom params -> Should have 1 error obj
ok chrome@112 (windows 10) -> classic - noticeError generates and sends an error object with custom params -> Should have seen 1 error
ok chrome@112 (windows 10) -> classic - noticeError generates and sends an error object with custom params -> Should have a valid timestamp
ok chrome@112 (windows 10) -> classic - noticeError generates and sends an error object with custom params -> Should be Error class
ok chrome@112 (windows 10) -> classic - noticeError generates and sends an error object with custom params -> Should have correct message
ok chrome@112 (windows 10) -> classic - noticeError generates and sends an error object with custom params -> Should have a stack trace
ok chrome@112 (windows 10) -> classic - noticeError generates and sends an error object -> Should not have correct custom attributes
# chrome@112 (windows 10) -> does not set CAT headers on outbound XHRs to different origin
ok chrome@112 (windows 10) -> module - invalid obfuscation rule #2 creates invalid supportability metric -> an invalid regex rule detected
# chrome@112 (windows 10) -> module - setErrorHandler ignores error
ok chrome@112 (windows 10) -> module - setErrorHandler ignores error -> pageViewErr reported
ok chrome@112 (windows 10) -> module - setErrorHandler ignores error -> exactly one error
ok chrome@112 (windows 10) -> module - setErrorHandler ignores error -> Should have seen 1 error
ok chrome@112 (windows 10) -> module - setErrorHandler ignores error -> Should have a valid timestamp
ok chrome@112 (windows 10) -> module - setErrorHandler ignores error -> Should be Error class
ok chrome@112 (windows 10) -> module - setErrorHandler ignores error -> Should have correct message
ok chrome@112 (windows 10) -> posts session traces -> no javascript attributes (on stn second post)
# chrome@112 (windows 10) -> module - if server returns 429, errors are stored and retried
ok chrome@112 (windows 10) -> module - if server returns 429, errors are stored and retried -> server responded with 429
ok chrome@112 (windows 10) -> module - if server returns 429, errors are stored and retried -> exactly one error
ok chrome@112 (windows 10) -> module - if server returns 429, errors are stored and retried -> Should have seen 1 error
ok chrome@112 (windows 10) -> module - if server returns 429, errors are stored and retried -> Should have a valid timestamp
ok chrome@112 (windows 10) -> module - if server returns 429, errors are stored and retried -> Should be Error class
ok chrome@112 (windows 10) -> module - if server returns 429, errors are stored and retried -> Should have correct message
ok chrome@112 (windows 10) -> classic - SyntaxError generates and sends an error object -> Should have correct custom attributes
# chrome@112 (windows 10) -> classic - if server returns 429, errors are stored and retried
ok chrome@112 (windows 10) -> classic - if server returns 429, errors are stored and retried -> server responded with 429
ok chrome@112 (windows 10) -> classic - if server returns 429, errors are stored and retried -> exactly one error
ok chrome@112 (windows 10) -> classic - if server returns 429, errors are stored and retried -> Should have seen 1 error
ok chrome@112 (windows 10) -> classic - if server returns 429, errors are stored and retried -> Should have a valid timestamp
ok chrome@112 (windows 10) -> classic - if server returns 429, errors are stored and retried -> Should be Error class
ok chrome@112 (windows 10) -> classic - if server returns 429, errors are stored and retried -> Should have correct message
ok chrome@112 (windows 10) -> module - invalid obfuscation rule #3 creates invalid supportability metric -> an invalid regex rule detected
# chrome@112 (windows 10) -> classic - setErrorHandler ignores error
ok chrome@112 (windows 10) -> classic - setErrorHandler ignores error -> pageViewErr reported
ok chrome@112 (windows 10) -> classic - setErrorHandler ignores error -> exactly one error
ok chrome@112 (windows 10) -> classic - setErrorHandler ignores error -> Should have seen 1 error
ok chrome@112 (windows 10) -> classic - setErrorHandler ignores error -> Should have a valid timestamp
ok chrome@112 (windows 10) -> classic - setErrorHandler ignores error -> Should be Error class
ok chrome@112 (windows 10) -> classic - setErrorHandler ignores error -> Should have correct message
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@112 (windows 10) -> classic - an error in setInterval is noticed and harvested
ok chrome@112 (windows 10) -> classic - an error in setInterval is noticed and harvested -> exactly one error
ok chrome@112 (windows 10) -> classic - an error in setInterval is noticed and harvested -> Should have seen 1 error
ok chrome@112 (windows 10) -> classic - an error in setInterval is noticed and harvested -> Should have a valid timestamp
ok chrome@112 (windows 10) -> classic - an error in setInterval is noticed and harvested -> Should be Error class
ok chrome@112 (windows 10) -> classic - an error in setInterval is noticed and harvested -> Should have correct message
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@112 (windows 10) -> module - an error in setInterval is noticed and harvested
ok chrome@112 (windows 10) -> module - an error in setInterval is noticed and harvested -> exactly one error
ok chrome@112 (windows 10) -> module - an error in setInterval is noticed and harvested -> Should have seen 1 error
ok chrome@112 (windows 10) -> module - an error in setInterval is noticed and harvested -> Should have a valid timestamp
ok chrome@112 (windows 10) -> module - an error in setInterval is noticed and harvested -> Should be Error class
ok chrome@112 (windows 10) -> module - an error in setInterval is noticed and harvested -> Should have correct message
ok chrome@112 (windows 10) -> module - workers creation generates sm -> serviceworker supportability should not be emitted by or within a worker
# chrome@112 (windows 10) -> module - an error in setTimeout is noticed and harvested
ok chrome@112 (windows 10) -> module - an error in setTimeout is noticed and harvested -> exactly one error
ok chrome@112 (windows 10) -> module - an error in setTimeout is noticed and harvested -> Should have seen 1 error
ok chrome@112 (windows 10) -> module - an error in setTimeout is noticed and harvested -> Should have a valid timestamp
ok chrome@112 (windows 10) -> module - an error in setTimeout is noticed and harvested -> Should be Error class
ok chrome@112 (windows 10) -> module - an error in setTimeout is noticed and harvested -> Should have correct message
ok chrome@112 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest -> server responded with 200
# chrome@112 (windows 10) -> capturing XHR ajax events
ok chrome@112 (windows 10) -> classic - addPageAction sends PA event -> estimated event time (595617256) < receipt time (595617257)
# chrome@112 (windows 10) -> classic - an error in setTimeout is noticed and harvested
ok chrome@112 (windows 10) -> classic - an error in setTimeout is noticed and harvested -> exactly one error
ok chrome@112 (windows 10) -> classic - an error in setTimeout is noticed and harvested -> Should have seen 1 error
ok chrome@112 (windows 10) -> classic - an error in setTimeout is noticed and harvested -> Should have a valid timestamp
ok chrome@112 (windows 10) -> classic - an error in setTimeout is noticed and harvested -> Should be Error class
ok chrome@112 (windows 10) -> classic - an error in setTimeout is noticed and harvested -> Should have correct message
ok chrome@112 (windows 10) -> module - noticeError works with string argument -> Should not have correct custom attributes
# chrome@112 (windows 10) -> capturing Fetch ajax events
ok chrome@112 (windows 10) -> module - addPageAction sends PA event -> estimated event time (595617362) < receipt time (595622369)
# chrome@112 (windows 10) -> headers are added on same origin by default
# chrome@112 (windows 10) -> when fetch is called with one string argument
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> newrelic header should be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be equivalent
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> traceparent header should be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> tracestate header should be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> parent header should have four parts
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> first part should be format version set to 00
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> trace ID is there
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> key should be in the right format
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> state header should have nine parts
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> version is set to 0
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> third part is set to account ID
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> priority is not set
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> timestamp is there
# chrome@112 (windows 10) -> when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> newrelic header should be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be equivalent
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> traceparent header should be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> tracestate header should be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> parent header should have four parts
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> first part should be format version set to 00
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> trace ID is there
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> key should be in the right format
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> state header should have nine parts
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> version is set to 0
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> third part is set to account ID
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> priority is not set
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> timestamp is there
# chrome@112 (windows 10) -> when fetch is called with a Request argument
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> newrelic header should be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be equivalent
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> traceparent header should be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> tracestate header should be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> parent header should have four parts
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> first part should be format version set to 00
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> trace ID is there
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> key should be in the right format
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> state header should have nine parts
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> version is set to 0
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> third part is set to account ID
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> priority is not set
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> timestamp is there
# chrome@112 (windows 10) -> when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> newrelic header should be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be equivalent
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> traceparent header should be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> tracestate header should be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> parent header should have four parts
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> first part should be format version set to 00
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> trace ID is there
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> key should be in the right format
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> state header should have nine parts
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> version is set to 0
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> third part is set to account ID
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> priority is not set
ok chrome@112 (windows 10) -> retried first harvest captures ptid -> ptid was included
# chrome@112 (windows 10) -> Disabled ajax events
ok chrome@112 (windows 10) -> module - noticeError generates and sends an error object -> Should not have correct custom attributes
# chrome@112 (windows 10) -> Distributed Tracing info is added to XHR ajax events
ok chrome@112 (windows 10) -> Distributed Tracing info is added to XHR ajax events -> XMLHttpRequest ajax event was harvested
ok chrome@112 (windows 10) -> Distributed Tracing info is added to XHR ajax events -> should be a non-empty guid string
ok chrome@112 (windows 10) -> Distributed Tracing info is added to XHR ajax events -> should be a non-empty traceId string
ok chrome@112 (windows 10) -> Distributed Tracing info is added to XHR ajax events -> should be a non-zero timestamp
ok chrome@112 (windows 10) -> module - noticeError generates and sends an error object with custom params -> Should have correct custom attributes
# chrome@112 (windows 10) -> Distributed Tracing info is added to Fetch ajax events
ok chrome@112 (windows 10) -> Distributed Tracing info is added to Fetch ajax events -> Fetch ajax event was harvested
ok chrome@112 (windows 10) -> Distributed Tracing info is added to Fetch ajax events -> should be a non-empty guid string
ok chrome@112 (windows 10) -> Distributed Tracing info is added to Fetch ajax events -> should be a non-empty traceId string
ok chrome@112 (windows 10) -> Distributed Tracing info is added to Fetch ajax events -> should be a non-zero timestamp
ok chrome@112 (windows 10) -> classic - noticeError generates and sends an error object with custom params -> Should have correct custom attributes
# chrome@112 (windows 10) -> newrelic header is not added on same origin when specifically disabled in configuration
# chrome@112 (windows 10) -> when fetch is called with one string argument
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> traceparent header should be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> tracestate header should be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> parent header should have four parts
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> first part should be format version set to 00
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> trace ID is there
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> key should be in the right format
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> state header should have nine parts
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> version is set to 0
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> third part is set to account ID
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> priority is not set
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> timestamp is there
# chrome@112 (windows 10) -> when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> traceparent header should be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> tracestate header should be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> parent header should have four parts
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> first part should be format version set to 00
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> trace ID is there
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> key should be in the right format
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> state header should have nine parts
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> version is set to 0
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> third part is set to account ID
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> priority is not set
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> timestamp is there
# chrome@112 (windows 10) -> when fetch is called with a Request argument
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> traceparent header should be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> tracestate header should be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> parent header should have four parts
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> first part should be format version set to 00
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> trace ID is there
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> key should be in the right format
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> state header should have nine parts
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> version is set to 0
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> third part is set to account ID
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> priority is not set
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> timestamp is there
# chrome@112 (windows 10) -> when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> traceparent header should be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> tracestate header should be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> parent header should have four parts
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> first part should be format version set to 00
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> trace ID is there
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> key should be in the right format
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> state header should have nine parts
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> version is set to 0
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> third part is set to account ID
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> priority is not set
ok chrome@112 (windows 10) -> capturing Fetch ajax events -> Fetch ajax event was harvested
# chrome@112 (windows 10) -> DT headers are NOT added when the feature is not enabled (default)
ok chrome@112 (windows 10) -> DT headers are NOT added when the feature is not enabled (default) -> newrelic header should not be present
ok chrome@112 (windows 10) -> DT headers are NOT added when the feature is not enabled (default) -> traceparent header should not be present
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> timestamp is there
# chrome@112 (windows 10) -> classic - an error in xhr callback is noticed and harvested
ok chrome@112 (windows 10) -> classic - an error in xhr callback is noticed and harvested -> exactly one error
ok chrome@112 (windows 10) -> classic - an error in xhr callback is noticed and harvested -> Should have seen 1 error
ok chrome@112 (windows 10) -> classic - an error in xhr callback is noticed and harvested -> Should have a valid timestamp
ok chrome@112 (windows 10) -> classic - an error in xhr callback is noticed and harvested -> Should be Error class
ok chrome@112 (windows 10) -> classic - an error in xhr callback is noticed and harvested -> Should have correct message
ok chrome@112 (windows 10) -> classic - multiple matching errors are aggregated -> Should have aggregated 3 errors
# chrome@112 (windows 10) -> no headers added when feature is not enabled
# chrome@112 (windows 10) -> when fetch is called with one string argument
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> tracestate header should not be present
# chrome@112 (windows 10) -> when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@112 (windows 10) -> when fetch is called with a Request argument
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> tracestate header should not be present
# chrome@112 (windows 10) -> when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@112 (windows 10) -> tests 83
# chrome@112 (windows 10) -> pass  83
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> timestamp is there
# chrome@112 (windows 10) -> XHR request on same origin has DT headers
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> newrelic header should be present
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> should be equivalent
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> should be equal
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> should be equal
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> should be equal
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> should be equal
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> should be truthy
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> should be truthy
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> should be truthy
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> parent header should have four parts
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> first part should be format version set to 00
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> trace ID is there
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> span ID is there
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> key should be in the right format
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> state header should have nine parts
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> version is set to 0
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> third part is set to account ID
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> span ID is there
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> priority is not set
ok chrome@112 (windows 10) -> XHR request on same origin has DT headers -> timestamp is there
# chrome@112 (windows 10) -> tests 208
# chrome@112 (windows 10) -> pass  208
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> Disabled ajax events -> AJAX Promise did not execute because enabled was false
# chrome@112 (windows 10) -> XHR request on same origin has no newrelic header when disabled in configuration
ok chrome@112 (windows 10) -> XHR request on same origin has no newrelic header when disabled in configuration -> newrelic header should not be present
ok chrome@112 (windows 10) -> XHR request on same origin has no newrelic header when disabled in configuration -> traceparent header should be present
ok chrome@112 (windows 10) -> XHR request on same origin has no newrelic header when disabled in configuration -> tracestate header should be present
# chrome@112 (windows 10) -> tests 91
# chrome@112 (windows 10) -> pass  91
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> classic - an external JS import that throws an error generates and sends an error object -> Should have correct custom attributes
# chrome@112 (windows 10) -> module - capturing XHR metrics
ok chrome@112 (windows 10) -> module - capturing XHR metrics -> XHR data submitted via POST request from sendBeacon
ok chrome@112 (windows 10) -> module - capturing XHR metrics -> request body should not be empty
ok chrome@112 (windows 10) -> module - capturing XHR metrics -> has xhr data
ok chrome@112 (windows 10) -> module - capturing XHR metrics -> has at least one XHR record
ok chrome@112 (windows 10) -> module - capturing XHR metrics -> XHR record has correct keys
# chrome@112 (windows 10) -> tests 45
# chrome@112 (windows 10) -> pass  45
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> module - an error in eventListener is noticed and harvested -> Should have a stack trace
# chrome@112 (windows 10) -> module - an error in xhr callback is noticed and harvested
ok chrome@112 (windows 10) -> module - an error in xhr callback is noticed and harvested -> exactly one error
ok chrome@112 (windows 10) -> module - an error in xhr callback is noticed and harvested -> Should have seen 1 error
ok chrome@112 (windows 10) -> module - an error in xhr callback is noticed and harvested -> Should have a valid timestamp
ok chrome@112 (windows 10) -> module - an error in xhr callback is noticed and harvested -> Should be Error class
ok chrome@112 (windows 10) -> module - an error in xhr callback is noticed and harvested -> Should have correct message
ok chrome@112 (windows 10) -> module - an error in xhr callback is noticed and harvested -> Should have a stack trace
# chrome@112 (windows 10) -> tests 101
# chrome@112 (windows 10) -> pass  101
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> module - an external JS import that throws an error generates and sends an error object -> Should have correct custom attributes
# chrome@112 (windows 10) -> classic - capturing fetch metrics
ok chrome@112 (windows 10) -> classic - capturing fetch metrics -> XHR data submitted via POST request from sendBeacon
ok chrome@112 (windows 10) -> classic - capturing fetch metrics -> request body should not be empty
ok chrome@112 (windows 10) -> classic - capturing fetch metrics -> has xhr data
ok chrome@112 (windows 10) -> classic - capturing fetch metrics -> XHR record has correct keys
# chrome@112 (windows 10) -> tests 102
# chrome@112 (windows 10) -> pass  102
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@112 (windows 10) -> classic - capturing XHR metrics
ok chrome@112 (windows 10) -> classic - capturing XHR metrics -> XHR data submitted via POST request from sendBeacon
ok chrome@112 (windows 10) -> classic - capturing XHR metrics -> request body should not be empty
ok chrome@112 (windows 10) -> classic - capturing XHR metrics -> has xhr data
ok chrome@112 (windows 10) -> classic - capturing XHR metrics -> has at least one XHR record
ok chrome@112 (windows 10) -> classic - capturing XHR metrics -> XHR record has correct keys
# chrome@112 (windows 10) -> tests 122
# chrome@112 (windows 10) -> pass  122
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> classic - an error in eventListener is noticed and harvested -> Should have a stack trace
# chrome@112 (windows 10) -> module - capturing fetch metrics
ok chrome@112 (windows 10) -> module - capturing fetch metrics -> XHR data submitted via POST request from sendBeacon
ok chrome@112 (windows 10) -> module - capturing fetch metrics -> request body should not be empty
ok chrome@112 (windows 10) -> module - capturing fetch metrics -> has xhr data
ok chrome@112 (windows 10) -> module - capturing fetch metrics -> XHR record has correct keys
# chrome@112 (windows 10) -> tests 262
# chrome@112 (windows 10) -> pass  262
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> Distributed Tracing info is added to Fetch ajax events -> requested with fetch
# chrome@112 (windows 10) -> default headers on XHR request to allowed cross-origin call
ok chrome@112 (windows 10) -> default headers on XHR request to allowed cross-origin call -> newrelic header should be present
ok chrome@112 (windows 10) -> default headers on XHR request to allowed cross-origin call -> traceparent header should not be present
ok chrome@112 (windows 10) -> default headers on XHR request to allowed cross-origin call -> tracestate header should not be present
# chrome@112 (windows 10) -> tests 128
# chrome@112 (windows 10) -> pass  128
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
# closed chrome@112 (windows 10)
# closed chrome@112 (windows 10)
# closed chrome@112 (windows 10)
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> module - setErrorHandler ignores error -> Should have a stack trace
# chrome@112 (windows 10) -> no headers are added on different origin when the origin is not allowed
# chrome@112 (windows 10) -> when fetch is called with one string argument
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> tracestate header should not be present
# chrome@112 (windows 10) -> when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@112 (windows 10) -> when fetch is called with a Request argument
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> tracestate header should not be present
# chrome@112 (windows 10) -> when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@112 (windows 10) -> tests 71
# chrome@112 (windows 10) -> pass  71
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> Distributed Tracing info is added to XHR ajax events -> requested with XMLHttpRequest
# chrome@112 (windows 10) -> XHR request on different origin has no DT headers
ok chrome@112 (windows 10) -> XHR request on different origin has no DT headers -> newrelic header should not be present
ok chrome@112 (windows 10) -> XHR request on different origin has no DT headers -> traceparent header should not be present
ok chrome@112 (windows 10) -> XHR request on different origin has no DT headers -> tracestate header should not be present
# chrome@112 (windows 10) -> tests 112
# chrome@112 (windows 10) -> pass  112
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> timestamp is there
# chrome@112 (windows 10) -> headers configuration for cross-origin calls is respected
ok chrome@112 (windows 10) -> headers configuration for cross-origin calls is respected -> newrelic header should not be present
ok chrome@112 (windows 10) -> headers configuration for cross-origin calls is respected -> traceparent header should be present
ok chrome@112 (windows 10) -> headers configuration for cross-origin calls is respected -> tracestate header should be present
# chrome@112 (windows 10) -> tests 162
# chrome@112 (windows 10) -> pass  162
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> module - an error in setInterval is noticed and harvested -> Should have a stack trace
# chrome@112 (windows 10) -> slow XHR submission should not delay next page load
ok chrome@112 (windows 10) -> slow XHR submission should not delay next page load -> next page should have loaded before bam server responded
# chrome@112 (windows 10) -> tests 198
# chrome@112 (windows 10) -> pass  198
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> classic - setErrorHandler ignores error -> Should have a stack trace
# chrome@112 (windows 10) -> newrelic header is not added on different origin when explicitly disabled in configuration
# chrome@112 (windows 10) -> when fetch is called with one string argument
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> tracestate header should not be present
# chrome@112 (windows 10) -> when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@112 (windows 10) -> when fetch is called with a Request argument
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> tracestate header should not be present
# chrome@112 (windows 10) -> when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@112 (windows 10) -> tests 114
# chrome@112 (windows 10) -> pass  114
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> classic - if server returns 429, errors are stored and retried -> Should have a stack trace
# chrome@112 (windows 10) -> trace context headers are added on different origin when explicitly enabled in configuration
# chrome@112 (windows 10) -> when fetch is called with one string argument
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> newrelic header should be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be equivalent
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> traceparent header should be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> tracestate header should be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> parent header should have four parts
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> first part should be format version set to 00
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> trace ID is there
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> key should be in the right format
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> state header should have nine parts
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> version is set to 0
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> third part is set to account ID
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> priority is not set
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> timestamp is there
# chrome@112 (windows 10) -> when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> newrelic header should be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be equivalent
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> traceparent header should be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> tracestate header should be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> parent header should have four parts
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> first part should be format version set to 00
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> trace ID is there
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> key should be in the right format
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> state header should have nine parts
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> version is set to 0
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> third part is set to account ID
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> priority is not set
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> timestamp is there
# chrome@112 (windows 10) -> when fetch is called with a Request argument
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> newrelic header should be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be equivalent
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> traceparent header should be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> tracestate header should be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> parent header should have four parts
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> first part should be format version set to 00
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> trace ID is there
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> key should be in the right format
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> state header should have nine parts
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> version is set to 0
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> third part is set to account ID
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> priority is not set
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> timestamp is there
# chrome@112 (windows 10) -> when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> newrelic header should be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be equivalent
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> traceparent header should be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> tracestate header should be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> parent header should have four parts
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> first part should be format version set to 00
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> trace ID is there
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> fourth part should be set to sampled flag
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> key should be in the right format
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> state header should have nine parts
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> version is set to 0
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> parent type is set to 1 for Browser
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> third part is set to account ID
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> fourth part is set to app/agent ID
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> span ID is there
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> fifth part is empty - no transaction in Browser
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> priority is not set
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> timestamp is there
# chrome@112 (windows 10) -> tests 372
# chrome@112 (windows 10) -> pass  372
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> module - if server returns 429, errors are stored and retried -> Should have a stack trace
# chrome@112 (windows 10) -> default headers on different origin when the origin is allowed
# chrome@112 (windows 10) -> when fetch is called with one string argument
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> newrelic header should be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be equivalent
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> tracestate header should not be present
# chrome@112 (windows 10) -> when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> newrelic header should be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be equivalent
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@112 (windows 10) -> when fetch is called with a Request argument
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> newrelic header should be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be equivalent
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> tracestate header should not be present
# chrome@112 (windows 10) -> when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> newrelic header should be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be equivalent
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@112 (windows 10) -> tests 108
# chrome@112 (windows 10) -> pass  108
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> classic - an error in setTimeout is noticed and harvested -> Should have a stack trace
# chrome@112 (windows 10) -> Ignoring data url XHR events.
ok chrome@112 (windows 10) -> Ignoring data url XHR events. -> Did not receive an XHR event for data URL.
ok chrome@112 (windows 10) -> Ignoring data url XHR events. -> Received events harvest.
# chrome@112 (windows 10) -> tests 75
# chrome@112 (windows 10) -> pass  75
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> module - multiple matching errors are aggregated -> Should have aggregated 3 errors
# chrome@112 (windows 10) -> capturing large payload of XHR ajax events
ok chrome@112 (windows 10) -> capturing large payload of XHR ajax events -> should be truthy
ok chrome@112 (windows 10) -> capturing large payload of XHR ajax events -> should be truthy
# chrome@112 (windows 10) -> tests 70
# chrome@112 (windows 10) -> pass  70
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
# closed chrome@112 (windows 10)
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> does not set CAT headers on outbound XHRs to different origin -> cross-origin XHR should not have CAT header
# chrome@112 (windows 10) -> no headers are added on different origin by default
# chrome@112 (windows 10) -> when fetch is called with one string argument
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with one string argument -> tracestate header should not be present
# chrome@112 (windows 10) -> when fetch is called with URL string and options arguments
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@112 (windows 10) -> when fetch is called with a Request argument
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a Request argument -> tracestate header should not be present
# chrome@112 (windows 10) -> when fetch is called with a URL object argument
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@112 (windows 10) -> when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@112 (windows 10) -> tests 175
# chrome@112 (windows 10) -> pass  175
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
# closed chrome@112 (windows 10)
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@112 (windows 10) -> classic - xhr instrumentation works with bad XHR constructor runtime-patch
ok chrome@112 (windows 10) -> classic - xhr instrumentation works with bad XHR constructor runtime-patch -> got XHR data
# chrome@112 (windows 10) -> tests 72
# chrome@112 (windows 10) -> pass  72
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> classic - addPageAction has precedence over custom attributes -> custom member of attributes passed through
# chrome@112 (windows 10) -> classic - xhr instrumentation works with EventTarget.prototype.addEventListener patched
ok chrome@112 (windows 10) -> classic - xhr instrumentation works with EventTarget.prototype.addEventListener patched -> got XHR data
# chrome@112 (windows 10) -> tests 120
# chrome@112 (windows 10) -> pass  120
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> classic - an error in setInterval is noticed and harvested -> Should have a stack trace
# chrome@112 (windows 10) -> ajax events harvests are retried when collector returns 429
ok chrome@112 (windows 10) -> ajax events harvests are retried when collector returns 429 -> server responded with 429
ok chrome@112 (windows 10) -> ajax events harvests are retried when collector returns 429 -> got two events harvest requests
ok chrome@112 (windows 10) -> ajax events harvests are retried when collector returns 429 -> server responded with 200
ok chrome@112 (windows 10) -> ajax events harvests are retried when collector returns 429 -> second body should include the contents of the first retried harvest
# chrome@112 (windows 10) -> tests 177
# chrome@112 (windows 10) -> pass  177
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> classic - when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@112 (windows 10) -> classic - ajax events harvests are retried when collector returns 429
ok chrome@112 (windows 10) -> classic - ajax events harvests are retried when collector returns 429 -> server responded with 429
ok chrome@112 (windows 10) -> classic - ajax events harvests are retried when collector returns 429 -> got two events harvest requests
ok chrome@112 (windows 10) -> classic - ajax events harvests are retried when collector returns 429 -> server responded with 200
ok chrome@112 (windows 10) -> classic - ajax events harvests are retried when collector returns 429 -> second body should include the contents of the first retried harvest
# chrome@112 (windows 10) -> tests 560
# chrome@112 (windows 10) -> pass  560
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> module - an error has a custom attribute if setCustomAttribute() is called -> Should have correct custom attributes
# chrome@112 (windows 10) -> classic - xhr.abort() called in load callback
ok chrome@112 (windows 10) -> classic - xhr.abort() called in load callback -> got XHR data
ok chrome@112 (windows 10) -> classic - xhr.abort() called in load callback -> has at least one XHR record
ok chrome@112 (windows 10) -> classic - xhr.abort() called in load callback -> has xhr with /xhr_with_cat/1 endpoint
ok chrome@112 (windows 10) -> classic - xhr.abort() called in load callback -> has GET method
ok chrome@112 (windows 10) -> classic - xhr.abort() called in load callback -> has a hostname
ok chrome@112 (windows 10) -> classic - xhr.abort() called in load callback -> has status of 200
ok chrome@112 (windows 10) -> classic - xhr.abort() called in load callback -> has CAT data for /xhr_with_cat
ok chrome@112 (windows 10) -> classic - xhr.abort() called in load callback -> has metrics
ok chrome@112 (windows 10) -> classic - xhr.abort() called in load callback -> has one metric count
ok chrome@112 (windows 10) -> classic - xhr.abort() called in load callback -> has duration >= 0
ok chrome@112 (windows 10) -> classic - xhr.abort() called in load callback -> has rxSize of 409
ok chrome@112 (windows 10) -> classic - xhr.abort() called in load callback -> has cbTime >= 0
ok chrome@112 (windows 10) -> classic - xhr.abort() called in load callback -> has time >= 0
# chrome@112 (windows 10) -> tests 125
# chrome@112 (windows 10) -> pass  125
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@112 (windows 10) -> module - xhr instrumentation works with EventTarget.prototype.addEventListener patched
ok chrome@112 (windows 10) -> module - xhr instrumentation works with EventTarget.prototype.addEventListener patched -> got XHR data
# chrome@112 (windows 10) -> tests 282
# chrome@112 (windows 10) -> pass  282
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> module - when fetch is called with a URL object argument -> timestamp is there
# chrome@112 (windows 10) -> module - xhr instrumentation works with bad XHR constructor runtime-patch
ok chrome@112 (windows 10) -> module - xhr instrumentation works with bad XHR constructor runtime-patch -> got XHR data
# chrome@112 (windows 10) -> tests 167
# chrome@112 (windows 10) -> pass  167
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> classic - does not set CAT headers on outbound XHRs to different origin -> cross-origin XHR should not have CAT header
# chrome@112 (windows 10) -> module - ajax events harvests are retried when collector returns 429
ok chrome@112 (windows 10) -> module - ajax events harvests are retried when collector returns 429 -> server responded with 429
ok chrome@112 (windows 10) -> module - ajax events harvests are retried when collector returns 429 -> got two events harvest requests
ok chrome@112 (windows 10) -> module - ajax events harvests are retried when collector returns 429 -> server responded with 200
ok chrome@112 (windows 10) -> module - ajax events harvests are retried when collector returns 429 -> second body should include the contents of the first retried harvest
# chrome@112 (windows 10) -> tests 51
# chrome@112 (windows 10) -> pass  51
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> classic - an error has a custom attribute if setCustomAttribute() is called -> Should have correct custom attributes
# chrome@112 (windows 10) -> module - xhr.abort() called in load callback
ok chrome@112 (windows 10) -> module - xhr.abort() called in load callback -> got XHR data
ok chrome@112 (windows 10) -> module - xhr.abort() called in load callback -> has at least one XHR record
ok chrome@112 (windows 10) -> module - xhr.abort() called in load callback -> has xhr with /xhr_with_cat/1 endpoint
ok chrome@112 (windows 10) -> module - xhr.abort() called in load callback -> has GET method
ok chrome@112 (windows 10) -> module - xhr.abort() called in load callback -> has a hostname
ok chrome@112 (windows 10) -> module - xhr.abort() called in load callback -> has status of 200
ok chrome@112 (windows 10) -> module - xhr.abort() called in load callback -> has CAT data for /xhr_with_cat
ok chrome@112 (windows 10) -> module - xhr.abort() called in load callback -> has metrics
ok chrome@112 (windows 10) -> module - xhr.abort() called in load callback -> has one metric count
ok chrome@112 (windows 10) -> module - xhr.abort() called in load callback -> has duration >= 0
ok chrome@112 (windows 10) -> module - xhr.abort() called in load callback -> has rxSize of 409
ok chrome@112 (windows 10) -> module - xhr.abort() called in load callback -> has cbTime >= 0
ok chrome@112 (windows 10) -> module - xhr.abort() called in load callback -> has time >= 0
# chrome@112 (windows 10) -> tests 97
# chrome@112 (windows 10) -> pass  97
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> module - does not set CAT headers on outbound XHRs to different origin -> cross-origin XHR should not have CAT header
# chrome@112 (windows 10) -> xhr instrumentation works with EventTarget.prototype.addEventListener patched
ok chrome@112 (windows 10) -> xhr instrumentation works with EventTarget.prototype.addEventListener patched -> got XHR data
# chrome@112 (windows 10) -> tests 114
# chrome@112 (windows 10) -> pass  114
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> classic - noticeError works with string argument -> Should not have correct custom attributes
# chrome@112 (windows 10) -> xhr instrumentation works with bad XHR constructor runtime-patch
ok chrome@112 (windows 10) -> xhr instrumentation works with bad XHR constructor runtime-patch -> got XHR data
# chrome@112 (windows 10) -> tests 105
# chrome@112 (windows 10) -> pass  105
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> capturing XHR ajax events -> XMLHttpRequest ajax event was harvested
# chrome@112 (windows 10) -> xhr.abort() called in load callback
ok chrome@112 (windows 10) -> xhr.abort() called in load callback -> got XHR data
ok chrome@112 (windows 10) -> xhr.abort() called in load callback -> has at least one XHR record
ok chrome@112 (windows 10) -> xhr.abort() called in load callback -> has xhr with /xhr_with_cat/1 endpoint
ok chrome@112 (windows 10) -> xhr.abort() called in load callback -> has GET method
ok chrome@112 (windows 10) -> xhr.abort() called in load callback -> has a hostname
ok chrome@112 (windows 10) -> xhr.abort() called in load callback -> has status of 200
ok chrome@112 (windows 10) -> xhr.abort() called in load callback -> has CAT data for /xhr_with_cat
ok chrome@112 (windows 10) -> xhr.abort() called in load callback -> has metrics
ok chrome@112 (windows 10) -> xhr.abort() called in load callback -> has one metric count
ok chrome@112 (windows 10) -> xhr.abort() called in load callback -> has duration >= 0
ok chrome@112 (windows 10) -> xhr.abort() called in load callback -> has rxSize of 409
ok chrome@112 (windows 10) -> xhr.abort() called in load callback -> has cbTime >= 0
ok chrome@112 (windows 10) -> xhr.abort() called in load callback -> has time >= 0
# chrome@112 (windows 10) -> tests 141
# chrome@112 (windows 10) -> pass  141
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> module - an error in setTimeout is noticed and harvested -> Should have a stack trace
# chrome@112 (windows 10) -> no abort call in xhr request
ok chrome@112 (windows 10) -> no abort call in xhr request -> got XHR data
ok chrome@112 (windows 10) -> no abort call in xhr request -> has at least one XHR record
ok chrome@112 (windows 10) -> no abort call in xhr request -> has xhr with /json endpoint
ok chrome@112 (windows 10) -> no abort call in xhr request -> has GET method
ok chrome@112 (windows 10) -> no abort call in xhr request -> has a hostname
ok chrome@112 (windows 10) -> no abort call in xhr request -> has status of 200
ok chrome@112 (windows 10) -> no abort call in xhr request -> has metrics
ok chrome@112 (windows 10) -> no abort call in xhr request -> has one metric count
ok chrome@112 (windows 10) -> no abort call in xhr request -> has duration >= 0
ok chrome@112 (windows 10) -> no abort call in xhr request -> has rxSize of 14
ok chrome@112 (windows 10) -> no abort call in xhr request -> has cbTime >= 0
ok chrome@112 (windows 10) -> no abort call in xhr request -> has time >= 0
# chrome@112 (windows 10) -> tests 190
# chrome@112 (windows 10) -> pass  190
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> click interaction: simple case - single error (retry 1) -> first error should have a custom parameter set with the expected value
# chrome@112 (windows 10) -> PageActions are retried when collector returns 429
ok chrome@112 (windows 10) -> PageActions are retried when collector returns 429 -> server responded with 429
ok chrome@112 (windows 10) -> PageActions are retried when collector returns 429 -> got two ins harvest requests
ok chrome@112 (windows 10) -> PageActions are retried when collector returns 429 -> server responded with 200
ok chrome@112 (windows 10) -> PageActions are retried when collector returns 429 -> post body in retry harvest should be the same as in the first harvest
# chrome@112 (windows 10) -> tests 32
# chrome@112 (windows 10) -> pass  32
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> DT headers are NOT added when the feature is not enabled (default) -> tracestate header should not be present
# chrome@112 (windows 10) -> capturing XHR metrics
ok chrome@112 (windows 10) -> capturing XHR metrics -> XHR data submitted via POST request from sendBeacon
ok chrome@112 (windows 10) -> capturing XHR metrics -> request body should not be empty
ok chrome@112 (windows 10) -> capturing XHR metrics -> has xhr data
ok chrome@112 (windows 10) -> capturing XHR metrics -> has at least one XHR record
ok chrome@112 (windows 10) -> capturing XHR metrics -> XHR record has correct keys
# chrome@112 (windows 10) -> tests 126
# chrome@112 (windows 10) -> pass  126
# chrome@112 (windows 10) -> ok
ok chrome@112 (windows 10) -> classic - an error in xhr callback is noticed and harvested -> Should have a stack trace
# chrome@112 (windows 10) -> capturing fetch metrics
ok chrome@112 (windows 10) -> capturing fetch metrics -> XHR data submitted via POST request from sendBeacon
ok chrome@112 (windows 10) -> capturing fetch metrics -> request body should not be empty
ok chrome@112 (windows 10) -> capturing fetch metrics -> has xhr data
ok chrome@112 (windows 10) -> capturing fetch metrics -> XHR record has correct keys
# chrome@112 (windows 10) -> tests 194
# chrome@112 (windows 10) -> pass  194
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
# closed chrome@112 (windows 10)
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> classic - workers creation generates sm -> serviceworker supportability should not be emitted by or within a worker
# chrome@112 (windows 10) -> classic - PageActions are retried when collector returns 429
ok chrome@112 (windows 10) -> classic - PageActions are retried when collector returns 429 -> server responded with 429
ok chrome@112 (windows 10) -> classic - PageActions are retried when collector returns 429 -> got two ins harvest requests
ok chrome@112 (windows 10) -> classic - PageActions are retried when collector returns 429 -> server responded with 200
ok chrome@112 (windows 10) -> classic - PageActions are retried when collector returns 429 -> post body in retry harvest should be the same as in the first harvest
# chrome@112 (windows 10) -> tests 132
# chrome@112 (windows 10) -> pass  132
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> module - a valid obfuscationRule creates detected supportability metric -> PageSession/Endpoint/1/BytesSent contains correct name
# chrome@112 (windows 10) -> module - addPageAction has precedence over custom attributes
ok chrome@112 (windows 10) -> module - addPageAction has precedence over custom attributes -> should have 1 event
ok chrome@112 (windows 10) -> module - addPageAction has precedence over custom attributes -> event has correct action name
ok chrome@112 (windows 10) -> module - addPageAction has precedence over custom attributes -> defaults has correct precedence
ok chrome@112 (windows 10) -> module - addPageAction has precedence over custom attributes -> att has correct precedence
ok chrome@112 (windows 10) -> module - addPageAction has precedence over custom attributes -> attributes has correct precedence
ok chrome@112 (windows 10) -> module - addPageAction has precedence over custom attributes -> custom member of attributes passed through
# chrome@112 (windows 10) -> tests 136
# chrome@112 (windows 10) -> pass  136
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> interactions wait for external scripts to complete -> external script should not increase duration of the interaction
# chrome@112 (windows 10) -> module - finished records a PageAction
# chrome@112 (windows 10) -> module - finished records a PageAction (retry 1)
ok chrome@112 (windows 10) -> module - finished records a PageAction (retry 1) -> exactly 1 PageAction was submitted
ok chrome@112 (windows 10) -> module - finished records a PageAction (retry 1) -> PageAction has actionName = finished
# chrome@112 (windows 10) -> tests 47
# chrome@112 (windows 10) -> pass  47
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> Loading RequireJS does not cause errors. -> (unnamed assert)
# chrome@112 (windows 10) -> module - Obfuscate All Events
# chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1)
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> AJAX payload exists
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> AJAX -- pii was obfuscated
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> AJAX -- bam-test was obfuscated
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> AJAX -- fakeid was obfuscated
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> Errors payload exists
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> Errors -- pii was obfuscated
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> Errors -- bam-test was obfuscated
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> Errors -- fakeid was obfuscated
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> INS body payload exists
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> INS body -- pii was obfuscated
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> INS body -- bam-test was obfuscated
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> INS body -- fakeid was obfuscated
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> Errors query payload exists
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> Errors query -- pii was obfuscated
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> Errors query -- bam-test was obfuscated
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> Errors query -- fakeid was obfuscated
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> INS query payload exists
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> INS query -- pii was obfuscated
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> INS query -- bam-test was obfuscated
ok chrome@112 (windows 10) -> module - Obfuscate All Events (retry 1) -> INS query -- fakeid was obfuscated
# chrome@112 (windows 10) -> tests 121
# chrome@112 (windows 10) -> pass  121
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
ok chrome@112 (windows 10) -> module - invalid obfuscation rule #1 creates invalid supportability metric -> an invalid regex rule detected
# chrome@112 (windows 10) -> module - PageActions are retried when collector returns 429
ok chrome@112 (windows 10) -> module - PageActions are retried when collector returns 429 -> server responded with 429
ok chrome@112 (windows 10) -> module - PageActions are retried when collector returns 429 -> got two ins harvest requests
ok chrome@112 (windows 10) -> module - PageActions are retried when collector returns 429 -> server responded with 200
ok chrome@112 (windows 10) -> module - PageActions are retried when collector returns 429 -> post body in retry harvest should be the same as in the first harvest
# chrome@112 (windows 10) -> tests 73
# chrome@112 (windows 10) -> pass  73
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
# retrying 4 tests for chrome@112 (windows 10)
# starting tests for chrome@112 (windows 10)
# chrome@112 (windows 10) -> setErrorHandler ignores errors
ok chrome@112 (windows 10) -> setErrorHandler ignores errors -> pageViewErr reported
ok chrome@112 (windows 10) -> setErrorHandler ignores errors -> exactly 1 errors
ok chrome@112 (windows 10) -> setErrorHandler ignores errors -> found expected error
ok chrome@112 (windows 10) -> setErrorHandler ignores errors -> Stack hash exists
ok chrome@112 (windows 10) -> setErrorHandler ignores errors -> has correct request_uri attribute
# chrome@112 (windows 10) -> final harvest sends resources
# chrome@112 (windows 10) -> final harvest sends multiple
ok chrome@112 (windows 10) -> final harvest sends multiple -> resources harvest is sent on startup
ok chrome@112 (windows 10) -> final harvest sends multiple -> no errors harvest yet
ok chrome@112 (windows 10) -> final harvest sends multiple -> received second resources harvest
ok chrome@112 (windows 10) -> final harvest sends multiple -> received one errors harvest
ok chrome@112 (windows 10) -> final harvest sends multiple -> received res harvest
ok chrome@112 (windows 10) -> final harvest sends multiple -> received err harvest
# chrome@112 (windows 10) -> agent tracks resources seen
ok chrome@112 (windows 10) -> agent tracks resources seen -> SupportabilityMetrics object(s) were generated
ok chrome@112 (windows 10) -> agent tracks resources seen -> Non-Ajax External was captured
ok chrome@112 (windows 10) -> agent tracks resources seen -> Non-Ajax Internal was captured
ok chrome@112 (windows 10) -> agent tracks resources seen -> Ajax External was captured
ok chrome@112 (windows 10) -> agent tracks resources seen -> Ajax Internal was captured
ok chrome@112 (windows 10) -> agent tracks resources seen -> Non-Ajax External has a value
ok chrome@112 (windows 10) -> agent tracks resources seen -> Non-Ajax Internal has the correct value
ok chrome@112 (windows 10) -> agent tracks resources seen -> Ajax Internal has the correct value
ok chrome@112 (windows 10) -> agent tracks resources seen -> Ajax External has the correct value
# chrome@112 (windows 10) -> final harvest sends resources (retry 1)
ok chrome@112 (windows 10) -> final harvest sends resources (retry 1) -> resources harvest is sent on startup
ok chrome@112 (windows 10) -> final harvest sends resources (retry 1) -> received second resources harvest
# tearing down chrome@112 (windows 10)
ok chrome@112 (windows 10) -> final harvest sends resources (retry 1) -> received res harvest
# chrome@112 (windows 10) -> tests 23
# chrome@112 (windows 10) -> pass  23
# chrome@112 (windows 10) -> ok
# closed chrome@112 (windows 10)
