import SpecMatcher from '../../tools/browser-matcher/spec-matcher.mjs'
import { testErrorsRequest } from '../../tools/testing-server/utils/expect-tests'

/**
 * These test throw different errors in non-chromium browsers that result
 * in these tests not working properly in those browsers. These tests also
 * rely on `fetch` which is not available in IE and older version of other
 * browsers.
 */
const supportedBrowsers = new SpecMatcher()
  .include('chrome')
  .include('edge')
  .include('android')

describe.withBrowsersMatching(supportedBrowsers)('stack trace', () => {
  let errorsCapture

  beforeEach(async () => {
    errorsCapture = await browser.testHandle.createNetworkCaptures('bamServer', { test: testErrorsRequest })
  })
  it('identifies <inline> for same-page scripts (but only same-page scripts)', async () => {
    const [[errorsResults]] = await Promise.all([
      errorsCapture.waitForResult({ totalCount: 1 }),
      browser.url(await browser.testHandle.assetURL('sub-path-script-error/')) // Setup expects before loading the page
        .then(() => browser.waitForAgentLoad())
    ])

    // TypeError: Failed to fetch
    //     at e.<computed> (<inline>:12:24399)
    //     at run (http://bam-test-1.nr-local.net:54119/tests/assets/sub-path-script-error/js/script.js:2:3)
    //     at http://bam-test-1.nr-local.net:54119/tests/assets/sub-path-script-error/js/script.js:9:1
    expect(Array.isArray(errorsResults.request.body.err)).toEqual(true)
    expect(errorsResults.request.body.err.length).toBeGreaterThan(0)

    const stackTrace = errorsResults.request.body.err[0].params?.stack_trace
    expect(typeof stackTrace).toEqual('string')

    const stackTraceLines = stackTrace.split('\n')
    expect(stackTraceLines[1]).toContain('<inline>')
    expect(stackTraceLines[2]).not.toContain('<inline>')
    expect(stackTraceLines[3]).not.toContain('<inline>')
  })

  it('still identifies <inline> for same-page scripts after SPA route changes', async () => {
    await browser.url(await browser.testHandle.assetURL('sub-path-script-error/index.html'))
      .then(() => browser.waitForAgentLoad())

    const [[errorsResults]] = await Promise.all([
      errorsCapture.waitForResult({ totalCount: 1 }),
      browser.execute(function () {
        window.history.replaceState(null, 'New Page Title', './new-route/')
        fetch('http://test/json/foo')
          .catch(e => {
            console.error(e)
            newrelic.noticeError(e)
          })
      })
    ])

    expect(Array.isArray(errorsResults.request.body.err)).toEqual(true)
    expect(errorsResults.request.body.err.length).toBeGreaterThan(1)

    // err[0] is generated by the asset file and ignored for this test
    const params = errorsResults.request.body.err[1].params
    expect(params?.request_uri).toContain('/new-route/')
    expect(typeof params?.stack_trace).toEqual('string')

    const stackTraceLines = params.stack_trace.split('\n')
    expect(stackTraceLines[1]).toContain('<inline>')
    expect(stackTraceLines[2]).not.toContain('<inline>')
    expect(stackTraceLines[3]).not.toContain('<inline>')
  })
})
